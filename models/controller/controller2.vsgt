#vsga 0.2.7
Root id=1 vsg::MatrixTransform
{
  NumUserObjects 0
  children 1
  vsg::Node id=2 vsg::StateGroup
  {
    NumUserObjects 0
    children 1
    vsg::Node id=3 vsg::MatrixTransform
    {
      NumUserObjects 0
      children 2
      vsg::Node id=4 vsg::MatrixTransform
      {
        NumUserObjects 0
        children 1
        vsg::Node id=5 vsg::MatrixTransform
        {
          NumUserObjects 0
          children 1
          vsg::Node id=6 vsg::SpotLight
          {
            name "Spot_Orientation"
            color 0.18457 0 10
            intensity 1
            position 0 0 0
            direction 0 0 -1
            innerAngle 0.0741765
            outerAngle 0.0872665
          }
          matrix 1 0 0 0 0 5.96046e-08 -1 0 0 1 5.96046e-08 0
           0 0 0 1
          subgraphRequiresLocalFrustum 1
        }
        matrix 1 0 0 0 0 1 0 0 0 0 1 0
         0 0 0 1
        subgraphRequiresLocalFrustum 1
      }
      vsg::Node id=7 vsg::MatrixTransform
      {
        NumUserObjects 0
        children 1
        vsg::Node id=8 vsg::StateGroup
        {
          NumUserObjects 0
          children 1
          vsg::Node id=9 vsg::VertexIndexDraw
          {
            NumUserObjects 0
            firstBinding 0
            NumArrays 4
            Array id=10 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1
               1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1
               -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 1
               0.611511 1 -0.611511 0.611511 1 -0.611511 0.611511 1 -0.611511 1 0.611511 -1
               1 0.611511 -1 1 0.611511 -1 1 0.611511 -1 0.611511 1 0.611511
               0.611511 1 0.611511 0.611511 1 0.611511 1 0.611511 1 1 0.611511 1
               1 0.611511 1 1 0.611511 1 -0.611511 1 -0.611511 -0.611511 1 -0.611511
               -0.611511 1 -0.611511 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511 -1
               -1 0.611511 -1 -0.611511 1 0.611511 -0.611511 1 0.611511 -0.611511 1 0.611511
               -1 0.611511 1 -1 0.611511 1 -1 0.611511 1 -1 0.611511 1
            }
            Array id=11 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0 -1 -0 0 0 -1 1 0 -0 0 -1 -0
               0 0 1 1 0 -0 -1 0 -0 0 -1 -0
               0 0 -1 -1 0 -0 0 -1 -0 0 0 1
               0 0.707107 -0.707107 0 1 -0 0.707107 0.707107 -0 0 0 -1
               0 0.707107 -0.707107 0.707107 0.707107 -0 1 0 -0 0 0.707107 0.707107
               0 1 -0 0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
               0.707107 0.707107 -0 1 0 -0 -0.707107 0.707107 -0 0 0.707107 -0.707107
               0 1 -0 -1 0 -0 -0.707107 0.707107 -0 0 0 -1
               0 0.707107 -0.707107 -0.707107 0.707107 -0 0 0.707107 0.707107 0 1 -0
               -1 0 -0 -0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
            }
            Array id=12 vsg::vec2Array
            {
              NumUserObjects 0
              Layout 0 8 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0.375 0.5 0.375 0.5 0.375 0.5 0.375 0.25 0.375 0.25 0.375 0.25
               0.375 0.75 0.125 0.5 0.375 0.75 0.375 1 0.125 0.25 0.375 0
               0.673561 0.451439 0.673561 0.451439 0.673561 0.451439 0.576439 0.5 0.625 0.5 0.576439 0.5
               0.576439 0.5 0.673561 0.298561 0.673561 0.298561 0.673561 0.298561 0.576439 0.25 0.625 0.25
               0.576439 0.25 0.576439 0.25 0.826439 0.451439 0.826439 0.451439 0.826439 0.451439 0.576439 0.75
               0.875 0.5 0.576439 0.75 0.875 0.5 0.826439 0.298561 0.826439 0.298561 0.826439 0.298561
               0.576439 1 0.875 0.25 0.576439 0 0.875 0.25
            }
            Array id=13 vsg::vec4Array
            {
              NumUserObjects 0
              Layout 0 16 0 1 1 1 0 -1
              Size 1
              Storage id=0
              Data 1 1 1 1
            }
            Indices id=14 vsg::ushortArray
            {
              NumUserObjects 0
              Layout 0 2 0 1 1 1 0 -1
              Size 60
              Storage id=0
              Data 7 0 3 7 3 10 2 18 25 2 25 5
               4 22 38 4 38 11 9 29 6 9 36 29
               8 31 15 8 15 1 27 12 16 27 16 32
               13 28 35 13 35 20 14 21 24 14 24 17
               19 34 39 19 39 23 33 26 30 33 30 37
            }
            indexCount 60
            instanceCount 1
            firstIndex 0
            vertexOffset 0
            firstInstance 0
          }
          stateCommands 3
          vsg::StateCommand id=15 vsg::BindGraphicsPipeline
          {
            NumUserObjects 0
            slot 0
            pipeline id=16 vsg::GraphicsPipeline
            {
              NumUserObjects 0
              layout id=17 vsg::PipelineLayout
              {
                NumUserObjects 0
                Flags 0
                NumDescriptorSetLayouts 2
                DescriptorSetLayout id=18 vsg::DescriptorSetLayout
                {
                  NumUserObjects 0
                  NumDescriptorSetLayoutBindings 1
                  binding 10
                  descriptorType 6
                  descriptorCount 1
                  stageFlags 16
                }
                DescriptorSetLayout id=19 vsg::ViewDescriptorSetLayout
                {
                  NumUserObjects 0
                }
                NumPushConstantRanges 1
                stageFlags 1
                offset 0
                size 128
              }
              stages 2
              vsg::ShaderStage id=20 vsg::ShaderStage
              {
                NumUserObjects 0
                stage 1
                entryPointName "main"
                module id=21 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450
#extension GL_ARB_separate_shader_objects : enable

#pragma import_defines (VSG_INSTANCE_POSITIONS, VSG_DISPLACEMENT_MAP)

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

#ifdef VSG_DISPLACEMENT_MAP
layout(binding = 6) uniform sampler2D displacementMap;
#endif

layout(location = 0) in vec3 vsg_Vertex;
layout(location = 1) in vec3 vsg_Normal;
layout(location = 2) in vec2 vsg_TexCoord0;
layout(location = 3) in vec4 vsg_Color;

#ifdef VSG_INSTANCE_POSITIONS
layout(location = 4) in vec3 vsg_position;
#endif

layout(location = 0) out vec3 eyePos;
layout(location = 1) out vec3 normalDir;
layout(location = 2) out vec4 vertexColor;
layout(location = 3) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;
layout(location = 6) out vec3 lightDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    vec4 vertex = vec4(vsg_Vertex, 1.0);
    vec4 normal = vec4(vsg_Normal, 0.0);

#ifdef VSG_DISPLACEMENT_MAP
    // TODO need to pass as as uniform or per instance attributes
    vec3 scale = vec3(1.0, 1.0, 1.0);

    vertex.xyz = vertex.xyz + vsg_Normal * (texture(displacementMap, vsg_TexCoord0.st).s * scale.z);

    float s_delta = 0.01;
    float width = 0.0;

    float s_left = max(vsg_TexCoord0.s - s_delta, 0.0);
    float s_right = min(vsg_TexCoord0.s + s_delta, 1.0);
    float t_center = vsg_TexCoord0.t;
    float delta_left_right = (s_right - s_left) * scale.x;
    float dz_left_right = (texture(displacementMap, vec2(s_right, t_center)).s - texture(displacementMap, vec2(s_left, t_center)).s) * scale.z;

    // TODO need to handle different origins of displacementMap vs diffuseMap etc,
    float t_delta = s_delta;
    float t_bottom = max(vsg_TexCoord0.t - t_delta, 0.0);
    float t_top = min(vsg_TexCoord0.t + t_delta, 1.0);
    float s_center = vsg_TexCoord0.s;
    float delta_bottom_top = (t_top - t_bottom) * scale.y;
    float dz_bottom_top = (texture(displacementMap, vec2(s_center, t_top)).s - texture(displacementMap, vec2(s_center, t_bottom)).s) * scale.z;

    vec3 dx = normalize(vec3(delta_left_right, 0.0, dz_left_right));
    vec3 dy = normalize(vec3(0.0, delta_bottom_top, -dz_bottom_top));
    vec3 dz = normalize(cross(dx, dy));

    normal.xyz = normalize(dx * vsg_Normal.x + dy * vsg_Normal.y + dz * vsg_Normal.z);
#endif


#ifdef VSG_INSTANCE_POSITIONS
   vertex.xyz = vertex.xyz + vsg_position;
#endif

    gl_Position = (pc.projection * pc.modelView) * vertex;

    eyePos = (pc.modelView * vertex).xyz;

    vec4 lpos = /*vsg_LightSource.position*/ vec4(0.0, 0.0, 1.0, 0.0);

    viewDir = - (pc.modelView * vertex).xyz;
    normalDir = (pc.modelView * normal).xyz;

    if (lpos.w == 0.0)
        lightDir = lpos.xyz;
    else
        lightDir = lpos.xyz + viewDir;

    vertexColor = vsg_Color;
    texCoord0 = vsg_TexCoord0;
}
"
                  hints id=22 vsg::ShaderCompileSettings
                  {
                    vulkanVersion 4194304
                    clientInputVersion 100
                    language 0
                    defaultVersion 450
                    target 65536
                    forwardCompatible 0
                    defines 3
                    element "VSG_WORKFLOW_SPECGLOSS"
                    element "VSG_TWOSIDED"
                    element "VSG_VIEW_LIGHT_DATA"
                  }
                  SPIRVSize 681
                  SPIRV 119734787 65536 524298 96 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 1048591 0 4 1852399981 0 12 20 29
                   48 56 63 78 86 88 92 94 196611 2 450 589828
                   1096764487 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0
                   262149 9 1953654134 30821 327685 12 1600615286 1953654102 30821 262149 19 1836216174
                   27745 327685 20 1600615286 1836216142 27745 393221 27 1348430951 1700164197 2019914866 0
                   393222 27 0 1348430951 1953067887 7237481 196613 29 0 393221 33 1752397136
                   1936617283 1953390964 115 393222 33 0 1785688688 1769235301 28271 393222 33 1
                   1701080941 1701402220 119 196613 35 25456 262149 48 1348827493 29551 262149 54
                   1936683116 0 262149 56 2003134838 7498052 327685 63 1836216174 1766091873 114 327685
                   78 1751607660 1919501428 0 327685 86 1953654134 1866692709 7499628 327685 88 1600615286
                   1869377347 114 327685 92 1131963764 1685221231 48 393221 94 1600615286 1131963732 1685221231
                   48 262215 12 30 0 262215 20 30 1 327752 27 0
                   11 0 196679 27 2 262216 33 0 5 327752 33 0
                   35 0 327752 33 0 7 16 262216 33 1 5 327752
                   33 1 35 64 327752 33 1 7 16 196679 33 2
                   262215 48 30 0 262215 56 30 5 262215 63 30 1
                   262215 78 30 6 262215 86 30 2 262215 88 30 3
                   262215 92 30 3 262215 94 30 2 131091 2 196641 3
                   2 196630 6 32 262167 7 6 4 262176 8 7 7
                   262167 10 6 3 262176 11 1 10 262203 11 12 1
                   262187 6 14 1065353216 262203 11 20 1 262187 6 22 0
                   196638 27 7 262176 28 3 27 262203 28 29 3 262165
                   30 32 1 262187 30 31 0 262168 32 7 4 262174
                   33 32 32 262176 34 9 33 262203 34 35 9 262176
                   36 9 32 262187 30 39 1 262176 45 3 7 262176
                   47 3 10 262203 47 48 3 458796 7 55 22 22
                   14 22 262203 47 56 3 262203 47 63 3 262165 69
                   32 0 262187 69 70 3 262176 71 7 6 131092 74
                   262203 47 78 3 262203 45 86 3 262176 87 1 7
                   262203 87 88 1 262167 90 6 2 262176 91 3 90
                   262203 91 92 3 262176 93 1 90 262203 93 94 1
                   327734 2 4 0 3 131320 5 262203 8 9 7 262203
                   8 19 7 262203 8 54 7 262205 10 13 12 327761
                   6 15 13 0 327761 6 16 13 1 327761 6 17
                   13 2 458832 7 18 15 16 17 14 196670 9 18
                   262205 10 21 20 327761 6 23 21 0 327761 6 24
                   21 1 327761 6 25 21 2 458832 7 26 23 24
                   25 22 196670 19 26 327745 36 37 35 31 262205 32
                   38 37 327745 36 40 35 39 262205 32 41 40 327826
                   32 42 38 41 262205 7 43 9 327825 7 44 42
                   43 327745 45 46 29 31 196670 46 44 327745 36 49
                   35 39 262205 32 50 49 262205 7 51 9 327825 7
                   52 50 51 524367 10 53 52 52 0 1 2 196670
                   48 53 196670 54 55 327745 36 57 35 39 262205 32
                   58 57 262205 7 59 9 327825 7 60 58 59 524367
                   10 61 60 60 0 1 2 262271 10 62 61 196670
                   56 62 327745 36 64 35 39 262205 32 65 64 262205
                   7 66 19 327825 7 67 65 66 524367 10 68 67
                   67 0 1 2 196670 63 68 327745 71 72 54 70
                   262205 6 73 72 327860 74 75 73 22 196855 77 0
                   262394 75 76 81 131320 76 262205 7 79 54 524367 10
                   80 79 79 0 1 2 196670 78 80 131321 77 131320
                   81 262205 7 82 54 524367 10 83 82 82 0 1
                   2 262205 10 84 56 327809 10 85 83 84 196670 78
                   85 131321 77 131320 77 262205 7 89 88 196670 86 89
                   262205 90 95 94 196670 92 95 65789 65592
                }
                NumSpecializationConstants 0
              }
              vsg::ShaderStage id=23 vsg::ShaderStage
              {
                NumUserObjects 0
                stage 16
                entryPointName "main"
                module id=24 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_GREYSACLE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_METALLROUGHNESS_MAP, VSG_SPECULAR_MAP, VSG_TWOSIDED, VSG_WORKFLOW_SPECGLOSS, VSG_VIEW_LIGHT_DATA)

const float PI = 3.14159265359;
const float RECIPROCAL_PI = 0.31830988618;
const float RECIPROCAL_PI2 = 0.15915494;
const float EPSILON = 1e-6;
const float c_MinRoughness = 0.04;

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_METALLROUGHNESS_MAP
layout(binding = 1) uniform sampler2D mrMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(binding = 10) uniform PbrData
{
    vec4 baseColorFactor;
    vec4 emissiveFactor;
    vec4 diffuseFactor;
    vec4 specularFactor;
    float metallicFactor;
    float roughnessFactor;
    float alphaMask;
    float alphaMaskCutoff;
} pbr;

#ifdef VSG_VIEW_LIGHT_DATA
layout(set = 1, binding = 0) uniform LightData
{
    vec4 values[64];
} lightData;
#endif

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;
layout(location = 6) in vec3 lightDir;

layout(location = 0) out vec4 outColor;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float VdotL;                  // cos angle between view direction and light direction
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};


vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

vec4 LINEARtoSRGB(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(1.0 / 2.2));
    return vec4(linOut, srgbIn.w);
}

float rcp(const in float value)
{
    return 1.0 / value;
}

float pow5(const in float value)
{
    return value * value * value * value * value;
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 BRDF_Diffuse_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI;
}

vec3 BRDF_Diffuse_Custom_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI * pow(pbrInputs.NdotV, 0.5 + 0.3 * pbrInputs.perceptualRoughness);
}

// [Gotanda 2012, \"Beyond a Simple Physically Based Blinn-Phong Model in Real-Time\"]
vec3 BRDF_Diffuse_OrenNayar(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float s = a;// / ( 1.29 + 0.5 * a );
    float s2 = s * s;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = pbrInputs.VdotL - pbrInputs.NdotV * pbrInputs.NdotL;
    float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
    float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? 1.0 / max(pbrInputs.NdotL, pbrInputs.NdotV) : 1 );
    return pbrInputs.diffuseColor / PI * ( C1 + C2 ) * ( 1 + pbrInputs.perceptualRoughness * 0.5 );
}

// [Gotanda 2014, \"Designing Reflectance Models for New Consoles\"]
vec3 BRDF_Diffuse_Gotanda(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float a2 = a * a;
    float F0 = 0.04;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = VoL - pbrInputs.NdotV * pbrInputs.NdotL;
    float a2_13 = a2 + 1.36053;
    float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - pbrInputs.NdotV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - pbrInputs.NdotV, 1 + rcp(39*a2*a2+1) ) + 1 );
    //float Fr = ( 1 - 0.36 * a ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( -2.5 * Roughness * ( 1 - NoV ) + 1 );
    float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - pow5( 1 - pbrInputs.NdotL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (pbrInputs.NdotL - 1) ) * pbrInputs.NdotL;
    float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * pbrInputs.NdotV) ) ) * ( 1 - pow( 1 - pbrInputs.NdotL, ( 1 - 0.3726732 * pbrInputs.NdotV * pbrInputs.NdotV ) / ( 0.188566 + 0.38841 * pbrInputs.NdotV ) ) );
    float Bp = Cosri < 0 ? 1.4 * pbrInputs.NdotV * pbrInputs.NdotL * Cosri : Cosri;
    float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
    return pbrInputs.diffuseColor * RECIPROCAL_PI * Lr;
}

vec3 BRDF_Diffuse_Burley(PBRInfo pbrInputs)
{
    float energyBias = mix(pbrInputs.perceptualRoughness, 0.0, 0.5);
    float energyFactor = mix(pbrInputs.perceptualRoughness, 1.0, 1.0 / 1.51);
    float fd90 = energyBias + 2.0 * pbrInputs.VdotH * pbrInputs.VdotH * pbrInputs.perceptualRoughness;
    float f0 = 1.0;
    float lightScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotL, 5.0);
    float viewScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotV, 5.0);

    return pbrInputs.diffuseColor * lightScatter * viewScatter * energyFactor;
}

vec3 BRDF_Diffuse_Disney(PBRInfo pbrInputs)
{
	float Fd90 = 0.5 + 2.0 * pbrInputs.perceptualRoughness * pbrInputs.VdotH * pbrInputs.VdotH;
    vec3 f0 = vec3(0.1);
	vec3 invF0 = vec3(1.0, 1.0, 1.0) - f0;
	float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotV, 5.0 ))) * dim;
	return pbrInputs.diffuseColor * result;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
    //return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance90*pbrInputs.reflectance0) * exp2((-5.55473 * pbrInputs.VdotH - 6.98316) * pbrInputs.VdotH);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
    float NdotL = pbrInputs.NdotL;
    float NdotV = pbrInputs.NdotV;
    float r = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;

    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));
    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));
    return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
    return roughnessSq / (PI * f * f);
}

vec3 BRDF(vec3 u_LightColor, vec3 v, vec3 n, vec3 l, vec3 h, float perceptualRoughness, float metallic, vec3 specularEnvironmentR0, vec3 specularEnvironmentR90, float alphaRoughness, vec3 diffuseColor, vec3 specularColor, float ao)
{
    vec3 reflection = -normalize(reflect(v, n));
    reflection.y *= -1.0f;

    float NdotL = clamp(dot(n, l), 0.001, 1.0);
    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    float NdotH = clamp(dot(n, h), 0.0, 1.0);
    float LdotH = clamp(dot(l, h), 0.0, 1.0);
    float VdotH = clamp(dot(v, h), 0.0, 1.0);
    float VdotL = clamp(dot(v, l), 0.0, 1.0);

    PBRInfo pbrInputs = PBRInfo(NdotL,
                                NdotV,
                                NdotH,
                                LdotH,
                                VdotH,
                                VdotL,
                                perceptualRoughness,
                                metallic,
                                specularEnvironmentR0,
                                specularEnvironmentR90,
                                alphaRoughness,
                                diffuseColor,
                                specularColor);

    // Calculate the shading terms for the microfacet specular shading model
    vec3 F = specularReflection(pbrInputs);
    float G = geometricOcclusion(pbrInputs);
    float D = microfacetDistribution(pbrInputs);

    // Calculation of analytical lighting contribution
    vec3 diffuseContrib = (1.0 - F) * BRDF_Diffuse_Disney(pbrInputs);
    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

    color *= ao;

#ifdef VSG_EMISSIVE_MAP
    vec3 emissive = SRGBtoLINEAR(texture(emissiveMap, texCoord0)).rgb * pbr.emissiveFactor.rgb;
#else
    vec3 emissive = pbr.emissiveFactor.rgb;
#endif
    color += emissive;

    return color;
}

float convertMetallic(vec3 diffuse, vec3 specular, float maxSpecular)
{
    float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
    float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);

    if (perceivedSpecular < c_MinRoughness)
    {
        return 0.0;
    }

    float a = c_MinRoughness;
    float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - c_MinRoughness) + perceivedSpecular - 2.0 * c_MinRoughness;
    float c = c_MinRoughness - perceivedSpecular;
    float D = max(b * b - 4.0 * a * c, 0.0);
    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}

void main()
{
    float perceptualRoughness = 0.0;
    float metallic;
    vec3 diffuseColor;
    vec4 baseColor;

    float ambientOcclusion = 1.0;

    vec3 f0 = vec3(0.04);

#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSACLE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s * pbr.baseColorFactor;
        baseColor = vertexColor * vec4(v, v, v, 1.0);
    #else
        baseColor = vertexColor * SRGBtoLINEAR(texture(diffuseMap, texCoord0)) * pbr.baseColorFactor;
    #endif
#else
    baseColor = vertexColor * pbr.baseColorFactor;
#endif

    if (pbr.alphaMask == 1.0f)
    {
        if (baseColor.a < pbr.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_WORKFLOW_SPECGLOSS
    #ifdef VSG_DIFFUSE_MAP
        vec4 diffuse = SRGBtoLINEAR(texture(diffuseMap, texCoord0));
    #else
        vec4 diffuse = vec4(1.0);
    #endif

    #ifdef VSG_SPECULAR_MAP
        vec3 specular = SRGBtoLINEAR(texture(specularMap, texCoord0)).rgb;
        perceptualRoughness = 1.0 - texture(specularMap, texCoord0).a;
    #else
        vec3 specular = vec3(0.0);
        perceptualRoughness = 0.0;
    #endif

        float maxSpecular = max(max(specular.r, specular.g), specular.b);

        // Convert metallic value from specular glossiness inputs
        metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

        const float epsilon = 1e-6;
        vec3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - c_MinRoughness) / max(1 - metallic, epsilon)) * pbr.diffuseFactor.rgb;
        vec3 baseColorSpecularPart = specular - (vec3(c_MinRoughness) * (1 - metallic) * (1 / max(metallic, epsilon))) * pbr.specularFactor.rgb;
        baseColor = vec4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);
#else
        perceptualRoughness = pbr.roughnessFactor;
        metallic = pbr.metallicFactor;

    #ifdef VSG_METALLROUGHNESS_MAP
        vec4 mrSample = texture(mrMap, texCoord0);
        perceptualRoughness = mrSample.g * perceptualRoughness;
        metallic = mrSample.b * metallic;
    #endif
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion = texture(aoMap, texCoord0).r;
#endif

    diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;

    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();
    vec3 v = normalize(viewDir);    // Vector from surface point to camera

#ifdef VSG_VIEW_LIGHT_DATA

    float shininess = 100.0f;

    vec3 color = vec3(0.0, 0.0, 0.0);
    vec3 nd = getNormal();
    vec3 vd = normalize(viewDir);

    vec4 lightNums = lightData.values[0];
    int numAmbientLights = int(lightNums[0]);
    int numDirectionalLights = int(lightNums[1]);
    int numPointLights = int(lightNums[2]);
    int numSpotLights = int(lightNums[3]);
    int index = 1;
    if (numAmbientLights>0)
    {
        // ambient lights
        for(int i = 0; i<numAmbientLights; ++i)
        {
            vec4 ambient_color = lightData.values[index++];
            color += (baseColor.rgb * ambient_color.rgb) * (ambient_color.a * ambientOcclusion);
        }
    }

    if (numDirectionalLights>0)
    {
        // directional lights
        for(int i = 0; i<numDirectionalLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 direction = -lightData.values[index++].xyz;

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numPointLights>0)
    {
        // point light
        for(int i = 0; i<numPointLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 position = lightData.values[index++].xyz;
            vec3 delta = position - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numSpotLights>0)
    {
        // spot light
        for(int i = 0; i<numSpotLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec4 position_cosInnerAngle = lightData.values[index++];
            vec4 lightDirection_cosOuterAngle = lightData.values[index++];

            vec3 delta = eyePos - position_cosInnerAngle.xyz;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);
            float dot_lightdirection = dot(lightDirection_cosOuterAngle.xyz, direction);

            vec3 l = -direction;        // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = (lightColor.a * smoothstep(lightDirection_cosOuterAngle.w, position_cosInnerAngle.w, dot_lightdirection)) / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
#else
    vec3 l = normalize(lightDir);   // Vector from surface point to light
    vec3 h = normalize(l+v);        // Half vector between both l and v
    const vec3 u_LightColor = vec3(1.0);

    vec3 colorFrontFace = BRDF(u_LightColor, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
#ifdef VSG_TWOSIDED
    vec3 colorBackFace = BRDF(u_LightColor, v, -n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
    vec3 color = colorFrontFace+colorBackFace;
#else
    vec3 color = colorFrontFace;
#endif

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
#endif
}
"
                  hints id=22
                  SPIRVSize 6054
                  SPIRV 119734787 65536 524298 960 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 786447 4 4 1852399981 0 75 461 590
                   754 944 958 959 196624 4 7 196611 2 450 589828 1096764487
                   1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 458757
                   11 1162758476 1869894209 1111970387 879130152 59 262149 10 1650946675 28233 327685 15
                   1316250983 1634562671 10348 262149 17 1230127696 7300718 327686 17 0 1953457230 76
                   327686 17 1 1953457230 86 327686 17 2 1953457230 72 327686 17
                   3 1953457228 72 327686 17 4 1953457238 72 327686 17 5 1953457238
                   76 524294 17 6 1668441456 1970565221 1867672673 1852335989 7566181 393222 17 7
                   1635018093 1936027244 115 458758 17 8 1818649970 1635017573 811950958 0 458758 17
                   9 1818649970 1635017573 962945902 48 458758 17 10 1752198241 1970229857 1701734503 29555
                   458758 17 11 1717987684 1130722165 1919904879 0 458758 17 12 1667592307 1918987381
                   1869377347 114 1441797 21 1178882626 1718174815 1702065510 1936278623 679044462 1970435187 1345156195 1850298946
                   1714253670 828779825 758212141 1714237798 828779825 758212141 1982673254 1982673766 1714238310 1719020849 1719020851 3879219
                   327685 20 1232233072 1953853550 115 1441797 24 1667592307 1918987381 1818649938 1769235301 1932029551
                   1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827
                   862352941 862352941 15153 327685 23 1232233072 1953853550 115 1441797 28 1836016999 1769108581
                   1667452771 1769174380 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798
                   1719020849 1719020851 828779827 862352941 862352941 15153 327685 27 1232233072 1953853550 115 1507333
                   31 1919117677 1667327599 1766093925 1769108595 1769239906 1932029551 1668641396 1112550772 1718503762 828779887 758212141
                   1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685 30
                   1232233072 1953853550 115 1048581 49 1178882626 862352936 862352955 862352955 862352955 862352955 993093179
                   1983590758 1983591270 1715155814 1719024433 1719024435 828783411 59 393221 36 1766612853 1131702375 1919904879
                   0 196613 37 118 196613 38 110 196613 39 108 196613 40
                   104 458757 41 1668441456 1970565221 1867672673 1852335989 7566181 327685 42 1635018093 1667853420
                   0 524293 43 1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 44 1667592307
                   1918987381 1769369157 1835954034 1383362149 12345 393221 45 1752198241 1970229857 1701734503 29555 393221
                   46 1717987684 1130722165 1919904879 0 393221 47 1667592307 1918987381 1869377347 114 196613
                   48 28513 589829 55 1986948963 1299477093 1818326117 677603692 993224310 993224310 3879270 262149
                   52 1717987684 6648693 327685 53 1667592307 1918987381 0 327685 54 1400398189 1969448304
                   7496044 262149 57 1332636012 29813 327685 75 1836216174 1766091873 114 262149 80
                   809067590 0 196613 96 12390 262149 99 1182166633 48 196613 104 7170404
                   262149 116 1970496882 29804 262149 172 1953457230 76 262149 175 1953457230 86
                   196613 178 114 393221 185 1702130785 1952544110 1282305897 0 393221 200 1702130785
                   1952544110 1450078057 0 327685 220 1735749490 1936027240 7426931 196613 226 102 327685
                   248 1818649970 1769235301 28271 262149 259 1953457230 76 262149 265 1953457230 86
                   262149 271 1953457230 72 262149 277 1953457228 72 262149 282 1953457238 72
                   262149 287 1953457238 76 327685 292 1232233072 1953853550 115 196613 307 70
                   262149 308 1634886000 109 196613 311 71 262149 312 1634886000 109 196613
                   315 68 262149 316 1634886000 109 393221 319 1717987684 1130722165 1920233071 25193
                   262149 323 1634886000 109 327685 327 1667592307 1953394499 6449522 262149 340 1869377379
                   114 327685 351 1936289125 1702259059 0 262149 352 1148346960 6386785 458758 352
                   0 1702060386 1869377347 1667319410 7499636 458758 352 1 1936289125 1702259059 1952670022 29295
                   458758 352 2 1717987684 1181053813 1869898593 114 458758 352 3 1667592307 1918987381
                   1952670022 29295 458758 352 4 1635018093 1667853420 1952670022 29295 458758 352 5
                   1735749490 1936027240 1667319411 7499636 393222 352 6 1752198241 1935756641 107 458758 352
                   7 1752198241 1935756641 1953842027 6710895 196613 354 7496304 458757 365 1668441456 1702259045
                   1718174820 1702065510 0 458757 390 1668441456 1702259045 1701860196 1634497891 114 196613 419
                   97 196613 420 98 196613 431 99 196613 434 68 458757 455
                   1668441456 1970565221 1867672673 1852335989 7566181 458757 456 1768058209 1333030501 1970037603 1852795251 0
                   196613 457 12390 327685 459 1702060386 1869377347 114 327685 461 1953654134 1866692709
                   7499628 262149 481 1717987684 6648693 327685 483 1667592307 1918987381 0 327685 485
                   1400398189 1969448304 7496044 327685 494 1635018093 1667853420 0 262149 495 1634886000 109
                   262149 498 1634886000 109 262149 500 1634886000 109 524293 503 1702060386 1869377347
                   1718174834 1702065510 1953653072 0 524293 519 1702060386 1869377347 1701860210 1634497891 1918980210 116
                   393221 547 1717987684 1130722165 1919904879 0 393221 557 1752198241 1970229857 1701734503 29555
                   393221 561 1667592307 1918987381 1869377347 114 327685 568 1818649970 1635017573 6644590 393221
                   577 1818649970 1635017573 962945902 48 524293 582 1667592307 1918987381 1769369157 1835954034 1383362149
                   48 524293 584 1667592307 1918987381 1769369157 1835954034 1383362149 12345 196613 587 110
                   196613 589 118 262149 590 2003134838 7498052 327685 593 1852401779 1936027241 115
                   262149 595 1869377379 114 196613 596 25710 196613 598 25718 327685 601
                   1751607660 1836404340 115 327685 604 1751607628 1952531572 97 327686 604 0 1970037110
                   29541 327685 606 1751607660 1952531572 97 458757 610 1097692526 1701405293 1766618222 1937008743
                   0 524293 614 1148024174 1667592809 1852795252 1766616161 1937008743 0 393221 618 1349350766
                   1953393007 1751607628 29556 393221 622 1399682414 1282699120 1952999273 115 262149 626 1701080681
                   120 196613 631 105 393221 640 1768058209 1601465957 1869377379 114 196613 663
                   105 327685 672 1751607660 1819231092 29295 327685 677 1701996900 1869182051 110 196613
                   684 108 196613 686 104 262149 691 1818321779 101 262149 698 1634886000
                   109 262149 699 1634886000 109 262149 701 1634886000 109 262149 703 1634886000
                   109 262149 705 1634886000 109 262149 707 1634886000 109 262149 709 1634886000
                   109 262149 711 1634886000 109 262149 713 1634886000 109 262149 715 1634886000
                   109 262149 717 1634886000 109 262149 719 1634886000 109 262149 721 1634886000
                   109 196613 732 105 327685 741 1751607660 1819231092 29295 327685 746 1769172848
                   1852795252 0 262149 752 1953260900 97 262149 754 1348827493 29551 327685 757
                   1953720676 1701015137 50 327685 775 1701996900 1869182051 110 196613 781 108 196613
                   783 104 262149 788 1818321779 101 262149 797 1634886000 109 262149 798
                   1634886000 109 262149 800 1634886000 109 262149 802 1634886000 109 262149 804
                   1634886000 109 262149 806 1634886000 109 262149 808 1634886000 109 262149 810
                   1634886000 109 262149 812 1634886000 109 262149 814 1634886000 109 262149 816
                   1634886000 109 262149 818 1634886000 109 262149 820 1634886000 109 196613 831
                   105 327685 840 1751607660 1819231092 29295 524293 845 1769172848 1852795252 1936679775 1701736009
                   1735278962 25964 655365 850 1751607660 1919501428 1769235301 1667198575 1968141167 1098016116 1701603182 0
                   262149 855 1953260900 97 327685 860 1953720676 1701015137 50 327685 878 1701996900
                   1869182051 110 458757 884 1601466212 1751607660 1919509620 1769235301 28271 196613 889 108
                   196613 892 104 262149 897 1818321779 101 262149 913 1634886000 109 262149
                   914 1634886000 109 262149 916 1634886000 109 262149 918 1634886000 109 262149
                   920 1634886000 109 262149 922 1634886000 109 262149 924 1634886000 109 262149
                   926 1634886000 109 262149 928 1634886000 109 262149 930 1634886000 109 262149
                   932 1634886000 109 262149 934 1634886000 109 262149 936 1634886000 109 327685
                   944 1131705711 1919904879 0 262149 952 1634886000 109 327685 958 1131963764 1685221231
                   48 327685 959 1751607660 1919501428 0 262215 75 30 1 327752 352
                   0 35 0 327752 352 1 35 16 327752 352 2 35
                   32 327752 352 3 35 48 327752 352 4 35 64 327752
                   352 5 35 68 327752 352 6 35 72 327752 352 7
                   35 76 196679 352 2 262215 354 34 0 262215 354 33
                   10 262215 461 30 2 262215 590 30 5 262215 603 6
                   16 327752 604 0 35 0 196679 604 2 262215 606 34
                   1 262215 606 33 0 262215 754 30 0 262215 944 30
                   0 262215 958 30 3 262215 959 30 6 131091 2 196641
                   3 2 196630 6 32 262167 7 6 4 262176 8 7
                   7 262177 9 7 8 262167 13 6 3 196641 14 13
                   983070 17 6 6 6 6 6 6 6 6 13 13
                   6 13 13 262176 18 7 17 262177 19 13 18 262177
                   26 6 18 262176 33 7 13 262176 34 7 6 1048609
                   35 13 33 33 33 33 33 34 34 33 33 34
                   33 33 34 393249 51 6 33 33 34 262187 6 60
                   1055439407 393260 13 61 60 60 60 262165 64 32 0 262187
                   64 65 3 262176 74 1 13 262203 74 75 1 262187
                   6 81 1056964608 262187 6 82 1073741824 262165 83 32 1 262187
                   83 84 6 262187 83 88 4 262187 6 97 1036831949 393260
                   13 98 97 97 97 262187 6 100 1065353216 393260 13 101
                   100 100 100 262187 64 105 0 262187 64 108 1 262187
                   64 111 2 262187 83 119 0 262187 6 123 1084227584 262187
                   83 129 1 262187 83 139 11 262187 83 146 8 262187
                   83 149 9 262187 6 158 3232874585 262187 6 162 1088386572 262187
                   83 179 10 262187 83 227 2 262187 6 240 1078530011 262187
                   6 254 3212836864 262187 6 263 981668463 262187 6 275 0 262187
                   6 333 1082130432 655390 352 7 7 7 7 6 6 6
                   6 262176 353 2 352 262203 353 354 2 262176 355 2
                   7 262187 6 366 1050220167 262187 6 373 1058424226 262187 6 381
                   1038710997 262187 6 413 1025758986 131092 414 262187 6 425 1064682127 262187
                   6 429 1034147594 393260 13 458 413 413 413 262176 460 1
                   7 262203 460 461 1 262176 466 2 6 262187 83 474
                   7 458796 7 482 100 100 100 100 393260 13 484 275
                   275 275 262187 6 511 897988541 262187 83 528 3 262187 6
                   579 1103626240 262203 74 590 1 262187 6 594 1120403456 262187 64
                   602 64 262172 603 7 602 196638 604 603 262176 605 2
                   604 262203 605 606 2 262176 609 7 83 262203 74 754
                   1 262176 943 3 7 262203 943 944 3 262187 6 954
                   1050868099 262187 6 955 1042479491 262167 956 6 2 262176 957 1
                   956 262203 957 958 1 262203 74 959 1 327734 2 4
                   0 3 131320 5 262203 34 455 7 262203 34 456 7
                   262203 33 457 7 262203 8 459 7 262203 8 481 7
                   262203 33 483 7 262203 34 485 7 262203 34 494 7
                   262203 33 495 7 262203 33 498 7 262203 34 500 7
                   262203 33 503 7 262203 33 519 7 262203 33 547 7
                   262203 34 557 7 262203 33 561 7 262203 34 568 7
                   262203 34 577 7 262203 33 582 7 262203 33 584 7
                   262203 33 587 7 262203 33 589 7 262203 34 593 7
                   262203 33 595 7 262203 33 596 7 262203 33 598 7
                   262203 8 601 7 262203 609 610 7 262203 609 614 7
                   262203 609 618 7 262203 609 622 7 262203 609 626 7
                   262203 609 631 7 262203 8 640 7 262203 609 663 7
                   262203 8 672 7 262203 33 677 7 262203 33 684 7
                   262203 33 686 7 262203 34 691 7 262203 33 698 7
                   262203 33 699 7 262203 33 701 7 262203 33 703 7
                   262203 33 705 7 262203 34 707 7 262203 34 709 7
                   262203 33 711 7 262203 33 713 7 262203 34 715 7
                   262203 33 717 7 262203 33 719 7 262203 34 721 7
                   262203 609 732 7 262203 8 741 7 262203 33 746 7
                   262203 33 752 7 262203 34 757 7 262203 33 775 7
                   262203 33 781 7 262203 33 783 7 262203 34 788 7
                   262203 33 797 7 262203 33 798 7 262203 33 800 7
                   262203 33 802 7 262203 33 804 7 262203 34 806 7
                   262203 34 808 7 262203 33 810 7 262203 33 812 7
                   262203 34 814 7 262203 33 816 7 262203 33 818 7
                   262203 34 820 7 262203 609 831 7 262203 8 840 7
                   262203 8 845 7 262203 8 850 7 262203 33 855 7
                   262203 34 860 7 262203 33 878 7 262203 34 884 7
                   262203 33 889 7 262203 33 892 7 262203 34 897 7
                   262203 33 913 7 262203 33 914 7 262203 33 916 7
                   262203 33 918 7 262203 33 920 7 262203 34 922 7
                   262203 34 924 7 262203 33 926 7 262203 33 928 7
                   262203 34 930 7 262203 33 932 7 262203 33 934 7
                   262203 34 936 7 262203 8 952 7 196670 455 275 196670
                   456 100 196670 457 458 262205 7 462 461 327745 355 463
                   354 119 262205 7 464 463 327813 7 465 462 464 196670
                   459 465 327745 466 467 354 84 262205 6 468 467 327860
                   414 469 468 100 196855 471 0 262394 469 470 471 131320
                   470 327745 34 472 459 65 262205 6 473 472 327745 466
                   475 354 474 262205 6 476 475 327864 414 477 473 476
                   196855 479 0 262394 477 478 479 131320 478 65788 131320 479
                   131321 471 131320 471 196670 481 482 196670 483 484 196670 455
                   275 327745 34 486 483 105 262205 6 487 486 327745 34
                   488 483 108 262205 6 489 488 458764 6 490 1 40
                   487 489 327745 34 491 483 111 262205 6 492 491 458764
                   6 493 1 40 490 492 196670 485 493 262205 7 496
                   481 524367 13 497 496 496 0 1 2 196670 495 497
                   262205 13 499 483 196670 498 499 262205 6 501 485 196670
                   500 501 458809 6 502 55 495 498 500 196670 494 502
                   262205 7 504 481 524367 13 505 504 504 0 1 2
                   262205 6 506 485 327811 6 507 100 506 327816 6 508
                   507 425 262205 6 509 494 327811 6 510 100 509 458764
                   6 512 1 40 510 511 327816 6 513 508 512 327822
                   13 514 505 513 327745 355 515 354 227 262205 7 516
                   515 524367 13 517 516 516 0 1 2 327813 13 518
                   514 517 196670 503 518 262205 13 520 483 262205 6 521
                   494 327811 6 522 100 521 327822 13 523 458 522 262205
                   6 524 494 458764 6 525 1 40 524 511 327816 6
                   526 100 525 327822 13 527 523 526 327745 355 529 354
                   528 262205 7 530 529 524367 13 531 530 530 0 1
                   2 327813 13 532 527 531 327811 13 533 520 532 196670
                   519 533 262205 13 534 503 262205 13 535 519 262205 6
                   536 494 262205 6 537 494 327813 6 538 536 537 393296
                   13 539 538 538 538 524300 13 540 1 46 534 535
                   539 327745 34 541 481 65 262205 6 542 541 327761 6
                   543 540 0 327761 6 544 540 1 327761 6 545 540
                   2 458832 7 546 543 544 545 542 196670 459 546 262205
                   7 548 459 524367 13 549 548 548 0 1 2 262205
                   13 550 457 327811 13 551 101 550 327813 13 552 549
                   551 196670 547 552 262205 6 553 494 327811 6 554 100
                   553 262205 13 555 547 327822 13 556 555 554 196670 547
                   556 262205 6 558 455 262205 6 559 455 327813 6 560
                   558 559 196670 557 560 262205 13 562 457 262205 7 563
                   459 524367 13 564 563 563 0 1 2 262205 6 565
                   494 393296 13 566 565 565 565 524300 13 567 1 46
                   562 564 566 196670 561 567 327745 34 569 561 105 262205
                   6 570 569 327745 34 571 561 108 262205 6 572 571
                   458764 6 573 1 40 570 572 327745 34 574 561 111
                   262205 6 575 574 458764 6 576 1 40 573 575 196670
                   568 576 262205 6 578 568 327813 6 580 578 579 524300
                   6 581 1 43 580 275 100 196670 577 581 262205 13
                   583 561 196670 582 583 262205 6 585 577 327822 13 586
                   101 585 196670 584 586 262201 13 588 15 196670 587 588
                   262205 13 591 590 393228 13 592 1 69 591 196670 589
                   592 196670 593 594 196670 595 484 262201 13 597 15 196670
                   596 597 262205 13 599 590 393228 13 600 1 69 599
                   196670 598 600 393281 355 607 606 119 119 262205 7 608
                   607 196670 601 608 327745 34 611 601 105 262205 6 612
                   611 262254 83 613 612 196670 610 613 327745 34 615 601
                   108 262205 6 616 615 262254 83 617 616 196670 614 617
                   327745 34 619 601 111 262205 6 620 619 262254 83 621
                   620 196670 618 621 327745 34 623 601 65 262205 6 624
                   623 262254 83 625 624 196670 622 625 196670 626 129 262205
                   83 627 610 327853 414 628 627 119 196855 630 0 262394
                   628 629 630 131320 629 196670 631 119 131321 632 131320 632
                   262390 634 635 0 131321 636 131320 636 262205 83 637 631
                   262205 83 638 610 327857 414 639 637 638 262394 639 633
                   634 131320 633 262205 83 641 626 327808 83 642 641 129
                   196670 626 642 393281 355 643 606 119 641 262205 7 644
                   643 196670 640 644 262205 7 645 459 524367 13 646 645
                   645 0 1 2 262205 7 647 640 524367 13 648 647
                   647 0 1 2 327813 13 649 646 648 327745 34 650
                   640 65 262205 6 651 650 262205 6 652 456 327813 6
                   653 651 652 327822 13 654 649 653 262205 13 655 595
                   327809 13 656 655 654 196670 595 656 131321 635 131320 635
                   262205 83 657 631 327808 83 658 657 129 196670 631 658
                   131321 632 131320 634 131321 630 131320 630 262205 83 659 614
                   327853 414 660 659 119 196855 662 0 262394 660 661 662
                   131320 661 196670 663 119 131321 664 131320 664 262390 666 667
                   0 131321 668 131320 668 262205 83 669 663 262205 83 670
                   614 327857 414 671 669 670 262394 671 665 666 131320 665
                   262205 83 673 626 327808 83 674 673 129 196670 626 674
                   393281 355 675 606 119 673 262205 7 676 675 196670 672
                   676 262205 83 678 626 327808 83 679 678 129 196670 626
                   679 393281 355 680 606 119 678 262205 7 681 680 524367
                   13 682 681 681 0 1 2 262271 13 683 682 196670
                   677 683 262205 13 685 677 196670 684 685 262205 13 687
                   684 262205 13 688 589 327809 13 689 687 688 393228 13
                   690 1 69 689 196670 686 690 327745 34 692 672 65
                   262205 6 693 692 196670 691 693 262205 7 694 672 524367
                   13 695 694 694 0 1 2 262205 6 696 691 327822
                   13 697 695 696 196670 698 697 262205 13 700 589 196670
                   699 700 262205 13 702 587 196670 701 702 262205 13 704
                   684 196670 703 704 262205 13 706 686 196670 705 706 262205
                   6 708 455 196670 707 708 262205 6 710 494 196670 709
                   710 262205 13 712 582 196670 711 712 262205 13 714 584
                   196670 713 714 262205 6 716 557 196670 715 716 262205 13
                   718 547 196670 717 718 262205 13 720 561 196670 719 720
                   262205 6 722 456 196670 721 722 1114169 13 723 49 698
                   699 701 703 705 707 709 711 713 715 717 719 721
                   262205 13 724 595 327809 13 725 724 723 196670 595 725
                   131321 667 131320 667 262205 83 726 663 327808 83 727 726
                   129 196670 663 727 131321 664 131320 666 131321 662 131320 662
                   262205 83 728 618 327853 414 729 728 119 196855 731 0
                   262394 729 730 731 131320 730 196670 732 119 131321 733 131320
                   733 262390 735 736 0 131321 737 131320 737 262205 83 738
                   732 262205 83 739 618 327857 414 740 738 739 262394 740
                   734 735 131320 734 262205 83 742 626 327808 83 743 742
                   129 196670 626 743 393281 355 744 606 119 742 262205 7
                   745 744 196670 741 745 262205 83 747 626 327808 83 748
                   747 129 196670 626 748 393281 355 749 606 119 747 262205
                   7 750 749 524367 13 751 750 750 0 1 2 196670
                   746 751 262205 13 753 746 262205 13 755 754 327811 13
                   756 753 755 196670 752 756 327745 34 758 752 105 262205
                   6 759 758 327745 34 760 752 105 262205 6 761 760
                   327813 6 762 759 761 327745 34 763 752 108 262205 6
                   764 763 327745 34 765 752 108 262205 6 766 765 327813
                   6 767 764 766 327809 6 768 762 767 327745 34 769
                   752 111 262205 6 770 769 327745 34 771 752 111 262205
                   6 772 771 327813 6 773 770 772 327809 6 774 768
                   773 196670 757 774 262205 13 776 752 262205 6 777 757
                   393228 6 778 1 31 777 393296 13 779 778 778 778
                   327816 13 780 776 779 196670 775 780 262205 13 782 775
                   196670 781 782 262205 13 784 781 262205 13 785 589 327809
                   13 786 784 785 393228 13 787 1 69 786 196670 783
                   787 327745 34 789 741 65 262205 6 790 789 262205 6
                   791 757 327816 6 792 790 791 196670 788 792 262205 7
                   793 741 524367 13 794 793 793 0 1 2 262205 6
                   795 788 327822 13 796 794 795 196670 797 796 262205 13
                   799 589 196670 798 799 262205 13 801 587 196670 800 801
                   262205 13 803 781 196670 802 803 262205 13 805 783 196670
                   804 805 262205 6 807 455 196670 806 807 262205 6 809
                   494 196670 808 809 262205 13 811 582 196670 810 811 262205
                   13 813 584 196670 812 813 262205 6 815 557 196670 814
                   815 262205 13 817 547 196670 816 817 262205 13 819 561
                   196670 818 819 262205 6 821 456 196670 820 821 1114169 13
                   822 49 797 798 800 802 804 806 808 810 812 814
                   816 818 820 262205 13 823 595 327809 13 824 823 822
                   196670 595 824 131321 736 131320 736 262205 83 825 732 327808
                   83 826 825 129 196670 732 826 131321 733 131320 735 131321
                   731 131320 731 262205 83 827 622 327853 414 828 827 119
                   196855 830 0 262394 828 829 830 131320 829 196670 831 119
                   131321 832 131320 832 262390 834 835 0 131321 836 131320 836
                   262205 83 837 831 262205 83 838 622 327857 414 839 837
                   838 262394 839 833 834 131320 833 262205 83 841 626 327808
                   83 842 841 129 196670 626 842 393281 355 843 606 119
                   841 262205 7 844 843 196670 840 844 262205 83 846 626
                   327808 83 847 846 129 196670 626 847 393281 355 848 606
                   119 846 262205 7 849 848 196670 845 849 262205 83 851
                   626 327808 83 852 851 129 196670 626 852 393281 355 853
                   606 119 851 262205 7 854 853 196670 850 854 262205 13
                   856 754 262205 7 857 845 524367 13 858 857 857 0
                   1 2 327811 13 859 856 858 196670 855 859 327745 34
                   861 855 105 262205 6 862 861 327745 34 863 855 105
                   262205 6 864 863 327813 6 865 862 864 327745 34 866
                   855 108 262205 6 867 866 327745 34 868 855 108 262205
                   6 869 868 327813 6 870 867 869 327809 6 871 865
                   870 327745 34 872 855 111 262205 6 873 872 327745 34
                   874 855 111 262205 6 875 874 327813 6 876 873 875
                   327809 6 877 871 876 196670 860 877 262205 13 879 855
                   262205 6 880 860 393228 6 881 1 31 880 393296 13
                   882 881 881 881 327816 13 883 879 882 196670 878 883
                   262205 7 885 850 524367 13 886 885 885 0 1 2
                   262205 13 887 878 327828 6 888 886 887 196670 884 888
                   262205 13 890 878 262271 13 891 890 196670 889 891 262205
                   13 893 889 262205 13 894 589 327809 13 895 893 894
                   393228 13 896 1 69 895 196670 892 896 327745 34 898
                   840 65 262205 6 899 898 327745 34 900 850 65 262205
                   6 901 900 327745 34 902 845 65 262205 6 903 902
                   262205 6 904 884 524300 6 905 1 49 901 903 904
                   327813 6 906 899 905 262205 6 907 860 327816 6 908
                   906 907 196670 897 908 262205 7 909 840 524367 13 910
                   909 909 0 1 2 262205 6 911 897 327822 13 912
                   910 911 196670 913 912 262205 13 915 589 196670 914 915
                   262205 13 917 587 196670 916 917 262205 13 919 889 196670
                   918 919 262205 13 921 892 196670 920 921 262205 6 923
                   455 196670 922 923 262205 6 925 494 196670 924 925 262205
                   13 927 582 196670 926 927 262205 13 929 584 196670 928
                   929 262205 6 931 557 196670 930 931 262205 13 933 547
                   196670 932 933 262205 13 935 561 196670 934 935 262205 6
                   937 456 196670 936 937 1114169 13 938 49 913 914 916
                   918 920 922 924 926 928 930 932 934 936 262205 13
                   939 595 327809 13 940 939 938 196670 595 940 131321 835
                   131320 835 262205 83 941 831 327808 83 942 941 129 196670
                   831 942 131321 832 131320 834 131321 830 131320 830 262205 13
                   945 595 327745 34 946 459 65 262205 6 947 946 327761
                   6 948 945 0 327761 6 949 945 1 327761 6 950
                   945 2 458832 7 951 948 949 950 947 196670 952 951
                   327737 7 953 11 952 196670 944 953 65789 65592 327734 7
                   11 0 9 196663 8 10 131320 12 262203 33 57 7
                   262205 7 58 10 524367 13 59 58 58 0 1 2
                   458764 13 62 1 26 59 61 196670 57 62 262205 13
                   63 57 327745 34 66 10 65 262205 6 67 66 327761
                   6 68 63 0 327761 6 69 63 1 327761 6 70
                   63 2 458832 7 71 68 69 70 67 131326 71 65592
                   327734 13 15 0 14 131320 16 262205 13 76 75 393228
                   13 77 1 69 76 131326 77 65592 327734 13 21 0
                   19 196663 18 20 131320 22 262203 34 80 7 262203 33
                   96 7 262203 33 99 7 262203 34 104 7 262203 34
                   116 7 327745 34 85 20 84 262205 6 86 85 327813
                   6 87 82 86 327745 34 89 20 88 262205 6 90
                   89 327813 6 91 87 90 327745 34 92 20 88 262205
                   6 93 92 327813 6 94 91 93 327809 6 95 81
                   94 196670 80 95 196670 96 98 262205 13 102 96 327811
                   13 103 101 102 196670 99 103 327745 34 106 99 105
                   262205 6 107 106 327745 34 109 99 108 262205 6 110
                   109 327745 34 112 99 111 262205 6 113 112 458764 6
                   114 1 37 110 113 458764 6 115 1 37 107 114
                   196670 104 115 262205 6 117 80 327811 6 118 117 100
                   327745 34 120 20 119 262205 6 121 120 327811 6 122
                   100 121 458764 6 124 1 26 122 123 327813 6 125
                   118 124 327809 6 126 100 125 262205 6 127 80 327811
                   6 128 127 100 327745 34 130 20 129 262205 6 131
                   130 327811 6 132 100 131 458764 6 133 1 26 132
                   123 327813 6 134 128 133 327809 6 135 100 134 327813
                   6 136 126 135 262205 6 137 104 327813 6 138 136
                   137 196670 116 138 327745 33 140 20 139 262205 13 141
                   140 262205 6 142 116 327822 13 143 141 142 131326 143
                   65592 327734 13 24 0 19 196663 18 23 131320 25 327745
                   33 147 23 146 262205 13 148 147 327745 33 150 23
                   149 262205 13 151 150 327745 33 152 23 149 262205 13
                   153 152 327745 33 154 23 146 262205 13 155 154 327813
                   13 156 153 155 327811 13 157 151 156 327745 34 159
                   23 88 262205 6 160 159 327813 6 161 158 160 327811
                   6 163 161 162 327745 34 164 23 88 262205 6 165
                   164 327813 6 166 163 165 393228 6 167 1 29 166
                   327822 13 168 157 167 327809 13 169 148 168 131326 169
                   65592 327734 6 28 0 26 196663 18 27 131320 29 262203
                   34 172 7 262203 34 175 7 262203 34 178 7 262203
                   34 185 7 262203 34 200 7 327745 34 173 27 119
                   262205 6 174 173 196670 172 174 327745 34 176 27 129
                   262205 6 177 176 196670 175 177 327745 34 180 27 179
                   262205 6 181 180 327745 34 182 27 179 262205 6 183
                   182 327813 6 184 181 183 196670 178 184 262205 6 186
                   172 327813 6 187 82 186 262205 6 188 172 262205 6
                   189 178 262205 6 190 178 327811 6 191 100 190 262205
                   6 192 172 262205 6 193 172 327813 6 194 192 193
                   327813 6 195 191 194 327809 6 196 189 195 393228 6
                   197 1 31 196 327809 6 198 188 197 327816 6 199
                   187 198 196670 185 199 262205 6 201 175 327813 6 202
                   82 201 262205 6 203 175 262205 6 204 178 262205 6
                   205 178 327811 6 206 100 205 262205 6 207 175 262205
                   6 208 175 327813 6 209 207 208 327813 6 210 206
                   209 327809 6 211 204 210 393228 6 212 1 31 211
                   327809 6 213 203 212 327816 6 214 202 213 196670 200
                   214 262205 6 215 185 262205 6 216 200 327813 6 217
                   215 216 131326 217 65592 327734 6 31 0 26 196663 18
                   30 131320 32 262203 34 220 7 262203 34 226 7 327745
                   34 221 30 179 262205 6 222 221 327745 34 223 30
                   179 262205 6 224 223 327813 6 225 222 224 196670 220
                   225 327745 34 228 30 227 262205 6 229 228 262205 6
                   230 220 327813 6 231 229 230 327745 34 232 30 227
                   262205 6 233 232 327811 6 234 231 233 327745 34 235
                   30 227 262205 6 236 235 327813 6 237 234 236 327809
                   6 238 237 100 196670 226 238 262205 6 239 220 262205
                   6 241 226 327813 6 242 240 241 262205 6 243 226
                   327813 6 244 242 243 327816 6 245 239 244 131326 245
                   65592 327734 13 49 0 35 196663 33 36 196663 33 37
                   196663 33 38 196663 33 39 196663 33 40 196663 34 41
                   196663 34 42 196663 33 43 196663 33 44 196663 34 45
                   196663 33 46 196663 33 47 196663 34 48 131320 50 262203
                   33 248 7 262203 34 259 7 262203 34 265 7 262203
                   34 271 7 262203 34 277 7 262203 34 282 7 262203
                   34 287 7 262203 18 292 7 262203 33 307 7 262203
                   18 308 7 262203 34 311 7 262203 18 312 7 262203
                   34 315 7 262203 18 316 7 262203 33 319 7 262203
                   18 323 7 262203 33 327 7 262203 33 340 7 262203
                   33 351 7 262205 13 249 37 262205 13 250 38 458764
                   13 251 1 71 249 250 393228 13 252 1 69 251
                   262271 13 253 252 196670 248 253 327745 34 255 248 108
                   262205 6 256 255 327813 6 257 256 254 327745 34 258
                   248 108 196670 258 257 262205 13 260 38 262205 13 261
                   39 327828 6 262 260 261 524300 6 264 1 43 262
                   263 100 196670 259 264 262205 13 266 38 262205 13 267
                   37 327828 6 268 266 267 393228 6 269 1 4 268
                   524300 6 270 1 43 269 263 100 196670 265 270 262205
                   13 272 38 262205 13 273 40 327828 6 274 272 273
                   524300 6 276 1 43 274 275 100 196670 271 276 262205
                   13 278 39 262205 13 279 40 327828 6 280 278 279
                   524300 6 281 1 43 280 275 100 196670 277 281 262205
                   13 283 37 262205 13 284 40 327828 6 285 283 284
                   524300 6 286 1 43 285 275 100 196670 282 286 262205
                   13 288 37 262205 13 289 39 327828 6 290 288 289
                   524300 6 291 1 43 290 275 100 196670 287 291 262205
                   6 293 259 262205 6 294 265 262205 6 295 271 262205
                   6 296 277 262205 6 297 282 262205 6 298 287 262205
                   6 299 41 262205 6 300 42 262205 13 301 43 262205
                   13 302 44 262205 6 303 45 262205 13 304 46 262205
                   13 305 47 1048656 17 306 293 294 295 296 297 298
                   299 300 301 302 303 304 305 196670 292 306 262205 17
                   309 292 196670 308 309 327737 13 310 24 308 196670 307
                   310 262205 17 313 292 196670 312 313 327737 6 314 28
                   312 196670 311 314 262205 17 317 292 196670 316 317 327737
                   6 318 31 316 196670 315 318 262205 13 320 307 393296
                   13 321 100 100 100 327811 13 322 321 320 262205 17
                   324 292 196670 323 324 327737 13 325 21 323 327813 13
                   326 322 325 196670 319 326 262205 13 328 307 262205 6
                   329 311 327822 13 330 328 329 262205 6 331 315 327822
                   13 332 330 331 262205 6 334 259 327813 6 335 333
                   334 262205 6 336 265 327813 6 337 335 336 393296 13
                   338 337 337 337 327816 13 339 332 338 196670 327 339
                   262205 6 341 259 262205 13 342 36 327822 13 343 342
                   341 262205 13 344 319 262205 13 345 327 327809 13 346
                   344 345 327813 13 347 343 346 196670 340 347 262205 6
                   348 48 262205 13 349 340 327822 13 350 349 348 196670
                   340 350 327745 355 356 354 129 262205 7 357 356 524367
                   13 358 357 357 0 1 2 196670 351 358 262205 13
                   359 351 262205 13 360 340 327809 13 361 360 359 196670
                   340 361 262205 13 362 340 131326 362 65592 327734 6 55
                   0 51 196663 33 52 196663 33 53 196663 34 54 131320
                   56 262203 34 365 7 262203 34 390 7 262203 34 419
                   7 262203 34 420 7 262203 34 431 7 262203 34 434
                   7 327745 34 367 52 105 262205 6 368 367 327813 6
                   369 366 368 327745 34 370 52 105 262205 6 371 370
                   327813 6 372 369 371 327745 34 374 52 108 262205 6
                   375 374 327813 6 376 373 375 327745 34 377 52 108
                   262205 6 378 377 327813 6 379 376 378 327809 6 380
                   372 379 327745 34 382 52 111 262205 6 383 382 327813
                   6 384 381 383 327745 34 385 52 111 262205 6 386
                   385 327813 6 387 384 386 327809 6 388 380 387 393228
                   6 389 1 31 388 196670 365 389 327745 34 391 53
                   105 262205 6 392 391 327813 6 393 366 392 327745 34
                   394 53 105 262205 6 395 394 327813 6 396 393 395
                   327745 34 397 53 108 262205 6 398 397 327813 6 399
                   373 398 327745 34 400 53 108 262205 6 401 400 327813
                   6 402 399 401 327809 6 403 396 402 327745 34 404
                   53 111 262205 6 405 404 327813 6 406 381 405 327745
                   34 407 53 111 262205 6 408 407 327813 6 409 406
                   408 327809 6 410 403 409 393228 6 411 1 31 410
                   196670 390 411 262205 6 412 390 327864 414 415 412 413
                   196855 417 0 262394 415 416 417 131320 416 131326 275 131320
                   417 196670 419 413 262205 6 421 365 262205 6 422 54
                   327811 6 423 100 422 327813 6 424 421 423 327816 6
                   426 424 425 262205 6 427 390 327809 6 428 426 427
                   327811 6 430 428 429 196670 420 430 262205 6 432 390
                   327811 6 433 413 432 196670 431 433 262205 6 435 420
                   262205 6 436 420 327813 6 437 435 436 262205 6 438
                   419 327813 6 439 333 438 262205 6 440 431 327813 6
                   441 439 440 327811 6 442 437 441 458764 6 443 1
                   40 442 275 196670 434 443 262205 6 444 420 262271 6
                   445 444 262205 6 446 434 393228 6 447 1 31 446
                   327809 6 448 445 447 262205 6 449 419 327813 6 450
                   82 449 327816 6 451 448 450 524300 6 452 1 43
                   451 275 100 131326 452 65592
                }
                NumSpecializationConstants 0
              }
              pipelineStates 6
              vsg::GraphicsPipelineState id=25 vsg::VertexInputState
              {
                NumUserObjects 0
                NumBindings 4
                binding 0
                stride 12
                inputRate 0
                binding 1
                stride 12
                inputRate 0
                binding 2
                stride 8
                inputRate 0
                binding 3
                stride 16
                inputRate 1
                NumAttributes 4
                location 0
                binding 0
                format 106
                offset 0
                location 1
                binding 1
                format 106
                offset 0
                location 2
                binding 2
                format 103
                offset 0
                location 3
                binding 3
                format 109
                offset 0
              }
              vsg::GraphicsPipelineState id=26 vsg::InputAssemblyState
              {
                NumUserObjects 0
                topology 3
                primitiveRestartEnable 0
              }
              vsg::GraphicsPipelineState id=27 vsg::RasterizationState
              {
                NumUserObjects 0
                depthClampEnable 0
                rasterizerDiscardEnable 0
                polygonMode 0
                cullMode 0
                frontFace 0
                depthBiasEnable 0
                depthBiasConstantFactor 1
                depthBiasClamp 0
                depthBiasSlopeFactor 1
                lineWidth 1
              }
              vsg::GraphicsPipelineState id=28 vsg::MultisampleState
              {
                NumUserObjects 0
                rasterizationSamples 1
                sampleShadingEnable 0
                minSampleShading 0
                NumSampleMask 0
                alphaToCoverageEnable 0
                alphaToOneEnable 0
              }
              vsg::GraphicsPipelineState id=29 vsg::ColorBlendState
              {
                NumUserObjects 0
                logicOp 3
                logicOpEnable 0
                NumColorBlendAttachments 1
                blendEnable 0
                srcColorBlendFactor 6
                dstColorBlendFactor 7
                colorBlendOp 0
                srcAlphaBlendFactor 6
                dstAlphaBlendFactor 7
                alphaBlendOp 1
                colorWriteMask 15
                blendConstants 0 0 0 0
              }
              vsg::GraphicsPipelineState id=30 vsg::DepthStencilState
              {
                NumUserObjects 0
                depthTestEnable 1
                depthWriteEnable 1
                depthCompareOp 4
                depthBoundsTestEnable 0
                stencilTestEnable 0
                front.failOp 0
                front.passOp 0
                front.depthFailOp 0
                front.compareOp 0
                front.compareMask 0
                front.writeMask 0
                front.reference 0
                back.failOp 0
                back.passOp 0
                back.depthFailOp 0
                back.compareOp 0
                back.compareMask 0
                back.writeMask 0
                back.reference 0
                minDepthBounds 0
                maxDepthBounds 1
              }
              subpass 0
            }
          }
          vsg::StateCommand id=31 vsg::BindDescriptorSet
          {
            NumUserObjects 0
            slot 1
            layout id=17
            firstSet 0
            descriptorSet id=32 vsg::DescriptorSet
            {
              NumUserObjects 0
              setLayout id=18
              descriptors 1
              vsg::Descriptor id=33 vsg::DescriptorBuffer
              {
                NumUserObjects 0
                dstBinding 10
                dstArrayElement 0
                NumData 1
                Data id=34 vsg::PbrMaterialValue
                {
                  NumUserObjects 0
                  Layout 0 0 0 1 1 1 0 -1
                  Value                  baseColorFactor 1 1 1 1
                  emissiveFactor 0 0 0 1
                  diffuseFactor 1 1 1 1
                  specularFactor 0 0 0 1
                  metallicFactor 1
                  roughnessFactor 1
                  alphaMask 1
                  alphaMaskCutoff 0.5

                }
              }
            }
          }
          vsg::StateCommand id=35 vsg::BindViewDescriptorSets
          {
            NumUserObjects 0
            slot 2
            pipelineBindPoint 0
            layout id=17
            firstSet 1
          }
          prototypeArrayState id=0
        }
        matrix 0.025 0 0 0 0 -0.1 -8.74228e-09 0 0 2.18557e-09 -0.025 0
         0 0.09 0 1
        subgraphRequiresLocalFrustum 1
      }
      matrix 1 0 0 0 0 1 0 0 0 0 1 0
       0 0 0 1
      subgraphRequiresLocalFrustum 1
    }
    stateCommands 0
    prototypeArrayState id=0
  }
  matrix 1 0 0 0 0 0 1 0 0 -1 0 0
   0 0 0 1
  subgraphRequiresLocalFrustum 1
}
