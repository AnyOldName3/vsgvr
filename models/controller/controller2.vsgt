#vsga 1.0.0
Root id=1 vsg::MatrixTransform
{
  userObjects 0
  children 1
  vsg::Node id=2 vsg::Group
  {
    userObjects 0
    children 2
    vsg::Node id=3 vsg::MatrixTransform
    {
      userObjects 0
      children 1
      vsg::Node id=4 vsg::StateGroup
      {
        userObjects 0
        children 1
        vsg::Node id=5 vsg::VertexIndexDraw
        {
          userObjects 0
          firstBinding 0
          NumArrays 4
          Array id=6 vsg::vec3Array
          {
            userObjects 0
            properties 0 12 0 1 1 1 0 -1 0
            size 40
            storage id=0
            data 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1
             1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 1
             0.611511 1 -0.611511 0.611511 1 -0.611511 0.611511 1 -0.611511 1 0.611511 -1
             1 0.611511 -1 1 0.611511 -1 1 0.611511 -1 0.611511 1 0.611511
             0.611511 1 0.611511 0.611511 1 0.611511 1 0.611511 1 1 0.611511 1
             1 0.611511 1 1 0.611511 1 -0.611511 1 -0.611511 -0.611511 1 -0.611511
             -0.611511 1 -0.611511 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511 -1
             -1 0.611511 -1 -0.611511 1 0.611511 -0.611511 1 0.611511 -0.611511 1 0.611511
             -1 0.611511 1 -1 0.611511 1 -1 0.611511 1 -1 0.611511 1
          }
          Array id=7 vsg::vec3Array
          {
            userObjects 0
            properties 0 12 0 1 1 1 0 -1 0
            size 40
            storage id=0
            data 0 -1 -0 0 0 -1 1 0 -0 0 -1 -0
             0 0 1 1 0 -0 -1 0 -0 0 -1 -0
             0 0 -1 -1 0 -0 0 -1 -0 0 0 1
             0 0.707107 -0.707107 0 1 -0 0.707107 0.707107 -0 0 0 -1
             0 0.707107 -0.707107 0.707107 0.707107 -0 1 0 -0 0 0.707107 0.707107
             0 1 -0 0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
             0.707107 0.707107 -0 1 0 -0 -0.707107 0.707107 -0 0 0.707107 -0.707107
             0 1 -0 -1 0 -0 -0.707107 0.707107 -0 0 0 -1
             0 0.707107 -0.707107 -0.707107 0.707107 -0 0 0.707107 0.707107 0 1 -0
             -1 0 -0 -0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
          }
          Array id=8 vsg::vec2Array
          {
            userObjects 0
            properties 0 8 0 1 1 1 0 -1 0
            size 40
            storage id=0
            data 0.375 0.5 0.375 0.5 0.375 0.5 0.375 0.25 0.375 0.25 0.375 0.25
             0.375 0.75 0.125 0.5 0.375 0.75 0.375 1 0.125 0.25 0.375 0
             0.673561 0.451439 0.673561 0.451439 0.673561 0.451439 0.576439 0.5 0.625 0.5 0.576439 0.5
             0.576439 0.5 0.673561 0.298561 0.673561 0.298561 0.673561 0.298561 0.576439 0.25 0.625 0.25
             0.576439 0.25 0.576439 0.25 0.826439 0.451439 0.826439 0.451439 0.826439 0.451439 0.576439 0.75
             0.875 0.5 0.576439 0.75 0.875 0.5 0.826439 0.298561 0.826439 0.298561 0.826439 0.298561
             0.576439 1 0.875 0.25 0.576439 0 0.875 0.25
          }
          Array id=9 vsg::vec4Value
          {
            userObjects 0
            properties 0 0 0 1 1 1 0 -1 0
            value 1 1 1 1
          }
          Indices id=10 vsg::ushortArray
          {
            userObjects 0
            properties 0 2 0 1 1 1 0 -1 0
            size 60
            storage id=0
            data 7 0 3 7 3 10 2 18 25 2 25 5
             4 22 38 4 38 11 9 29 6 9 36 29
             8 31 15 8 15 1 27 12 16 27 16 32
             13 28 35 13 35 20 14 21 24 14 24 17
             19 34 39 19 39 23 33 26 30 33 30 37
          }
          indexCount 60
          instanceCount 1
          firstIndex 0
          vertexOffset 0
          firstInstance 0
        }
        stateCommands 3
        vsg::StateCommand id=11 vsg::BindGraphicsPipeline
        {
          userObjects 0
          slot 0
          pipeline id=12 vsg::GraphicsPipeline
          {
            userObjects 0
            layout id=13 vsg::PipelineLayout
            {
              userObjects 0
              flags 0
              setLayouts 2
              descriptorLayout id=14 vsg::DescriptorSetLayout
              {
                userObjects 0
                bindings 1
                binding 10
                descriptorType 6
                descriptorCount 1
                stageFlags 16
              }
              descriptorLayout id=15 vsg::ViewDescriptorSetLayout
              {
                userObjects 0
              }
              pushConstantRanges 1
              stageFlags 1
              offset 0
              size 128
            }
            stages 2
            vsg::ShaderStage id=16 vsg::ShaderStage
            {
              userObjects 0
              stage 1
              entryPointName "main"
              module id=17 vsg::ShaderModule
              {
                userObjects 0
                hints id=18 vsg::ShaderCompileSettings
                {
                  vulkanVersion 4194304
                  clientInputVersion 100
                  language 0
                  defaultVersion 450
                  target 65536
                  forwardCompatible 0
                  defines 1
                  element "VSG_TWO_SIDED_LIGHTING"
                }
                source "#version 450
#extension GL_ARB_separate_shader_objects : enable

#pragma import_defines (VSG_INSTANCE_POSITIONS, VSG_DISPLACEMENT_MAP)

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

#ifdef VSG_DISPLACEMENT_MAP
layout(binding = 6) uniform sampler2D displacementMap;
#endif

layout(location = 0) in vec3 vsg_Vertex;
layout(location = 1) in vec3 vsg_Normal;
layout(location = 2) in vec2 vsg_TexCoord0;
layout(location = 3) in vec4 vsg_Color;

#ifdef VSG_INSTANCE_POSITIONS
layout(location = 4) in vec3 vsg_position;
#endif

layout(location = 0) out vec3 eyePos;
layout(location = 1) out vec3 normalDir;
layout(location = 2) out vec4 vertexColor;
layout(location = 3) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    vec4 vertex = vec4(vsg_Vertex, 1.0);
    vec4 normal = vec4(vsg_Normal, 0.0);

#ifdef VSG_DISPLACEMENT_MAP
    // TODO need to pass as as uniform or per instance attributes
    vec3 scale = vec3(1.0, 1.0, 1.0);

    vertex.xyz = vertex.xyz + vsg_Normal * (texture(displacementMap, vsg_TexCoord0.st).s * scale.z);

    float s_delta = 0.01;
    float width = 0.0;

    float s_left = max(vsg_TexCoord0.s - s_delta, 0.0);
    float s_right = min(vsg_TexCoord0.s + s_delta, 1.0);
    float t_center = vsg_TexCoord0.t;
    float delta_left_right = (s_right - s_left) * scale.x;
    float dz_left_right = (texture(displacementMap, vec2(s_right, t_center)).s - texture(displacementMap, vec2(s_left, t_center)).s) * scale.z;

    // TODO need to handle different origins of displacementMap vs diffuseMap etc,
    float t_delta = s_delta;
    float t_bottom = max(vsg_TexCoord0.t - t_delta, 0.0);
    float t_top = min(vsg_TexCoord0.t + t_delta, 1.0);
    float s_center = vsg_TexCoord0.s;
    float delta_bottom_top = (t_top - t_bottom) * scale.y;
    float dz_bottom_top = (texture(displacementMap, vec2(s_center, t_top)).s - texture(displacementMap, vec2(s_center, t_bottom)).s) * scale.z;

    vec3 dx = normalize(vec3(delta_left_right, 0.0, dz_left_right));
    vec3 dy = normalize(vec3(0.0, delta_bottom_top, -dz_bottom_top));
    vec3 dz = normalize(cross(dx, dy));

    normal.xyz = normalize(dx * vsg_Normal.x + dy * vsg_Normal.y + dz * vsg_Normal.z);
#endif


#ifdef VSG_INSTANCE_POSITIONS
   vertex.xyz = vertex.xyz + vsg_position;
#endif

    gl_Position = (pc.projection * pc.modelView) * vertex;

    eyePos = (pc.modelView * vertex).xyz;

    vec4 lpos = /*vsg_LightSource.position*/ vec4(0.0, 0.0, 1.0, 0.0);
    viewDir = - (pc.modelView * vertex).xyz;
    normalDir = (pc.modelView * normal).xyz;

    vertexColor = vsg_Color;
    texCoord0 = vsg_TexCoord0;
}
"
                code 583
                 119734787 65536 524298 79 0 131089 1 393227 1 1280527431 1685353262 808793134
                 0 196622 0 1 983055 0 4 1852399981 0 12 20 29
                 48 56 63 69 71 75 77 196611 2 450 589828 1096764487
                 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 262149
                 9 1953654134 30821 327685 12 1600615286 1953654102 30821 262149 19 1836216174 27745
                 327685 20 1600615286 1836216142 27745 393221 27 1348430951 1700164197 2019914866 0 393222
                 27 0 1348430951 1953067887 7237481 196613 29 0 393221 33 1752397136 1936617283
                 1953390964 115 393222 33 0 1785688688 1769235301 28271 393222 33 1 1701080941
                 1701402220 119 196613 35 25456 262149 48 1348827493 29551 262149 54 1936683116
                 0 262149 56 2003134838 7498052 327685 63 1836216174 1766091873 114 327685 69
                 1953654134 1866692709 7499628 327685 71 1600615286 1869377347 114 327685 75 1131963764 1685221231
                 48 393221 77 1600615286 1131963732 1685221231 48 262215 12 30 0 262215
                 20 30 1 327752 27 0 11 0 196679 27 2 262216
                 33 0 5 327752 33 0 35 0 327752 33 0 7
                 16 262216 33 1 5 327752 33 1 35 64 327752 33
                 1 7 16 196679 33 2 262215 48 30 0 262215 56
                 30 5 262215 63 30 1 262215 69 30 2 262215 71
                 30 3 262215 75 30 3 262215 77 30 2 131091 2
                 196641 3 2 196630 6 32 262167 7 6 4 262176 8
                 7 7 262167 10 6 3 262176 11 1 10 262203 11
                 12 1 262187 6 14 1065353216 262203 11 20 1 262187 6
                 22 0 196638 27 7 262176 28 3 27 262203 28 29
                 3 262165 30 32 1 262187 30 31 0 262168 32 7
                 4 262174 33 32 32 262176 34 9 33 262203 34 35
                 9 262176 36 9 32 262187 30 39 1 262176 45 3
                 7 262176 47 3 10 262203 47 48 3 458796 7 55
                 22 22 14 22 262203 47 56 3 262203 47 63 3
                 262203 45 69 3 262176 70 1 7 262203 70 71 1
                 262167 73 6 2 262176 74 3 73 262203 74 75 3
                 262176 76 1 73 262203 76 77 1 327734 2 4 0
                 3 131320 5 262203 8 9 7 262203 8 19 7 262203
                 8 54 7 262205 10 13 12 327761 6 15 13 0
                 327761 6 16 13 1 327761 6 17 13 2 458832 7
                 18 15 16 17 14 196670 9 18 262205 10 21 20
                 327761 6 23 21 0 327761 6 24 21 1 327761 6
                 25 21 2 458832 7 26 23 24 25 22 196670 19
                 26 327745 36 37 35 31 262205 32 38 37 327745 36
                 40 35 39 262205 32 41 40 327826 32 42 38 41
                 262205 7 43 9 327825 7 44 42 43 327745 45 46
                 29 31 196670 46 44 327745 36 49 35 39 262205 32
                 50 49 262205 7 51 9 327825 7 52 50 51 524367
                 10 53 52 52 0 1 2 196670 48 53 196670 54
                 55 327745 36 57 35 39 262205 32 58 57 262205 7
                 59 9 327825 7 60 58 59 524367 10 61 60 60
                 0 1 2 262271 10 62 61 196670 56 62 327745 36
                 64 35 39 262205 32 65 64 262205 7 66 19 327825
                 7 67 65 66 524367 10 68 67 67 0 1 2
                 196670 63 68 262205 7 72 71 196670 69 72 262205 73
                 78 77 196670 75 78 65789 65592
              }
              NumSpecializationConstants 0
            }
            vsg::ShaderStage id=19 vsg::ShaderStage
            {
              userObjects 0
              stage 16
              entryPointName "main"
              module id=20 vsg::ShaderModule
              {
                userObjects 0
                hints id=18
                source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_GREYSACLE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_METALLROUGHNESS_MAP, VSG_SPECULAR_MAP, VSG_TWO_SIDED_LIGHTING, VSG_WORKFLOW_SPECGLOSS, VSG_VIEW_LIGHT_DATA)

const float PI = 3.14159265359;
const float RECIPROCAL_PI = 0.31830988618;
const float RECIPROCAL_PI2 = 0.15915494;
const float EPSILON = 1e-6;
const float c_MinRoughness = 0.04;

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_METALLROUGHNESS_MAP
layout(binding = 1) uniform sampler2D mrMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(binding = 10) uniform PbrData
{
    vec4 baseColorFactor;
    vec4 emissiveFactor;
    vec4 diffuseFactor;
    vec4 specularFactor;
    float metallicFactor;
    float roughnessFactor;
    float alphaMask;
    float alphaMaskCutoff;
} pbr;

layout(set = 1, binding = 0) uniform LightData
{
    vec4 values[64];
} lightData;

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;

layout(location = 0) out vec4 outColor;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float VdotL;                  // cos angle between view direction and light direction
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};


vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

vec4 LINEARtoSRGB(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(1.0 / 2.2));
    return vec4(linOut, srgbIn.w);
}

float rcp(const in float value)
{
    return 1.0 / value;
}

float pow5(const in float value)
{
    return value * value * value * value * value;
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 BRDF_Diffuse_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI;
}

vec3 BRDF_Diffuse_Custom_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI * pow(pbrInputs.NdotV, 0.5 + 0.3 * pbrInputs.perceptualRoughness);
}

// [Gotanda 2012, \"Beyond a Simple Physically Based Blinn-Phong Model in Real-Time\"]
vec3 BRDF_Diffuse_OrenNayar(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float s = a;// / ( 1.29 + 0.5 * a );
    float s2 = s * s;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = pbrInputs.VdotL - pbrInputs.NdotV * pbrInputs.NdotL;
    float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
    float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? 1.0 / max(pbrInputs.NdotL, pbrInputs.NdotV) : 1 );
    return pbrInputs.diffuseColor / PI * ( C1 + C2 ) * ( 1 + pbrInputs.perceptualRoughness * 0.5 );
}

// [Gotanda 2014, \"Designing Reflectance Models for New Consoles\"]
vec3 BRDF_Diffuse_Gotanda(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float a2 = a * a;
    float F0 = 0.04;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = VoL - pbrInputs.NdotV * pbrInputs.NdotL;
    float a2_13 = a2 + 1.36053;
    float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - pbrInputs.NdotV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - pbrInputs.NdotV, 1 + rcp(39*a2*a2+1) ) + 1 );
    //float Fr = ( 1 - 0.36 * a ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( -2.5 * Roughness * ( 1 - NoV ) + 1 );
    float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - pow5( 1 - pbrInputs.NdotL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (pbrInputs.NdotL - 1) ) * pbrInputs.NdotL;
    float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * pbrInputs.NdotV) ) ) * ( 1 - pow( 1 - pbrInputs.NdotL, ( 1 - 0.3726732 * pbrInputs.NdotV * pbrInputs.NdotV ) / ( 0.188566 + 0.38841 * pbrInputs.NdotV ) ) );
    float Bp = Cosri < 0 ? 1.4 * pbrInputs.NdotV * pbrInputs.NdotL * Cosri : Cosri;
    float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
    return pbrInputs.diffuseColor * RECIPROCAL_PI * Lr;
}

vec3 BRDF_Diffuse_Burley(PBRInfo pbrInputs)
{
    float energyBias = mix(pbrInputs.perceptualRoughness, 0.0, 0.5);
    float energyFactor = mix(pbrInputs.perceptualRoughness, 1.0, 1.0 / 1.51);
    float fd90 = energyBias + 2.0 * pbrInputs.VdotH * pbrInputs.VdotH * pbrInputs.perceptualRoughness;
    float f0 = 1.0;
    float lightScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotL, 5.0);
    float viewScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotV, 5.0);

    return pbrInputs.diffuseColor * lightScatter * viewScatter * energyFactor;
}

vec3 BRDF_Diffuse_Disney(PBRInfo pbrInputs)
{
	float Fd90 = 0.5 + 2.0 * pbrInputs.perceptualRoughness * pbrInputs.VdotH * pbrInputs.VdotH;
    vec3 f0 = vec3(0.1);
	vec3 invF0 = vec3(1.0, 1.0, 1.0) - f0;
	float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotV, 5.0 ))) * dim;
	return pbrInputs.diffuseColor * result;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
    //return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance90*pbrInputs.reflectance0) * exp2((-5.55473 * pbrInputs.VdotH - 6.98316) * pbrInputs.VdotH);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
    float NdotL = pbrInputs.NdotL;
    float NdotV = pbrInputs.NdotV;
    float r = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;

    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));
    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));
    return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
    return roughnessSq / (PI * f * f);
}

vec3 BRDF(vec3 u_LightColor, vec3 v, vec3 n, vec3 l, vec3 h, float perceptualRoughness, float metallic, vec3 specularEnvironmentR0, vec3 specularEnvironmentR90, float alphaRoughness, vec3 diffuseColor, vec3 specularColor, float ao)
{
    float unclmapped_NdotL = dot(n, l);

    #ifdef VSG_TWO_SIDED_LIGHTING
    if (unclmapped_NdotL < 0.0)
    {
        n = -n;
        unclmapped_NdotL = -unclmapped_NdotL;
    }
    #endif

    vec3 reflection = -normalize(reflect(v, n));
    reflection.y *= -1.0f;

    float NdotL = clamp(unclmapped_NdotL, 0.001, 1.0);
    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    float NdotH = clamp(dot(n, h), 0.0, 1.0);
    float LdotH = clamp(dot(l, h), 0.0, 1.0);
    float VdotH = clamp(dot(v, h), 0.0, 1.0);
    float VdotL = clamp(dot(v, l), 0.0, 1.0);

    PBRInfo pbrInputs = PBRInfo(NdotL,
                                NdotV,
                                NdotH,
                                LdotH,
                                VdotH,
                                VdotL,
                                perceptualRoughness,
                                metallic,
                                specularEnvironmentR0,
                                specularEnvironmentR90,
                                alphaRoughness,
                                diffuseColor,
                                specularColor);

    // Calculate the shading terms for the microfacet specular shading model
    vec3 F = specularReflection(pbrInputs);
    float G = geometricOcclusion(pbrInputs);
    float D = microfacetDistribution(pbrInputs);

    // Calculation of analytical lighting contribution
    vec3 diffuseContrib = (1.0 - F) * BRDF_Diffuse_Disney(pbrInputs);
    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

    color *= ao;

#ifdef VSG_EMISSIVE_MAP
    vec3 emissive = SRGBtoLINEAR(texture(emissiveMap, texCoord0)).rgb * pbr.emissiveFactor.rgb;
#else
    vec3 emissive = pbr.emissiveFactor.rgb;
#endif
    color += emissive;

    return color;
}

float convertMetallic(vec3 diffuse, vec3 specular, float maxSpecular)
{
    float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
    float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);

    if (perceivedSpecular < c_MinRoughness)
    {
        return 0.0;
    }

    float a = c_MinRoughness;
    float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - c_MinRoughness) + perceivedSpecular - 2.0 * c_MinRoughness;
    float c = c_MinRoughness - perceivedSpecular;
    float D = max(b * b - 4.0 * a * c, 0.0);
    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}

void main()
{
    float perceptualRoughness = 0.0;
    float metallic;
    vec3 diffuseColor;
    vec4 baseColor;

    float ambientOcclusion = 1.0;

    vec3 f0 = vec3(0.04);

#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSACLE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s * pbr.baseColorFactor;
        baseColor = vertexColor * vec4(v, v, v, 1.0);
    #else
        baseColor = vertexColor * SRGBtoLINEAR(texture(diffuseMap, texCoord0)) * pbr.baseColorFactor;
    #endif
#else
    baseColor = vertexColor * pbr.baseColorFactor;
#endif

    if (pbr.alphaMask == 1.0f)
    {
        if (baseColor.a < pbr.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_WORKFLOW_SPECGLOSS
    #ifdef VSG_DIFFUSE_MAP
        vec4 diffuse = SRGBtoLINEAR(texture(diffuseMap, texCoord0));
    #else
        vec4 diffuse = vec4(1.0);
    #endif

    #ifdef VSG_SPECULAR_MAP
        vec3 specular = SRGBtoLINEAR(texture(specularMap, texCoord0)).rgb;
        perceptualRoughness = 1.0 - texture(specularMap, texCoord0).a;
    #else
        vec3 specular = vec3(0.0);
        perceptualRoughness = 0.0;
    #endif

        float maxSpecular = max(max(specular.r, specular.g), specular.b);

        // Convert metallic value from specular glossiness inputs
        metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

        const float epsilon = 1e-6;
        vec3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - c_MinRoughness) / max(1 - metallic, epsilon)) * pbr.diffuseFactor.rgb;
        vec3 baseColorSpecularPart = specular - (vec3(c_MinRoughness) * (1 - metallic) * (1 / max(metallic, epsilon))) * pbr.specularFactor.rgb;
        baseColor = vec4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);
#else
        perceptualRoughness = pbr.roughnessFactor;
        metallic = pbr.metallicFactor;

    #ifdef VSG_METALLROUGHNESS_MAP
        vec4 mrSample = texture(mrMap, texCoord0);
        perceptualRoughness = mrSample.g * perceptualRoughness;
        metallic = mrSample.b * metallic;
    #endif
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion = texture(aoMap, texCoord0).r;
#endif

    diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;

    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();
    vec3 v = normalize(viewDir);    // Vector from surface point to camera

    float shininess = 100.0f;

    vec3 color = vec3(0.0, 0.0, 0.0);

    vec4 lightNums = lightData.values[0];
    int numAmbientLights = int(lightNums[0]);
    int numDirectionalLights = int(lightNums[1]);
    int numPointLights = int(lightNums[2]);
    int numSpotLights = int(lightNums[3]);
    int index = 1;
    if (numAmbientLights>0)
    {
        // ambient lights
        for(int i = 0; i<numAmbientLights; ++i)
        {
            vec4 ambient_color = lightData.values[index++];
            color += (baseColor.rgb * ambient_color.rgb) * (ambient_color.a * ambientOcclusion);
        }
    }

    if (numDirectionalLights>0)
    {
        // directional lights
        for(int i = 0; i<numDirectionalLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 direction = -lightData.values[index++].xyz;

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numPointLights>0)
    {
        // point light
        for(int i = 0; i<numPointLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 position = lightData.values[index++].xyz;
            vec3 delta = position - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numSpotLights>0)
    {
        // spot light
        for(int i = 0; i<numSpotLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec4 position_cosInnerAngle = lightData.values[index++];
            vec4 lightDirection_cosOuterAngle = lightData.values[index++];

            vec3 delta = position_cosInnerAngle.xyz - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);
            float dot_lightdirection = -dot(lightDirection_cosOuterAngle.xyz, direction);

            vec3 l = direction;        // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = (lightColor.a * smoothstep(lightDirection_cosOuterAngle.w, position_cosInnerAngle.w, dot_lightdirection)) / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
}
"
                code 5212
                 119734787 65536 524298 812 0 131089 1 393227 1 1280527431 1685353262 808793134
                 0 196622 0 1 720911 4 4 1852399981 0 69 377 446
                 606 796 811 196624 4 7 196611 2 450 589828 1096764487 1935622738
                 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 458757 11
                 1162758476 1869894209 1111970387 879130152 59 262149 10 1650946675 28233 327685 15 1316250983
                 1634562671 10348 262149 17 1230127696 7300718 327686 17 0 1953457230 76 327686
                 17 1 1953457230 86 327686 17 2 1953457230 72 327686 17 3
                 1953457228 72 327686 17 4 1953457238 72 327686 17 5 1953457238 76
                 524294 17 6 1668441456 1970565221 1867672673 1852335989 7566181 393222 17 7 1635018093
                 1936027244 115 458758 17 8 1818649970 1635017573 811950958 0 458758 17 9
                 1818649970 1635017573 962945902 48 458758 17 10 1752198241 1970229857 1701734503 29555 458758
                 17 11 1717987684 1130722165 1919904879 0 458758 17 12 1667592307 1918987381 1869377347
                 114 1441797 21 1178882626 1718174815 1702065510 1936278623 679044462 1970435187 1345156195 1850298946 1714253670
                 828779825 758212141 1714237798 828779825 758212141 1982673254 1982673766 1714238310 1719020849 1719020851 3879219 327685
                 20 1232233072 1953853550 115 1441797 24 1667592307 1918987381 1818649938 1769235301 1932029551 1668641396
                 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941
                 862352941 15153 327685 23 1232233072 1953853550 115 1441797 28 1836016999 1769108581 1667452771
                 1769174380 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849
                 1719020851 828779827 862352941 862352941 15153 327685 27 1232233072 1953853550 115 1507333 31
                 1919117677 1667327599 1766093925 1769108595 1769239906 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798
                 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685 30 1232233072
                 1953853550 115 1048581 49 1178882626 862352936 862352955 862352955 862352955 862352955 993093179 1983590758
                 1983591270 1715155814 1719024433 1719024435 828783411 59 393221 36 1766612853 1131702375 1919904879 0
                 196613 37 118 196613 38 110 196613 39 108 196613 40 104
                 458757 41 1668441456 1970565221 1867672673 1852335989 7566181 327685 42 1635018093 1667853420 0
                 524293 43 1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 44 1667592307 1918987381
                 1769369157 1835954034 1383362149 12345 393221 45 1752198241 1970229857 1701734503 29555 393221 46
                 1717987684 1130722165 1919904879 0 393221 47 1667592307 1918987381 1869377347 114 196613 48
                 28513 262149 51 1332636012 29813 327685 69 1836216174 1766091873 114 262149 74
                 809067590 0 196613 90 12390 262149 93 1182166633 48 196613 98 7170404
                 262149 110 1970496882 29804 262149 166 1953457230 76 262149 169 1953457230 86
                 196613 172 114 393221 179 1702130785 1952544110 1282305897 0 393221 194 1702130785
                 1952544110 1450078057 0 327685 214 1735749490 1936027240 7426931 196613 220 102 458757
                 242 1818455669 1886413165 1314874469 1282699108 0 327685 256 1818649970 1769235301 28271 262149
                 267 1953457230 76 262149 271 1953457230 86 262149 277 1953457230 72 262149
                 282 1953457228 72 262149 287 1953457238 72 262149 292 1953457238 76 327685
                 297 1232233072 1953853550 115 196613 312 70 262149 313 1634886000 109 196613
                 316 71 262149 317 1634886000 109 196613 320 68 262149 321 1634886000
                 109 393221 324 1717987684 1130722165 1920233071 25193 262149 328 1634886000 109 327685
                 332 1667592307 1953394499 6449522 262149 345 1869377379 114 327685 356 1936289125 1702259059
                 0 262149 357 1148346960 6386785 458758 357 0 1702060386 1869377347 1667319410 7499636
                 458758 357 1 1936289125 1702259059 1952670022 29295 458758 357 2 1717987684 1181053813
                 1869898593 114 458758 357 3 1667592307 1918987381 1952670022 29295 458758 357 4
                 1635018093 1667853420 1952670022 29295 458758 357 5 1735749490 1936027240 1667319411 7499636 393222
                 357 6 1752198241 1935756641 107 458758 357 7 1752198241 1935756641 1953842027 6710895
                 196613 359 7496304 458757 370 1668441456 1970565221 1867672673 1852335989 7566181 458757 371
                 1768058209 1333030501 1970037603 1852795251 0 196613 372 12390 327685 375 1702060386 1869377347
                 114 327685 377 1953654134 1866692709 7499628 327685 400 1635018093 1667853420 0 393221
                 403 1717987684 1130722165 1919904879 0 393221 413 1752198241 1970229857 1701734503 29555 393221
                 417 1667592307 1918987381 1869377347 114 327685 424 1818649970 1635017573 6644590 393221 433
                 1818649970 1635017573 962945902 48 524293 438 1667592307 1918987381 1769369157 1835954034 1383362149 48
                 524293 440 1667592307 1918987381 1769369157 1835954034 1383362149 12345 196613 443 110 196613
                 445 118 262149 446 2003134838 7498052 327685 449 1852401779 1936027241 115 262149
                 451 1869377379 114 327685 453 1751607660 1836404340 115 327685 456 1751607628 1952531572
                 97 327686 456 0 1970037110 29541 327685 458 1751607660 1952531572 97 458757
                 462 1097692526 1701405293 1766618222 1937008743 0 524293 466 1148024174 1667592809 1852795252 1766616161
                 1937008743 0 393221 470 1349350766 1953393007 1751607628 29556 393221 474 1399682414 1282699120
                 1952999273 115 262149 478 1701080681 120 196613 483 105 393221 492 1768058209
                 1601465957 1869377379 114 196613 515 105 327685 524 1751607660 1819231092 29295 327685
                 529 1701996900 1869182051 110 196613 536 108 196613 538 104 262149 543
                 1818321779 101 262149 550 1634886000 109 262149 551 1634886000 109 262149 553
                 1634886000 109 262149 555 1634886000 109 262149 557 1634886000 109 262149 559
                 1634886000 109 262149 561 1634886000 109 262149 563 1634886000 109 262149 565
                 1634886000 109 262149 567 1634886000 109 262149 569 1634886000 109 262149 571
                 1634886000 109 262149 573 1634886000 109 196613 584 105 327685 593 1751607660
                 1819231092 29295 327685 598 1769172848 1852795252 0 262149 604 1953260900 97 262149
                 606 1348827493 29551 327685 609 1953720676 1701015137 50 327685 627 1701996900 1869182051
                 110 196613 633 108 196613 635 104 262149 640 1818321779 101 262149
                 649 1634886000 109 262149 650 1634886000 109 262149 652 1634886000 109 262149
                 654 1634886000 109 262149 656 1634886000 109 262149 658 1634886000 109 262149
                 660 1634886000 109 262149 662 1634886000 109 262149 664 1634886000 109 262149
                 666 1634886000 109 262149 668 1634886000 109 262149 670 1634886000 109 262149
                 672 1634886000 109 196613 683 105 327685 692 1751607660 1819231092 29295 524293
                 697 1769172848 1852795252 1936679775 1701736009 1735278962 25964 655365 702 1751607660 1919501428 1769235301
                 1667198575 1968141167 1098016116 1701603182 0 262149 707 1953260900 97 327685 712 1953720676
                 1701015137 50 327685 730 1701996900 1869182051 110 458757 736 1601466212 1751607660 1919509620
                 1769235301 28271 196613 742 108 196613 744 104 262149 749 1818321779 101
                 262149 765 1634886000 109 262149 766 1634886000 109 262149 768 1634886000 109
                 262149 770 1634886000 109 262149 772 1634886000 109 262149 774 1634886000 109
                 262149 776 1634886000 109 262149 778 1634886000 109 262149 780 1634886000 109
                 262149 782 1634886000 109 262149 784 1634886000 109 262149 786 1634886000 109
                 262149 788 1634886000 109 327685 796 1131705711 1919904879 0 262149 804 1634886000
                 109 327685 811 1131963764 1685221231 48 262215 69 30 1 327752 357
                 0 35 0 327752 357 1 35 16 327752 357 2 35
                 32 327752 357 3 35 48 327752 357 4 35 64 327752
                 357 5 35 68 327752 357 6 35 72 327752 357 7
                 35 76 196679 357 2 262215 359 34 0 262215 359 33
                 10 262215 377 30 2 262215 446 30 5 262215 455 6
                 16 327752 456 0 35 0 196679 456 2 262215 458 34
                 1 262215 458 33 0 262215 606 30 0 262215 796 30
                 0 262215 811 30 3 131091 2 196641 3 2 196630 6
                 32 262167 7 6 4 262176 8 7 7 262177 9 7
                 8 262167 13 6 3 196641 14 13 983070 17 6 6
                 6 6 6 6 6 6 13 13 6 13 13 262176
                 18 7 17 262177 19 13 18 262177 26 6 18 262176
                 33 7 13 262176 34 7 6 1048609 35 13 33 33
                 33 33 33 34 34 33 33 34 33 33 34 262187
                 6 54 1055439407 393260 13 55 54 54 54 262165 58 32
                 0 262187 58 59 3 262176 68 1 13 262203 68 69
                 1 262187 6 75 1056964608 262187 6 76 1073741824 262165 77 32
                 1 262187 77 78 6 262187 77 82 4 262187 6 91
                 1036831949 393260 13 92 91 91 91 262187 6 94 1065353216 393260
                 13 95 94 94 94 262187 58 99 0 262187 58 102
                 1 262187 58 105 2 262187 77 113 0 262187 6 117
                 1084227584 262187 77 123 1 262187 77 133 11 262187 77 140
                 8 262187 77 143 9 262187 6 152 3232874585 262187 6 156
                 1088386572 262187 77 173 10 262187 77 221 2 262187 6 234
                 1078530011 262187 6 247 0 131092 248 262187 6 262 3212836864 262187
                 6 269 981668463 262187 6 338 1082130432 655390 357 7 7 7
                 7 6 6 6 6 262176 358 2 357 262203 358 359
                 2 262176 360 2 7 262187 6 373 1025758986 393260 13 374
                 373 373 373 262176 376 1 7 262203 376 377 1 262176
                 382 2 6 262187 77 390 7 262187 77 397 5 262187
                 6 435 1103626240 262203 68 446 1 262187 6 450 1120403456 393260
                 13 452 247 247 247 262187 58 454 64 262172 455 7
                 454 196638 456 455 262176 457 2 456 262203 457 458 2
                 262176 461 7 77 262203 68 606 1 262176 795 3 7
                 262203 795 796 3 262187 6 806 1050868099 262187 6 807 1042479491
                 262187 6 808 897988541 262167 809 6 2 262176 810 1 809
                 262203 810 811 1 327734 2 4 0 3 131320 5 262203
                 34 370 7 262203 34 371 7 262203 33 372 7 262203
                 8 375 7 262203 34 400 7 262203 33 403 7 262203
                 34 413 7 262203 33 417 7 262203 34 424 7 262203
                 34 433 7 262203 33 438 7 262203 33 440 7 262203
                 33 443 7 262203 33 445 7 262203 34 449 7 262203
                 33 451 7 262203 8 453 7 262203 461 462 7 262203
                 461 466 7 262203 461 470 7 262203 461 474 7 262203
                 461 478 7 262203 461 483 7 262203 8 492 7 262203
                 461 515 7 262203 8 524 7 262203 33 529 7 262203
                 33 536 7 262203 33 538 7 262203 34 543 7 262203
                 33 550 7 262203 33 551 7 262203 33 553 7 262203
                 33 555 7 262203 33 557 7 262203 34 559 7 262203
                 34 561 7 262203 33 563 7 262203 33 565 7 262203
                 34 567 7 262203 33 569 7 262203 33 571 7 262203
                 34 573 7 262203 461 584 7 262203 8 593 7 262203
                 33 598 7 262203 33 604 7 262203 34 609 7 262203
                 33 627 7 262203 33 633 7 262203 33 635 7 262203
                 34 640 7 262203 33 649 7 262203 33 650 7 262203
                 33 652 7 262203 33 654 7 262203 33 656 7 262203
                 34 658 7 262203 34 660 7 262203 33 662 7 262203
                 33 664 7 262203 34 666 7 262203 33 668 7 262203
                 33 670 7 262203 34 672 7 262203 461 683 7 262203
                 8 692 7 262203 8 697 7 262203 8 702 7 262203
                 33 707 7 262203 34 712 7 262203 33 730 7 262203
                 34 736 7 262203 33 742 7 262203 33 744 7 262203
                 34 749 7 262203 33 765 7 262203 33 766 7 262203
                 33 768 7 262203 33 770 7 262203 33 772 7 262203
                 34 774 7 262203 34 776 7 262203 33 778 7 262203
                 33 780 7 262203 34 782 7 262203 33 784 7 262203
                 33 786 7 262203 34 788 7 262203 8 804 7 196670
                 370 247 196670 371 94 196670 372 374 262205 7 378 377
                 327745 360 379 359 113 262205 7 380 379 327813 7 381
                 378 380 196670 375 381 327745 382 383 359 78 262205 6
                 384 383 327860 248 385 384 94 196855 387 0 262394 385
                 386 387 131320 386 327745 34 388 375 59 262205 6 389
                 388 327745 382 391 359 390 262205 6 392 391 327864 248
                 393 389 392 196855 395 0 262394 393 394 395 131320 394
                 65788 131320 395 131321 387 131320 387 327745 382 398 359 397
                 262205 6 399 398 196670 370 399 327745 382 401 359 82
                 262205 6 402 401 196670 400 402 262205 7 404 375 524367
                 13 405 404 404 0 1 2 262205 13 406 372 327811
                 13 407 95 406 327813 13 408 405 407 196670 403 408
                 262205 6 409 400 327811 6 410 94 409 262205 13 411
                 403 327822 13 412 411 410 196670 403 412 262205 6 414
                 370 262205 6 415 370 327813 6 416 414 415 196670 413
                 416 262205 13 418 372 262205 7 419 375 524367 13 420
                 419 419 0 1 2 262205 6 421 400 393296 13 422
                 421 421 421 524300 13 423 1 46 418 420 422 196670
                 417 423 327745 34 425 417 99 262205 6 426 425 327745
                 34 427 417 102 262205 6 428 427 458764 6 429 1
                 40 426 428 327745 34 430 417 105 262205 6 431 430
                 458764 6 432 1 40 429 431 196670 424 432 262205 6
                 434 424 327813 6 436 434 435 524300 6 437 1 43
                 436 247 94 196670 433 437 262205 13 439 417 196670 438
                 439 262205 6 441 433 327822 13 442 95 441 196670 440
                 442 262201 13 444 15 196670 443 444 262205 13 447 446
                 393228 13 448 1 69 447 196670 445 448 196670 449 450
                 196670 451 452 393281 360 459 458 113 113 262205 7 460
                 459 196670 453 460 327745 34 463 453 99 262205 6 464
                 463 262254 77 465 464 196670 462 465 327745 34 467 453
                 102 262205 6 468 467 262254 77 469 468 196670 466 469
                 327745 34 471 453 105 262205 6 472 471 262254 77 473
                 472 196670 470 473 327745 34 475 453 59 262205 6 476
                 475 262254 77 477 476 196670 474 477 196670 478 123 262205
                 77 479 462 327853 248 480 479 113 196855 482 0 262394
                 480 481 482 131320 481 196670 483 113 131321 484 131320 484
                 262390 486 487 0 131321 488 131320 488 262205 77 489 483
                 262205 77 490 462 327857 248 491 489 490 262394 491 485
                 486 131320 485 262205 77 493 478 327808 77 494 493 123
                 196670 478 494 393281 360 495 458 113 493 262205 7 496
                 495 196670 492 496 262205 7 497 375 524367 13 498 497
                 497 0 1 2 262205 7 499 492 524367 13 500 499
                 499 0 1 2 327813 13 501 498 500 327745 34 502
                 492 59 262205 6 503 502 262205 6 504 371 327813 6
                 505 503 504 327822 13 506 501 505 262205 13 507 451
                 327809 13 508 507 506 196670 451 508 131321 487 131320 487
                 262205 77 509 483 327808 77 510 509 123 196670 483 510
                 131321 484 131320 486 131321 482 131320 482 262205 77 511 466
                 327853 248 512 511 113 196855 514 0 262394 512 513 514
                 131320 513 196670 515 113 131321 516 131320 516 262390 518 519
                 0 131321 520 131320 520 262205 77 521 515 262205 77 522
                 466 327857 248 523 521 522 262394 523 517 518 131320 517
                 262205 77 525 478 327808 77 526 525 123 196670 478 526
                 393281 360 527 458 113 525 262205 7 528 527 196670 524
                 528 262205 77 530 478 327808 77 531 530 123 196670 478
                 531 393281 360 532 458 113 530 262205 7 533 532 524367
                 13 534 533 533 0 1 2 262271 13 535 534 196670
                 529 535 262205 13 537 529 196670 536 537 262205 13 539
                 536 262205 13 540 445 327809 13 541 539 540 393228 13
                 542 1 69 541 196670 538 542 327745 34 544 524 59
                 262205 6 545 544 196670 543 545 262205 7 546 524 524367
                 13 547 546 546 0 1 2 262205 6 548 543 327822
                 13 549 547 548 196670 550 549 262205 13 552 445 196670
                 551 552 262205 13 554 443 196670 553 554 262205 13 556
                 536 196670 555 556 262205 13 558 538 196670 557 558 262205
                 6 560 370 196670 559 560 262205 6 562 400 196670 561
                 562 262205 13 564 438 196670 563 564 262205 13 566 440
                 196670 565 566 262205 6 568 413 196670 567 568 262205 13
                 570 403 196670 569 570 262205 13 572 417 196670 571 572
                 262205 6 574 371 196670 573 574 1114169 13 575 49 550
                 551 553 555 557 559 561 563 565 567 569 571 573
                 262205 13 576 451 327809 13 577 576 575 196670 451 577
                 131321 519 131320 519 262205 77 578 515 327808 77 579 578
                 123 196670 515 579 131321 516 131320 518 131321 514 131320 514
                 262205 77 580 470 327853 248 581 580 113 196855 583 0
                 262394 581 582 583 131320 582 196670 584 113 131321 585 131320
                 585 262390 587 588 0 131321 589 131320 589 262205 77 590
                 584 262205 77 591 470 327857 248 592 590 591 262394 592
                 586 587 131320 586 262205 77 594 478 327808 77 595 594
                 123 196670 478 595 393281 360 596 458 113 594 262205 7
                 597 596 196670 593 597 262205 77 599 478 327808 77 600
                 599 123 196670 478 600 393281 360 601 458 113 599 262205
                 7 602 601 524367 13 603 602 602 0 1 2 196670
                 598 603 262205 13 605 598 262205 13 607 606 327811 13
                 608 605 607 196670 604 608 327745 34 610 604 99 262205
                 6 611 610 327745 34 612 604 99 262205 6 613 612
                 327813 6 614 611 613 327745 34 615 604 102 262205 6
                 616 615 327745 34 617 604 102 262205 6 618 617 327813
                 6 619 616 618 327809 6 620 614 619 327745 34 621
                 604 105 262205 6 622 621 327745 34 623 604 105 262205
                 6 624 623 327813 6 625 622 624 327809 6 626 620
                 625 196670 609 626 262205 13 628 604 262205 6 629 609
                 393228 6 630 1 31 629 393296 13 631 630 630 630
                 327816 13 632 628 631 196670 627 632 262205 13 634 627
                 196670 633 634 262205 13 636 633 262205 13 637 445 327809
                 13 638 636 637 393228 13 639 1 69 638 196670 635
                 639 327745 34 641 593 59 262205 6 642 641 262205 6
                 643 609 327816 6 644 642 643 196670 640 644 262205 7
                 645 593 524367 13 646 645 645 0 1 2 262205 6
                 647 640 327822 13 648 646 647 196670 649 648 262205 13
                 651 445 196670 650 651 262205 13 653 443 196670 652 653
                 262205 13 655 633 196670 654 655 262205 13 657 635 196670
                 656 657 262205 6 659 370 196670 658 659 262205 6 661
                 400 196670 660 661 262205 13 663 438 196670 662 663 262205
                 13 665 440 196670 664 665 262205 6 667 413 196670 666
                 667 262205 13 669 403 196670 668 669 262205 13 671 417
                 196670 670 671 262205 6 673 371 196670 672 673 1114169 13
                 674 49 649 650 652 654 656 658 660 662 664 666
                 668 670 672 262205 13 675 451 327809 13 676 675 674
                 196670 451 676 131321 588 131320 588 262205 77 677 584 327808
                 77 678 677 123 196670 584 678 131321 585 131320 587 131321
                 583 131320 583 262205 77 679 474 327853 248 680 679 113
                 196855 682 0 262394 680 681 682 131320 681 196670 683 113
                 131321 684 131320 684 262390 686 687 0 131321 688 131320 688
                 262205 77 689 683 262205 77 690 474 327857 248 691 689
                 690 262394 691 685 686 131320 685 262205 77 693 478 327808
                 77 694 693 123 196670 478 694 393281 360 695 458 113
                 693 262205 7 696 695 196670 692 696 262205 77 698 478
                 327808 77 699 698 123 196670 478 699 393281 360 700 458
                 113 698 262205 7 701 700 196670 697 701 262205 77 703
                 478 327808 77 704 703 123 196670 478 704 393281 360 705
                 458 113 703 262205 7 706 705 196670 702 706 262205 7
                 708 697 524367 13 709 708 708 0 1 2 262205 13
                 710 606 327811 13 711 709 710 196670 707 711 327745 34
                 713 707 99 262205 6 714 713 327745 34 715 707 99
                 262205 6 716 715 327813 6 717 714 716 327745 34 718
                 707 102 262205 6 719 718 327745 34 720 707 102 262205
                 6 721 720 327813 6 722 719 721 327809 6 723 717
                 722 327745 34 724 707 105 262205 6 725 724 327745 34
                 726 707 105 262205 6 727 726 327813 6 728 725 727
                 327809 6 729 723 728 196670 712 729 262205 13 731 707
                 262205 6 732 712 393228 6 733 1 31 732 393296 13
                 734 733 733 733 327816 13 735 731 734 196670 730 735
                 262205 7 737 702 524367 13 738 737 737 0 1 2
                 262205 13 739 730 327828 6 740 738 739 262271 6 741
                 740 196670 736 741 262205 13 743 730 196670 742 743 262205
                 13 745 742 262205 13 746 445 327809 13 747 745 746
                 393228 13 748 1 69 747 196670 744 748 327745 34 750
                 692 59 262205 6 751 750 327745 34 752 702 59 262205
                 6 753 752 327745 34 754 697 59 262205 6 755 754
                 262205 6 756 736 524300 6 757 1 49 753 755 756
                 327813 6 758 751 757 262205 6 759 712 327816 6 760
                 758 759 196670 749 760 262205 7 761 692 524367 13 762
                 761 761 0 1 2 262205 6 763 749 327822 13 764
                 762 763 196670 765 764 262205 13 767 445 196670 766 767
                 262205 13 769 443 196670 768 769 262205 13 771 742 196670
                 770 771 262205 13 773 744 196670 772 773 262205 6 775
                 370 196670 774 775 262205 6 777 400 196670 776 777 262205
                 13 779 438 196670 778 779 262205 13 781 440 196670 780
                 781 262205 6 783 413 196670 782 783 262205 13 785 403
                 196670 784 785 262205 13 787 417 196670 786 787 262205 6
                 789 371 196670 788 789 1114169 13 790 49 765 766 768
                 770 772 774 776 778 780 782 784 786 788 262205 13
                 791 451 327809 13 792 791 790 196670 451 792 131321 687
                 131320 687 262205 77 793 683 327808 77 794 793 123 196670
                 683 794 131321 684 131320 686 131321 682 131320 682 262205 13
                 797 451 327745 34 798 375 59 262205 6 799 798 327761
                 6 800 797 0 327761 6 801 797 1 327761 6 802
                 797 2 458832 7 803 800 801 802 799 196670 804 803
                 327737 7 805 11 804 196670 796 805 65789 65592 327734 7
                 11 0 9 196663 8 10 131320 12 262203 33 51 7
                 262205 7 52 10 524367 13 53 52 52 0 1 2
                 458764 13 56 1 26 53 55 196670 51 56 262205 13
                 57 51 327745 34 60 10 59 262205 6 61 60 327761
                 6 62 57 0 327761 6 63 57 1 327761 6 64
                 57 2 458832 7 65 62 63 64 61 131326 65 65592
                 327734 13 15 0 14 131320 16 262205 13 70 69 393228
                 13 71 1 69 70 131326 71 65592 327734 13 21 0
                 19 196663 18 20 131320 22 262203 34 74 7 262203 33
                 90 7 262203 33 93 7 262203 34 98 7 262203 34
                 110 7 327745 34 79 20 78 262205 6 80 79 327813
                 6 81 76 80 327745 34 83 20 82 262205 6 84
                 83 327813 6 85 81 84 327745 34 86 20 82 262205
                 6 87 86 327813 6 88 85 87 327809 6 89 75
                 88 196670 74 89 196670 90 92 262205 13 96 90 327811
                 13 97 95 96 196670 93 97 327745 34 100 93 99
                 262205 6 101 100 327745 34 103 93 102 262205 6 104
                 103 327745 34 106 93 105 262205 6 107 106 458764 6
                 108 1 37 104 107 458764 6 109 1 37 101 108
                 196670 98 109 262205 6 111 74 327811 6 112 111 94
                 327745 34 114 20 113 262205 6 115 114 327811 6 116
                 94 115 458764 6 118 1 26 116 117 327813 6 119
                 112 118 327809 6 120 94 119 262205 6 121 74 327811
                 6 122 121 94 327745 34 124 20 123 262205 6 125
                 124 327811 6 126 94 125 458764 6 127 1 26 126
                 117 327813 6 128 122 127 327809 6 129 94 128 327813
                 6 130 120 129 262205 6 131 98 327813 6 132 130
                 131 196670 110 132 327745 33 134 20 133 262205 13 135
                 134 262205 6 136 110 327822 13 137 135 136 131326 137
                 65592 327734 13 24 0 19 196663 18 23 131320 25 327745
                 33 141 23 140 262205 13 142 141 327745 33 144 23
                 143 262205 13 145 144 327745 33 146 23 143 262205 13
                 147 146 327745 33 148 23 140 262205 13 149 148 327813
                 13 150 147 149 327811 13 151 145 150 327745 34 153
                 23 82 262205 6 154 153 327813 6 155 152 154 327811
                 6 157 155 156 327745 34 158 23 82 262205 6 159
                 158 327813 6 160 157 159 393228 6 161 1 29 160
                 327822 13 162 151 161 327809 13 163 142 162 131326 163
                 65592 327734 6 28 0 26 196663 18 27 131320 29 262203
                 34 166 7 262203 34 169 7 262203 34 172 7 262203
                 34 179 7 262203 34 194 7 327745 34 167 27 113
                 262205 6 168 167 196670 166 168 327745 34 170 27 123
                 262205 6 171 170 196670 169 171 327745 34 174 27 173
                 262205 6 175 174 327745 34 176 27 173 262205 6 177
                 176 327813 6 178 175 177 196670 172 178 262205 6 180
                 166 327813 6 181 76 180 262205 6 182 166 262205 6
                 183 172 262205 6 184 172 327811 6 185 94 184 262205
                 6 186 166 262205 6 187 166 327813 6 188 186 187
                 327813 6 189 185 188 327809 6 190 183 189 393228 6
                 191 1 31 190 327809 6 192 182 191 327816 6 193
                 181 192 196670 179 193 262205 6 195 169 327813 6 196
                 76 195 262205 6 197 169 262205 6 198 172 262205 6
                 199 172 327811 6 200 94 199 262205 6 201 169 262205
                 6 202 169 327813 6 203 201 202 327813 6 204 200
                 203 327809 6 205 198 204 393228 6 206 1 31 205
                 327809 6 207 197 206 327816 6 208 196 207 196670 194
                 208 262205 6 209 179 262205 6 210 194 327813 6 211
                 209 210 131326 211 65592 327734 6 31 0 26 196663 18
                 30 131320 32 262203 34 214 7 262203 34 220 7 327745
                 34 215 30 173 262205 6 216 215 327745 34 217 30
                 173 262205 6 218 217 327813 6 219 216 218 196670 214
                 219 327745 34 222 30 221 262205 6 223 222 262205 6
                 224 214 327813 6 225 223 224 327745 34 226 30 221
                 262205 6 227 226 327811 6 228 225 227 327745 34 229
                 30 221 262205 6 230 229 327813 6 231 228 230 327809
                 6 232 231 94 196670 220 232 262205 6 233 214 262205
                 6 235 220 327813 6 236 234 235 262205 6 237 220
                 327813 6 238 236 237 327816 6 239 233 238 131326 239
                 65592 327734 13 49 0 35 196663 33 36 196663 33 37
                 196663 33 38 196663 33 39 196663 33 40 196663 34 41
                 196663 34 42 196663 33 43 196663 33 44 196663 34 45
                 196663 33 46 196663 33 47 196663 34 48 131320 50 262203
                 34 242 7 262203 33 256 7 262203 34 267 7 262203
                 34 271 7 262203 34 277 7 262203 34 282 7 262203
                 34 287 7 262203 34 292 7 262203 18 297 7 262203
                 33 312 7 262203 18 313 7 262203 34 316 7 262203
                 18 317 7 262203 34 320 7 262203 18 321 7 262203
                 33 324 7 262203 18 328 7 262203 33 332 7 262203
                 33 345 7 262203 33 356 7 262205 13 243 38 262205
                 13 244 39 327828 6 245 243 244 196670 242 245 262205
                 6 246 242 327864 248 249 246 247 196855 251 0 262394
                 249 250 251 131320 250 262205 13 252 38 262271 13 253
                 252 196670 38 253 262205 6 254 242 262271 6 255 254
                 196670 242 255 131321 251 131320 251 262205 13 257 37 262205
                 13 258 38 458764 13 259 1 71 257 258 393228 13
                 260 1 69 259 262271 13 261 260 196670 256 261 327745
                 34 263 256 102 262205 6 264 263 327813 6 265 264
                 262 327745 34 266 256 102 196670 266 265 262205 6 268
                 242 524300 6 270 1 43 268 269 94 196670 267 270
                 262205 13 272 38 262205 13 273 37 327828 6 274 272
                 273 393228 6 275 1 4 274 524300 6 276 1 43
                 275 269 94 196670 271 276 262205 13 278 38 262205 13
                 279 40 327828 6 280 278 279 524300 6 281 1 43
                 280 247 94 196670 277 281 262205 13 283 39 262205 13
                 284 40 327828 6 285 283 284 524300 6 286 1 43
                 285 247 94 196670 282 286 262205 13 288 37 262205 13
                 289 40 327828 6 290 288 289 524300 6 291 1 43
                 290 247 94 196670 287 291 262205 13 293 37 262205 13
                 294 39 327828 6 295 293 294 524300 6 296 1 43
                 295 247 94 196670 292 296 262205 6 298 267 262205 6
                 299 271 262205 6 300 277 262205 6 301 282 262205 6
                 302 287 262205 6 303 292 262205 6 304 41 262205 6
                 305 42 262205 13 306 43 262205 13 307 44 262205 6
                 308 45 262205 13 309 46 262205 13 310 47 1048656 17
                 311 298 299 300 301 302 303 304 305 306 307 308
                 309 310 196670 297 311 262205 17 314 297 196670 313 314
                 327737 13 315 24 313 196670 312 315 262205 17 318 297
                 196670 317 318 327737 6 319 28 317 196670 316 319 262205
                 17 322 297 196670 321 322 327737 6 323 31 321 196670
                 320 323 262205 13 325 312 393296 13 326 94 94 94
                 327811 13 327 326 325 262205 17 329 297 196670 328 329
                 327737 13 330 21 328 327813 13 331 327 330 196670 324
                 331 262205 13 333 312 262205 6 334 316 327822 13 335
                 333 334 262205 6 336 320 327822 13 337 335 336 262205
                 6 339 267 327813 6 340 338 339 262205 6 341 271
                 327813 6 342 340 341 393296 13 343 342 342 342 327816
                 13 344 337 343 196670 332 344 262205 6 346 267 262205
                 13 347 36 327822 13 348 347 346 262205 13 349 324
                 262205 13 350 332 327809 13 351 349 350 327813 13 352
                 348 351 196670 345 352 262205 6 353 48 262205 13 354
                 345 327822 13 355 354 353 196670 345 355 327745 360 361
                 359 123 262205 7 362 361 524367 13 363 362 362 0
                 1 2 196670 356 363 262205 13 364 356 262205 13 365
                 345 327809 13 366 365 364 196670 345 366 262205 13 367
                 345 131326 367 65592
              }
              NumSpecializationConstants 0
            }
            pipelineStates 6
            vsg::GraphicsPipelineState id=21 vsg::ColorBlendState
            {
              userObjects 0
              logicOp 3
              logicOpEnable 0
              attachments 1
              blendEnable 0
              srcColorBlendFactor 0
              dstColorBlendFactor 0
              colorBlendOp 0
              srcAlphaBlendFactor 0
              dstAlphaBlendFactor 0
              alphaBlendOp 0
              colorWriteMask 15
              blendConstants 0 0 0 0
            }
            vsg::GraphicsPipelineState id=22 vsg::DepthStencilState
            {
              userObjects 0
              depthTestEnable 1
              depthWriteEnable 1
              depthCompareOp 4
              depthBoundsTestEnable 0
              stencilTestEnable 0
              front.failOp 0
              front.passOp 0
              front.depthFailOp 0
              front.compareOp 0
              front.compareMask 0
              front.writeMask 0
              front.reference 0
              back.failOp 0
              back.passOp 0
              back.depthFailOp 0
              back.compareOp 0
              back.compareMask 0
              back.writeMask 0
              back.reference 0
              minDepthBounds 0
              maxDepthBounds 1
            }
            vsg::GraphicsPipelineState id=23 vsg::InputAssemblyState
            {
              userObjects 0
              topology 3
              primitiveRestartEnable 0
            }
            vsg::GraphicsPipelineState id=24 vsg::MultisampleState
            {
              userObjects 0
              rasterizationSamples 1
              sampleShadingEnable 0
              minSampleShading 0
              sampleMasks 0
              alphaToCoverageEnable 0
              alphaToOneEnable 0
            }
            vsg::GraphicsPipelineState id=25 vsg::RasterizationState
            {
              userObjects 0
              depthClampEnable 0
              rasterizerDiscardEnable 0
              polygonMode 0
              cullMode 0
              frontFace 0
              depthBiasEnable 0
              depthBiasConstantFactor 1
              depthBiasClamp 0
              depthBiasSlopeFactor 1
              lineWidth 1
            }
            vsg::GraphicsPipelineState id=26 vsg::VertexInputState
            {
              userObjects 0
              NumBindings 4
              binding 0
              stride 12
              inputRate 0
              binding 1
              stride 12
              inputRate 0
              binding 2
              stride 8
              inputRate 0
              binding 3
              stride 0
              inputRate 1
              NumAttributes 4
              location 0
              binding 0
              format 106
              offset 0
              location 1
              binding 1
              format 106
              offset 0
              location 2
              binding 2
              format 103
              offset 0
              location 3
              binding 3
              format 109
              offset 0
            }
            subpass 0
          }
        }
        vsg::StateCommand id=27 vsg::BindDescriptorSet
        {
          userObjects 0
          slot 1
          pipelineBindPoint 0
          layout id=13
          firstSet 0
          descriptorSet id=28 vsg::DescriptorSet
          {
            userObjects 0
            setLayout id=14
            descriptors 1
            vsg::Descriptor id=29 vsg::DescriptorBuffer
            {
              userObjects 0
              dstBinding 10
              dstArrayElement 0
              dataList 1
              data id=30 vsg::PbrMaterialValue
              {
                userObjects 0
                properties 0 0 0 1 1 1 0 -1 0
                value                baseColorFactor 1 1 1 1
                emissiveFactor 0 0 0 1
                diffuseFactor 0.9 0.9 0.9 1
                specularFactor 0.2 0.2 0.2 1
                metallicFactor 1
                roughnessFactor 1
                alphaMask 1
                alphaMaskCutoff 0.5

              }
            }
          }
          dynamicOffsets 0
        }
        vsg::StateCommand id=31 vsg::BindViewDescriptorSets
        {
          userObjects 0
          slot 2
          pipelineBindPoint 0
          layout id=13
          firstSet 1
        }
        prototypeArrayState id=0
      }
      matrix 0.025 0 0 0 0 -1.19209e-08 -0.1 0 0 0.025 -2.98023e-09 0
       0 0 0 1
      subgraphRequiresLocalFrustum 1
    }
    vsg::Node id=32 vsg::SpotLight
    {
      name "Spot"
      color 0.18457 0 10
      intensity 1
      position 0 0 -1
      direction 0 0 -1
      innerAngle 0.0741765
      outerAngle 0.0872665
    }
  }
  matrix 1 0 0 0 0 0 1 0 0 -1 0 0
   0 0 0 1
  subgraphRequiresLocalFrustum 1
}
