#vsga 0.3.1
Root id=1 vsg::MatrixTransform
{
  NumUserObjects 0
  children 1
  vsg::Node id=2 vsg::Group
  {
    NumUserObjects 0
    children 2
    vsg::Node id=3 vsg::MatrixTransform
    {
      NumUserObjects 0
      children 1
      vsg::Node id=4 vsg::StateGroup
      {
        NumUserObjects 0
        children 1
        vsg::Node id=5 vsg::VertexIndexDraw
        {
          NumUserObjects 0
          firstBinding 0
          NumArrays 4
          Array id=6 vsg::vec3Array
          {
            NumUserObjects 0
            Layout 0 12 0 1 1 1 0 -1
            Size 40
            Storage id=0
            Data 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1
             1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1
             -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 1
             0.611511 1 -0.611511 0.611511 1 -0.611511 0.611511 1 -0.611511 1 0.611511 -1
             1 0.611511 -1 1 0.611511 -1 1 0.611511 -1 0.611511 1 0.611511
             0.611511 1 0.611511 0.611511 1 0.611511 1 0.611511 1 1 0.611511 1
             1 0.611511 1 1 0.611511 1 -0.611511 1 -0.611511 -0.611511 1 -0.611511
             -0.611511 1 -0.611511 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511 -1
             -1 0.611511 -1 -0.611511 1 0.611511 -0.611511 1 0.611511 -0.611511 1 0.611511
             -1 0.611511 1 -1 0.611511 1 -1 0.611511 1 -1 0.611511 1
          }
          Array id=7 vsg::vec3Array
          {
            NumUserObjects 0
            Layout 0 12 0 1 1 1 0 -1
            Size 40
            Storage id=0
            Data 0 -1 -0 0 0 -1 1 0 -0 0 -1 -0
             0 0 1 1 0 -0 -1 0 -0 0 -1 -0
             0 0 -1 -1 0 -0 0 -1 -0 0 0 1
             0 0.707107 -0.707107 0 1 -0 0.707107 0.707107 -0 0 0 -1
             0 0.707107 -0.707107 0.707107 0.707107 -0 1 0 -0 0 0.707107 0.707107
             0 1 -0 0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
             0.707107 0.707107 -0 1 0 -0 -0.707107 0.707107 -0 0 0.707107 -0.707107
             0 1 -0 -1 0 -0 -0.707107 0.707107 -0 0 0 -1
             0 0.707107 -0.707107 -0.707107 0.707107 -0 0 0.707107 0.707107 0 1 -0
             -1 0 -0 -0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
          }
          Array id=8 vsg::vec2Array
          {
            NumUserObjects 0
            Layout 0 8 0 1 1 1 0 -1
            Size 40
            Storage id=0
            Data 0.375 0.5 0.375 0.5 0.375 0.5 0.375 0.25 0.375 0.25 0.375 0.25
             0.375 0.75 0.125 0.5 0.375 0.75 0.375 1 0.125 0.25 0.375 0
             0.673561 0.451439 0.673561 0.451439 0.673561 0.451439 0.576439 0.5 0.625 0.5 0.576439 0.5
             0.576439 0.5 0.673561 0.298561 0.673561 0.298561 0.673561 0.298561 0.576439 0.25 0.625 0.25
             0.576439 0.25 0.576439 0.25 0.826439 0.451439 0.826439 0.451439 0.826439 0.451439 0.576439 0.75
             0.875 0.5 0.576439 0.75 0.875 0.5 0.826439 0.298561 0.826439 0.298561 0.826439 0.298561
             0.576439 1 0.875 0.25 0.576439 0 0.875 0.25
          }
          Array id=9 vsg::vec4Value
          {
            NumUserObjects 0
            Layout 0 0 0 1 1 1 0 -1
            Value 1 1 1 1
          }
          Indices id=10 vsg::ushortArray
          {
            NumUserObjects 0
            Layout 0 2 0 1 1 1 0 -1
            Size 60
            Storage id=0
            Data 7 0 3 7 3 10 2 18 25 2 25 5
             4 22 38 4 38 11 9 29 6 9 36 29
             8 31 15 8 15 1 27 12 16 27 16 32
             13 28 35 13 35 20 14 21 24 14 24 17
             19 34 39 19 39 23 33 26 30 33 30 37
          }
          indexCount 60
          instanceCount 1
          firstIndex 0
          vertexOffset 0
          firstInstance 0
        }
        stateCommands 3
        vsg::StateCommand id=11 vsg::BindGraphicsPipeline
        {
          NumUserObjects 0
          slot 0
          pipeline id=12 vsg::GraphicsPipeline
          {
            NumUserObjects 0
            layout id=13 vsg::PipelineLayout
            {
              NumUserObjects 0
              Flags 0
              NumDescriptorSetLayouts 2
              DescriptorSetLayout id=14 vsg::DescriptorSetLayout
              {
                NumUserObjects 0
                NumDescriptorSetLayoutBindings 1
                binding 10
                descriptorType 6
                descriptorCount 1
                stageFlags 16
              }
              DescriptorSetLayout id=15 vsg::ViewDescriptorSetLayout
              {
                NumUserObjects 0
              }
              NumPushConstantRanges 1
              stageFlags 1
              offset 0
              size 128
            }
            stages 2
            vsg::ShaderStage id=16 vsg::ShaderStage
            {
              NumUserObjects 0
              stage 1
              entryPointName "main"
              module id=17 vsg::ShaderModule
              {
                NumUserObjects 0
                Source "#version 450
#extension GL_ARB_separate_shader_objects : enable

#pragma import_defines (VSG_INSTANCE_POSITIONS, VSG_DISPLACEMENT_MAP)

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

#ifdef VSG_DISPLACEMENT_MAP
layout(binding = 6) uniform sampler2D displacementMap;
#endif

layout(location = 0) in vec3 vsg_Vertex;
layout(location = 1) in vec3 vsg_Normal;
layout(location = 2) in vec2 vsg_TexCoord0;
layout(location = 3) in vec4 vsg_Color;

#ifdef VSG_INSTANCE_POSITIONS
layout(location = 4) in vec3 vsg_position;
#endif

layout(location = 0) out vec3 eyePos;
layout(location = 1) out vec3 normalDir;
layout(location = 2) out vec4 vertexColor;
layout(location = 3) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    vec4 vertex = vec4(vsg_Vertex, 1.0);
    vec4 normal = vec4(vsg_Normal, 0.0);

#ifdef VSG_DISPLACEMENT_MAP
    // TODO need to pass as as uniform or per instance attributes
    vec3 scale = vec3(1.0, 1.0, 1.0);

    vertex.xyz = vertex.xyz + vsg_Normal * (texture(displacementMap, vsg_TexCoord0.st).s * scale.z);

    float s_delta = 0.01;
    float width = 0.0;

    float s_left = max(vsg_TexCoord0.s - s_delta, 0.0);
    float s_right = min(vsg_TexCoord0.s + s_delta, 1.0);
    float t_center = vsg_TexCoord0.t;
    float delta_left_right = (s_right - s_left) * scale.x;
    float dz_left_right = (texture(displacementMap, vec2(s_right, t_center)).s - texture(displacementMap, vec2(s_left, t_center)).s) * scale.z;

    // TODO need to handle different origins of displacementMap vs diffuseMap etc,
    float t_delta = s_delta;
    float t_bottom = max(vsg_TexCoord0.t - t_delta, 0.0);
    float t_top = min(vsg_TexCoord0.t + t_delta, 1.0);
    float s_center = vsg_TexCoord0.s;
    float delta_bottom_top = (t_top - t_bottom) * scale.y;
    float dz_bottom_top = (texture(displacementMap, vec2(s_center, t_top)).s - texture(displacementMap, vec2(s_center, t_bottom)).s) * scale.z;

    vec3 dx = normalize(vec3(delta_left_right, 0.0, dz_left_right));
    vec3 dy = normalize(vec3(0.0, delta_bottom_top, -dz_bottom_top));
    vec3 dz = normalize(cross(dx, dy));

    normal.xyz = normalize(dx * vsg_Normal.x + dy * vsg_Normal.y + dz * vsg_Normal.z);
#endif


#ifdef VSG_INSTANCE_POSITIONS
   vertex.xyz = vertex.xyz + vsg_position;
#endif

    gl_Position = (pc.projection * pc.modelView) * vertex;

    eyePos = (pc.modelView * vertex).xyz;

    vec4 lpos = /*vsg_LightSource.position*/ vec4(0.0, 0.0, 1.0, 0.0);
    viewDir = - (pc.modelView * vertex).xyz;
    normalDir = (pc.modelView * normal).xyz;

    vertexColor = vsg_Color;
    texCoord0 = vsg_TexCoord0;
}
"
                hints id=18 vsg::ShaderCompileSettings
                {
                  vulkanVersion 4194304
                  clientInputVersion 100
                  language 0
                  defaultVersion 450
                  target 65536
                  forwardCompatible 0
                  defines 3
                  element "VSG_TWO_SIDED_LIGHTING"
                  element "VSG_WORKFLOW_SPECGLOSS"
                  element "VSG_VIEW_LIGHT_DATA"
                }
                SPIRVSize 583
                SPIRV 119734787 65536 524298 79 0 131089 1 393227 1 1280527431 1685353262 808793134
                 0 196622 0 1 983055 0 4 1852399981 0 12 20 29
                 48 56 63 69 71 75 77 196611 2 450 589828 1096764487
                 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 262149
                 9 1953654134 30821 327685 12 1600615286 1953654102 30821 262149 19 1836216174 27745
                 327685 20 1600615286 1836216142 27745 393221 27 1348430951 1700164197 2019914866 0 393222
                 27 0 1348430951 1953067887 7237481 196613 29 0 393221 33 1752397136 1936617283
                 1953390964 115 393222 33 0 1785688688 1769235301 28271 393222 33 1 1701080941
                 1701402220 119 196613 35 25456 262149 48 1348827493 29551 262149 54 1936683116
                 0 262149 56 2003134838 7498052 327685 63 1836216174 1766091873 114 327685 69
                 1953654134 1866692709 7499628 327685 71 1600615286 1869377347 114 327685 75 1131963764 1685221231
                 48 393221 77 1600615286 1131963732 1685221231 48 262215 12 30 0 262215
                 20 30 1 327752 27 0 11 0 196679 27 2 262216
                 33 0 5 327752 33 0 35 0 327752 33 0 7
                 16 262216 33 1 5 327752 33 1 35 64 327752 33
                 1 7 16 196679 33 2 262215 48 30 0 262215 56
                 30 5 262215 63 30 1 262215 69 30 2 262215 71
                 30 3 262215 75 30 3 262215 77 30 2 131091 2
                 196641 3 2 196630 6 32 262167 7 6 4 262176 8
                 7 7 262167 10 6 3 262176 11 1 10 262203 11
                 12 1 262187 6 14 1065353216 262203 11 20 1 262187 6
                 22 0 196638 27 7 262176 28 3 27 262203 28 29
                 3 262165 30 32 1 262187 30 31 0 262168 32 7
                 4 262174 33 32 32 262176 34 9 33 262203 34 35
                 9 262176 36 9 32 262187 30 39 1 262176 45 3
                 7 262176 47 3 10 262203 47 48 3 458796 7 55
                 22 22 14 22 262203 47 56 3 262203 47 63 3
                 262203 45 69 3 262176 70 1 7 262203 70 71 1
                 262167 73 6 2 262176 74 3 73 262203 74 75 3
                 262176 76 1 73 262203 76 77 1 327734 2 4 0
                 3 131320 5 262203 8 9 7 262203 8 19 7 262203
                 8 54 7 262205 10 13 12 327761 6 15 13 0
                 327761 6 16 13 1 327761 6 17 13 2 458832 7
                 18 15 16 17 14 196670 9 18 262205 10 21 20
                 327761 6 23 21 0 327761 6 24 21 1 327761 6
                 25 21 2 458832 7 26 23 24 25 22 196670 19
                 26 327745 36 37 35 31 262205 32 38 37 327745 36
                 40 35 39 262205 32 41 40 327826 32 42 38 41
                 262205 7 43 9 327825 7 44 42 43 327745 45 46
                 29 31 196670 46 44 327745 36 49 35 39 262205 32
                 50 49 262205 7 51 9 327825 7 52 50 51 524367
                 10 53 52 52 0 1 2 196670 48 53 196670 54
                 55 327745 36 57 35 39 262205 32 58 57 262205 7
                 59 9 327825 7 60 58 59 524367 10 61 60 60
                 0 1 2 262271 10 62 61 196670 56 62 327745 36
                 64 35 39 262205 32 65 64 262205 7 66 19 327825
                 7 67 65 66 524367 10 68 67 67 0 1 2
                 196670 63 68 262205 7 72 71 196670 69 72 262205 73
                 78 77 196670 75 78 65789 65592
              }
              NumSpecializationConstants 0
            }
            vsg::ShaderStage id=19 vsg::ShaderStage
            {
              NumUserObjects 0
              stage 16
              entryPointName "main"
              module id=20 vsg::ShaderModule
              {
                NumUserObjects 0
                Source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_GREYSACLE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_METALLROUGHNESS_MAP, VSG_SPECULAR_MAP, VSG_TWO_SIDED_LIGHTING, VSG_WORKFLOW_SPECGLOSS, VSG_VIEW_LIGHT_DATA)

const float PI = 3.14159265359;
const float RECIPROCAL_PI = 0.31830988618;
const float RECIPROCAL_PI2 = 0.15915494;
const float EPSILON = 1e-6;
const float c_MinRoughness = 0.04;

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_METALLROUGHNESS_MAP
layout(binding = 1) uniform sampler2D mrMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(binding = 10) uniform PbrData
{
    vec4 baseColorFactor;
    vec4 emissiveFactor;
    vec4 diffuseFactor;
    vec4 specularFactor;
    float metallicFactor;
    float roughnessFactor;
    float alphaMask;
    float alphaMaskCutoff;
} pbr;

layout(set = 1, binding = 0) uniform LightData
{
    vec4 values[64];
} lightData;

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;

layout(location = 0) out vec4 outColor;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float VdotL;                  // cos angle between view direction and light direction
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};


vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

vec4 LINEARtoSRGB(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(1.0 / 2.2));
    return vec4(linOut, srgbIn.w);
}

float rcp(const in float value)
{
    return 1.0 / value;
}

float pow5(const in float value)
{
    return value * value * value * value * value;
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 BRDF_Diffuse_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI;
}

vec3 BRDF_Diffuse_Custom_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI * pow(pbrInputs.NdotV, 0.5 + 0.3 * pbrInputs.perceptualRoughness);
}

// [Gotanda 2012, \"Beyond a Simple Physically Based Blinn-Phong Model in Real-Time\"]
vec3 BRDF_Diffuse_OrenNayar(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float s = a;// / ( 1.29 + 0.5 * a );
    float s2 = s * s;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = pbrInputs.VdotL - pbrInputs.NdotV * pbrInputs.NdotL;
    float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
    float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? 1.0 / max(pbrInputs.NdotL, pbrInputs.NdotV) : 1 );
    return pbrInputs.diffuseColor / PI * ( C1 + C2 ) * ( 1 + pbrInputs.perceptualRoughness * 0.5 );
}

// [Gotanda 2014, \"Designing Reflectance Models for New Consoles\"]
vec3 BRDF_Diffuse_Gotanda(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float a2 = a * a;
    float F0 = 0.04;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = VoL - pbrInputs.NdotV * pbrInputs.NdotL;
    float a2_13 = a2 + 1.36053;
    float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - pbrInputs.NdotV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - pbrInputs.NdotV, 1 + rcp(39*a2*a2+1) ) + 1 );
    //float Fr = ( 1 - 0.36 * a ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( -2.5 * Roughness * ( 1 - NoV ) + 1 );
    float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - pow5( 1 - pbrInputs.NdotL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (pbrInputs.NdotL - 1) ) * pbrInputs.NdotL;
    float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * pbrInputs.NdotV) ) ) * ( 1 - pow( 1 - pbrInputs.NdotL, ( 1 - 0.3726732 * pbrInputs.NdotV * pbrInputs.NdotV ) / ( 0.188566 + 0.38841 * pbrInputs.NdotV ) ) );
    float Bp = Cosri < 0 ? 1.4 * pbrInputs.NdotV * pbrInputs.NdotL * Cosri : Cosri;
    float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
    return pbrInputs.diffuseColor * RECIPROCAL_PI * Lr;
}

vec3 BRDF_Diffuse_Burley(PBRInfo pbrInputs)
{
    float energyBias = mix(pbrInputs.perceptualRoughness, 0.0, 0.5);
    float energyFactor = mix(pbrInputs.perceptualRoughness, 1.0, 1.0 / 1.51);
    float fd90 = energyBias + 2.0 * pbrInputs.VdotH * pbrInputs.VdotH * pbrInputs.perceptualRoughness;
    float f0 = 1.0;
    float lightScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotL, 5.0);
    float viewScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotV, 5.0);

    return pbrInputs.diffuseColor * lightScatter * viewScatter * energyFactor;
}

vec3 BRDF_Diffuse_Disney(PBRInfo pbrInputs)
{
	float Fd90 = 0.5 + 2.0 * pbrInputs.perceptualRoughness * pbrInputs.VdotH * pbrInputs.VdotH;
    vec3 f0 = vec3(0.1);
	vec3 invF0 = vec3(1.0, 1.0, 1.0) - f0;
	float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotV, 5.0 ))) * dim;
	return pbrInputs.diffuseColor * result;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
    //return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance90*pbrInputs.reflectance0) * exp2((-5.55473 * pbrInputs.VdotH - 6.98316) * pbrInputs.VdotH);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
    float NdotL = pbrInputs.NdotL;
    float NdotV = pbrInputs.NdotV;
    float r = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;

    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));
    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));
    return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
    return roughnessSq / (PI * f * f);
}

vec3 BRDF(vec3 u_LightColor, vec3 v, vec3 n, vec3 l, vec3 h, float perceptualRoughness, float metallic, vec3 specularEnvironmentR0, vec3 specularEnvironmentR90, float alphaRoughness, vec3 diffuseColor, vec3 specularColor, float ao)
{
    float unclmapped_NdotL = dot(n, l);

    #ifdef VSG_TWO_SIDED_LIGHTING
    if (unclmapped_NdotL < 0.0)
    {
        n = -n;
        unclmapped_NdotL = -unclmapped_NdotL;
    }
    #endif

    vec3 reflection = -normalize(reflect(v, n));
    reflection.y *= -1.0f;

    float NdotL = clamp(unclmapped_NdotL, 0.001, 1.0);
    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    float NdotH = clamp(dot(n, h), 0.0, 1.0);
    float LdotH = clamp(dot(l, h), 0.0, 1.0);
    float VdotH = clamp(dot(v, h), 0.0, 1.0);
    float VdotL = clamp(dot(v, l), 0.0, 1.0);

    PBRInfo pbrInputs = PBRInfo(NdotL,
                                NdotV,
                                NdotH,
                                LdotH,
                                VdotH,
                                VdotL,
                                perceptualRoughness,
                                metallic,
                                specularEnvironmentR0,
                                specularEnvironmentR90,
                                alphaRoughness,
                                diffuseColor,
                                specularColor);

    // Calculate the shading terms for the microfacet specular shading model
    vec3 F = specularReflection(pbrInputs);
    float G = geometricOcclusion(pbrInputs);
    float D = microfacetDistribution(pbrInputs);

    // Calculation of analytical lighting contribution
    vec3 diffuseContrib = (1.0 - F) * BRDF_Diffuse_Disney(pbrInputs);
    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

    color *= ao;

#ifdef VSG_EMISSIVE_MAP
    vec3 emissive = SRGBtoLINEAR(texture(emissiveMap, texCoord0)).rgb * pbr.emissiveFactor.rgb;
#else
    vec3 emissive = pbr.emissiveFactor.rgb;
#endif
    color += emissive;

    return color;
}

float convertMetallic(vec3 diffuse, vec3 specular, float maxSpecular)
{
    float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
    float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);

    if (perceivedSpecular < c_MinRoughness)
    {
        return 0.0;
    }

    float a = c_MinRoughness;
    float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - c_MinRoughness) + perceivedSpecular - 2.0 * c_MinRoughness;
    float c = c_MinRoughness - perceivedSpecular;
    float D = max(b * b - 4.0 * a * c, 0.0);
    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}

void main()
{
    float perceptualRoughness = 0.0;
    float metallic;
    vec3 diffuseColor;
    vec4 baseColor;

    float ambientOcclusion = 1.0;

    vec3 f0 = vec3(0.04);

#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSACLE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s * pbr.baseColorFactor;
        baseColor = vertexColor * vec4(v, v, v, 1.0);
    #else
        baseColor = vertexColor * SRGBtoLINEAR(texture(diffuseMap, texCoord0)) * pbr.baseColorFactor;
    #endif
#else
    baseColor = vertexColor * pbr.baseColorFactor;
#endif

    if (pbr.alphaMask == 1.0f)
    {
        if (baseColor.a < pbr.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_WORKFLOW_SPECGLOSS
    #ifdef VSG_DIFFUSE_MAP
        vec4 diffuse = SRGBtoLINEAR(texture(diffuseMap, texCoord0));
    #else
        vec4 diffuse = vec4(1.0);
    #endif

    #ifdef VSG_SPECULAR_MAP
        vec3 specular = SRGBtoLINEAR(texture(specularMap, texCoord0)).rgb;
        perceptualRoughness = 1.0 - texture(specularMap, texCoord0).a;
    #else
        vec3 specular = vec3(0.0);
        perceptualRoughness = 0.0;
    #endif

        float maxSpecular = max(max(specular.r, specular.g), specular.b);

        // Convert metallic value from specular glossiness inputs
        metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

        const float epsilon = 1e-6;
        vec3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - c_MinRoughness) / max(1 - metallic, epsilon)) * pbr.diffuseFactor.rgb;
        vec3 baseColorSpecularPart = specular - (vec3(c_MinRoughness) * (1 - metallic) * (1 / max(metallic, epsilon))) * pbr.specularFactor.rgb;
        baseColor = vec4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);
#else
        perceptualRoughness = pbr.roughnessFactor;
        metallic = pbr.metallicFactor;

    #ifdef VSG_METALLROUGHNESS_MAP
        vec4 mrSample = texture(mrMap, texCoord0);
        perceptualRoughness = mrSample.g * perceptualRoughness;
        metallic = mrSample.b * metallic;
    #endif
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion = texture(aoMap, texCoord0).r;
#endif

    diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;

    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();
    vec3 v = normalize(viewDir);    // Vector from surface point to camera

    float shininess = 100.0f;

    vec3 color = vec3(0.0, 0.0, 0.0);

    vec4 lightNums = lightData.values[0];
    int numAmbientLights = int(lightNums[0]);
    int numDirectionalLights = int(lightNums[1]);
    int numPointLights = int(lightNums[2]);
    int numSpotLights = int(lightNums[3]);
    int index = 1;
    if (numAmbientLights>0)
    {
        // ambient lights
        for(int i = 0; i<numAmbientLights; ++i)
        {
            vec4 ambient_color = lightData.values[index++];
            color += (baseColor.rgb * ambient_color.rgb) * (ambient_color.a * ambientOcclusion);
        }
    }

    if (numDirectionalLights>0)
    {
        // directional lights
        for(int i = 0; i<numDirectionalLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 direction = -lightData.values[index++].xyz;

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numPointLights>0)
    {
        // point light
        for(int i = 0; i<numPointLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec3 position = lightData.values[index++].xyz;
            vec3 delta = position - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);

            vec3 l = direction;         // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = lightColor.a / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    if (numSpotLights>0)
    {
        // spot light
        for(int i = 0; i<numSpotLights; ++i)
        {
            vec4 lightColor = lightData.values[index++];
            vec4 position_cosInnerAngle = lightData.values[index++];
            vec4 lightDirection_cosOuterAngle = lightData.values[index++];

            vec3 delta = position_cosInnerAngle.xyz - eyePos;
            float distance2 = delta.x * delta.x + delta.y * delta.y + delta.z * delta.z;
            vec3 direction = delta / sqrt(distance2);
            float dot_lightdirection = -dot(lightDirection_cosOuterAngle.xyz, direction);

            vec3 l = direction;        // Vector from surface point to light
            vec3 h = normalize(l+v);    // Half vector between both l and v
            float scale = (lightColor.a * smoothstep(lightDirection_cosOuterAngle.w, position_cosInnerAngle.w, dot_lightdirection)) / distance2;

            color.rgb += BRDF(lightColor.rgb * scale, v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
        }
    }

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
}
"
                hints id=18
                SPIRVSize 6068
                SPIRV 119734787 65536 524298 964 0 131089 1 393227 1 1280527431 1685353262 808793134
                 0 196622 0 1 720911 4 4 1852399981 0 75 471 600
                 759 949 963 196624 4 7 196611 2 450 589828 1096764487 1935622738
                 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 458757 11
                 1162758476 1869894209 1111970387 879130152 59 262149 10 1650946675 28233 327685 15 1316250983
                 1634562671 10348 262149 17 1230127696 7300718 327686 17 0 1953457230 76 327686
                 17 1 1953457230 86 327686 17 2 1953457230 72 327686 17 3
                 1953457228 72 327686 17 4 1953457238 72 327686 17 5 1953457238 76
                 524294 17 6 1668441456 1970565221 1867672673 1852335989 7566181 393222 17 7 1635018093
                 1936027244 115 458758 17 8 1818649970 1635017573 811950958 0 458758 17 9
                 1818649970 1635017573 962945902 48 458758 17 10 1752198241 1970229857 1701734503 29555 458758
                 17 11 1717987684 1130722165 1919904879 0 458758 17 12 1667592307 1918987381 1869377347
                 114 1441797 21 1178882626 1718174815 1702065510 1936278623 679044462 1970435187 1345156195 1850298946 1714253670
                 828779825 758212141 1714237798 828779825 758212141 1982673254 1982673766 1714238310 1719020849 1719020851 3879219 327685
                 20 1232233072 1953853550 115 1441797 24 1667592307 1918987381 1818649938 1769235301 1932029551 1668641396
                 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941
                 862352941 15153 327685 23 1232233072 1953853550 115 1441797 28 1836016999 1769108581 1667452771
                 1769174380 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849
                 1719020851 828779827 862352941 862352941 15153 327685 27 1232233072 1953853550 115 1507333 31
                 1919117677 1667327599 1766093925 1769108595 1769239906 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798
                 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685 30 1232233072
                 1953853550 115 1048581 49 1178882626 862352936 862352955 862352955 862352955 862352955 993093179 1983590758
                 1983591270 1715155814 1719024433 1719024435 828783411 59 393221 36 1766612853 1131702375 1919904879 0
                 196613 37 118 196613 38 110 196613 39 108 196613 40 104
                 458757 41 1668441456 1970565221 1867672673 1852335989 7566181 327685 42 1635018093 1667853420 0
                 524293 43 1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 44 1667592307 1918987381
                 1769369157 1835954034 1383362149 12345 393221 45 1752198241 1970229857 1701734503 29555 393221 46
                 1717987684 1130722165 1919904879 0 393221 47 1667592307 1918987381 1869377347 114 196613 48
                 28513 589829 55 1986948963 1299477093 1818326117 677603692 993224310 993224310 3879270 262149 52
                 1717987684 6648693 327685 53 1667592307 1918987381 0 327685 54 1400398189 1969448304 7496044
                 262149 57 1332636012 29813 327685 75 1836216174 1766091873 114 262149 80 809067590
                 0 196613 96 12390 262149 99 1182166633 48 196613 104 7170404 262149
                 116 1970496882 29804 262149 172 1953457230 76 262149 175 1953457230 86 196613
                 178 114 393221 185 1702130785 1952544110 1282305897 0 393221 200 1702130785 1952544110
                 1450078057 0 327685 220 1735749490 1936027240 7426931 196613 226 102 458757 248
                 1818455669 1886413165 1314874469 1282699108 0 327685 262 1818649970 1769235301 28271 262149 273
                 1953457230 76 262149 277 1953457230 86 262149 283 1953457230 72 262149 288
                 1953457228 72 262149 293 1953457238 72 262149 298 1953457238 76 327685 303
                 1232233072 1953853550 115 196613 318 70 262149 319 1634886000 109 196613 322
                 71 262149 323 1634886000 109 196613 326 68 262149 327 1634886000 109
                 393221 330 1717987684 1130722165 1920233071 25193 262149 334 1634886000 109 327685 338
                 1667592307 1953394499 6449522 262149 351 1869377379 114 327685 362 1936289125 1702259059 0
                 262149 363 1148346960 6386785 458758 363 0 1702060386 1869377347 1667319410 7499636 458758
                 363 1 1936289125 1702259059 1952670022 29295 458758 363 2 1717987684 1181053813 1869898593
                 114 458758 363 3 1667592307 1918987381 1952670022 29295 458758 363 4 1635018093
                 1667853420 1952670022 29295 458758 363 5 1735749490 1936027240 1667319411 7499636 393222 363
                 6 1752198241 1935756641 107 458758 363 7 1752198241 1935756641 1953842027 6710895 196613
                 365 7496304 458757 376 1668441456 1702259045 1718174820 1702065510 0 458757 401 1668441456
                 1702259045 1701860196 1634497891 114 196613 429 97 196613 430 98 196613 441
                 99 196613 444 68 458757 465 1668441456 1970565221 1867672673 1852335989 7566181 458757
                 466 1768058209 1333030501 1970037603 1852795251 0 196613 467 12390 327685 469 1702060386
                 1869377347 114 327685 471 1953654134 1866692709 7499628 262149 491 1717987684 6648693 327685
                 493 1667592307 1918987381 0 327685 495 1400398189 1969448304 7496044 327685 504 1635018093
                 1667853420 0 262149 505 1634886000 109 262149 508 1634886000 109 262149 510
                 1634886000 109 524293 513 1702060386 1869377347 1718174834 1702065510 1953653072 0 524293 529
                 1702060386 1869377347 1701860210 1634497891 1918980210 116 393221 557 1717987684 1130722165 1919904879 0
                 393221 567 1752198241 1970229857 1701734503 29555 393221 571 1667592307 1918987381 1869377347 114
                 327685 578 1818649970 1635017573 6644590 393221 587 1818649970 1635017573 962945902 48 524293
                 592 1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 594 1667592307 1918987381 1769369157
                 1835954034 1383362149 12345 196613 597 110 196613 599 118 262149 600 2003134838
                 7498052 327685 603 1852401779 1936027241 115 262149 605 1869377379 114 327685 606
                 1751607660 1836404340 115 327685 609 1751607628 1952531572 97 327686 609 0 1970037110
                 29541 327685 611 1751607660 1952531572 97 458757 615 1097692526 1701405293 1766618222 1937008743
                 0 524293 619 1148024174 1667592809 1852795252 1766616161 1937008743 0 393221 623 1349350766
                 1953393007 1751607628 29556 393221 627 1399682414 1282699120 1952999273 115 262149 631 1701080681
                 120 196613 636 105 393221 645 1768058209 1601465957 1869377379 114 196613 668
                 105 327685 677 1751607660 1819231092 29295 327685 682 1701996900 1869182051 110 196613
                 689 108 196613 691 104 262149 696 1818321779 101 262149 703 1634886000
                 109 262149 704 1634886000 109 262149 706 1634886000 109 262149 708 1634886000
                 109 262149 710 1634886000 109 262149 712 1634886000 109 262149 714 1634886000
                 109 262149 716 1634886000 109 262149 718 1634886000 109 262149 720 1634886000
                 109 262149 722 1634886000 109 262149 724 1634886000 109 262149 726 1634886000
                 109 196613 737 105 327685 746 1751607660 1819231092 29295 327685 751 1769172848
                 1852795252 0 262149 757 1953260900 97 262149 759 1348827493 29551 327685 762
                 1953720676 1701015137 50 327685 780 1701996900 1869182051 110 196613 786 108 196613
                 788 104 262149 793 1818321779 101 262149 802 1634886000 109 262149 803
                 1634886000 109 262149 805 1634886000 109 262149 807 1634886000 109 262149 809
                 1634886000 109 262149 811 1634886000 109 262149 813 1634886000 109 262149 815
                 1634886000 109 262149 817 1634886000 109 262149 819 1634886000 109 262149 821
                 1634886000 109 262149 823 1634886000 109 262149 825 1634886000 109 196613 836
                 105 327685 845 1751607660 1819231092 29295 524293 850 1769172848 1852795252 1936679775 1701736009
                 1735278962 25964 655365 855 1751607660 1919501428 1769235301 1667198575 1968141167 1098016116 1701603182 0
                 262149 860 1953260900 97 327685 865 1953720676 1701015137 50 327685 883 1701996900
                 1869182051 110 458757 889 1601466212 1751607660 1919509620 1769235301 28271 196613 895 108
                 196613 897 104 262149 902 1818321779 101 262149 918 1634886000 109 262149
                 919 1634886000 109 262149 921 1634886000 109 262149 923 1634886000 109 262149
                 925 1634886000 109 262149 927 1634886000 109 262149 929 1634886000 109 262149
                 931 1634886000 109 262149 933 1634886000 109 262149 935 1634886000 109 262149
                 937 1634886000 109 262149 939 1634886000 109 262149 941 1634886000 109 327685
                 949 1131705711 1919904879 0 262149 957 1634886000 109 327685 963 1131963764 1685221231
                 48 262215 75 30 1 327752 363 0 35 0 327752 363
                 1 35 16 327752 363 2 35 32 327752 363 3 35
                 48 327752 363 4 35 64 327752 363 5 35 68 327752
                 363 6 35 72 327752 363 7 35 76 196679 363 2
                 262215 365 34 0 262215 365 33 10 262215 471 30 2
                 262215 600 30 5 262215 608 6 16 327752 609 0 35
                 0 196679 609 2 262215 611 34 1 262215 611 33 0
                 262215 759 30 0 262215 949 30 0 262215 963 30 3
                 131091 2 196641 3 2 196630 6 32 262167 7 6 4
                 262176 8 7 7 262177 9 7 8 262167 13 6 3
                 196641 14 13 983070 17 6 6 6 6 6 6 6
                 6 13 13 6 13 13 262176 18 7 17 262177 19
                 13 18 262177 26 6 18 262176 33 7 13 262176 34
                 7 6 1048609 35 13 33 33 33 33 33 34 34
                 33 33 34 33 33 34 393249 51 6 33 33 34
                 262187 6 60 1055439407 393260 13 61 60 60 60 262165 64
                 32 0 262187 64 65 3 262176 74 1 13 262203 74
                 75 1 262187 6 81 1056964608 262187 6 82 1073741824 262165 83
                 32 1 262187 83 84 6 262187 83 88 4 262187 6
                 97 1036831949 393260 13 98 97 97 97 262187 6 100 1065353216
                 393260 13 101 100 100 100 262187 64 105 0 262187 64
                 108 1 262187 64 111 2 262187 83 119 0 262187 6
                 123 1084227584 262187 83 129 1 262187 83 139 11 262187 83
                 146 8 262187 83 149 9 262187 6 158 3232874585 262187 6
                 162 1088386572 262187 83 179 10 262187 83 227 2 262187 6
                 240 1078530011 262187 6 253 0 131092 254 262187 6 268 3212836864
                 262187 6 275 981668463 262187 6 344 1082130432 655390 363 7 7
                 7 7 6 6 6 6 262176 364 2 363 262203 364
                 365 2 262176 366 2 7 262187 6 377 1050220167 262187 6
                 384 1058424226 262187 6 392 1038710997 262187 6 424 1025758986 262187 6
                 435 1064682127 262187 6 439 1034147594 393260 13 468 424 424 424
                 262176 470 1 7 262203 470 471 1 262176 476 2 6
                 262187 83 484 7 458796 7 492 100 100 100 100 393260
                 13 494 253 253 253 262187 6 521 897988541 262187 83 538
                 3 262187 6 589 1103626240 262203 74 600 1 262187 6 604
                 1120403456 262187 64 607 64 262172 608 7 607 196638 609 608
                 262176 610 2 609 262203 610 611 2 262176 614 7 83
                 262203 74 759 1 262176 948 3 7 262203 948 949 3
                 262187 6 959 1050868099 262187 6 960 1042479491 262167 961 6 2
                 262176 962 1 961 262203 962 963 1 327734 2 4 0
                 3 131320 5 262203 34 465 7 262203 34 466 7 262203
                 33 467 7 262203 8 469 7 262203 8 491 7 262203
                 33 493 7 262203 34 495 7 262203 34 504 7 262203
                 33 505 7 262203 33 508 7 262203 34 510 7 262203
                 33 513 7 262203 33 529 7 262203 33 557 7 262203
                 34 567 7 262203 33 571 7 262203 34 578 7 262203
                 34 587 7 262203 33 592 7 262203 33 594 7 262203
                 33 597 7 262203 33 599 7 262203 34 603 7 262203
                 33 605 7 262203 8 606 7 262203 614 615 7 262203
                 614 619 7 262203 614 623 7 262203 614 627 7 262203
                 614 631 7 262203 614 636 7 262203 8 645 7 262203
                 614 668 7 262203 8 677 7 262203 33 682 7 262203
                 33 689 7 262203 33 691 7 262203 34 696 7 262203
                 33 703 7 262203 33 704 7 262203 33 706 7 262203
                 33 708 7 262203 33 710 7 262203 34 712 7 262203
                 34 714 7 262203 33 716 7 262203 33 718 7 262203
                 34 720 7 262203 33 722 7 262203 33 724 7 262203
                 34 726 7 262203 614 737 7 262203 8 746 7 262203
                 33 751 7 262203 33 757 7 262203 34 762 7 262203
                 33 780 7 262203 33 786 7 262203 33 788 7 262203
                 34 793 7 262203 33 802 7 262203 33 803 7 262203
                 33 805 7 262203 33 807 7 262203 33 809 7 262203
                 34 811 7 262203 34 813 7 262203 33 815 7 262203
                 33 817 7 262203 34 819 7 262203 33 821 7 262203
                 33 823 7 262203 34 825 7 262203 614 836 7 262203
                 8 845 7 262203 8 850 7 262203 8 855 7 262203
                 33 860 7 262203 34 865 7 262203 33 883 7 262203
                 34 889 7 262203 33 895 7 262203 33 897 7 262203
                 34 902 7 262203 33 918 7 262203 33 919 7 262203
                 33 921 7 262203 33 923 7 262203 33 925 7 262203
                 34 927 7 262203 34 929 7 262203 33 931 7 262203
                 33 933 7 262203 34 935 7 262203 33 937 7 262203
                 33 939 7 262203 34 941 7 262203 8 957 7 196670
                 465 253 196670 466 100 196670 467 468 262205 7 472 471
                 327745 366 473 365 119 262205 7 474 473 327813 7 475
                 472 474 196670 469 475 327745 476 477 365 84 262205 6
                 478 477 327860 254 479 478 100 196855 481 0 262394 479
                 480 481 131320 480 327745 34 482 469 65 262205 6 483
                 482 327745 476 485 365 484 262205 6 486 485 327864 254
                 487 483 486 196855 489 0 262394 487 488 489 131320 488
                 65788 131320 489 131321 481 131320 481 196670 491 492 196670 493
                 494 196670 465 253 327745 34 496 493 105 262205 6 497
                 496 327745 34 498 493 108 262205 6 499 498 458764 6
                 500 1 40 497 499 327745 34 501 493 111 262205 6
                 502 501 458764 6 503 1 40 500 502 196670 495 503
                 262205 7 506 491 524367 13 507 506 506 0 1 2
                 196670 505 507 262205 13 509 493 196670 508 509 262205 6
                 511 495 196670 510 511 458809 6 512 55 505 508 510
                 196670 504 512 262205 7 514 491 524367 13 515 514 514
                 0 1 2 262205 6 516 495 327811 6 517 100 516
                 327816 6 518 517 435 262205 6 519 504 327811 6 520
                 100 519 458764 6 522 1 40 520 521 327816 6 523
                 518 522 327822 13 524 515 523 327745 366 525 365 227
                 262205 7 526 525 524367 13 527 526 526 0 1 2
                 327813 13 528 524 527 196670 513 528 262205 13 530 493
                 262205 6 531 504 327811 6 532 100 531 327822 13 533
                 468 532 262205 6 534 504 458764 6 535 1 40 534
                 521 327816 6 536 100 535 327822 13 537 533 536 327745
                 366 539 365 538 262205 7 540 539 524367 13 541 540
                 540 0 1 2 327813 13 542 537 541 327811 13 543
                 530 542 196670 529 543 262205 13 544 513 262205 13 545
                 529 262205 6 546 504 262205 6 547 504 327813 6 548
                 546 547 393296 13 549 548 548 548 524300 13 550 1
                 46 544 545 549 327745 34 551 491 65 262205 6 552
                 551 327761 6 553 550 0 327761 6 554 550 1 327761
                 6 555 550 2 458832 7 556 553 554 555 552 196670
                 469 556 262205 7 558 469 524367 13 559 558 558 0
                 1 2 262205 13 560 467 327811 13 561 101 560 327813
                 13 562 559 561 196670 557 562 262205 6 563 504 327811
                 6 564 100 563 262205 13 565 557 327822 13 566 565
                 564 196670 557 566 262205 6 568 465 262205 6 569 465
                 327813 6 570 568 569 196670 567 570 262205 13 572 467
                 262205 7 573 469 524367 13 574 573 573 0 1 2
                 262205 6 575 504 393296 13 576 575 575 575 524300 13
                 577 1 46 572 574 576 196670 571 577 327745 34 579
                 571 105 262205 6 580 579 327745 34 581 571 108 262205
                 6 582 581 458764 6 583 1 40 580 582 327745 34
                 584 571 111 262205 6 585 584 458764 6 586 1 40
                 583 585 196670 578 586 262205 6 588 578 327813 6 590
                 588 589 524300 6 591 1 43 590 253 100 196670 587
                 591 262205 13 593 571 196670 592 593 262205 6 595 587
                 327822 13 596 101 595 196670 594 596 262201 13 598 15
                 196670 597 598 262205 13 601 600 393228 13 602 1 69
                 601 196670 599 602 196670 603 604 196670 605 494 393281 366
                 612 611 119 119 262205 7 613 612 196670 606 613 327745
                 34 616 606 105 262205 6 617 616 262254 83 618 617
                 196670 615 618 327745 34 620 606 108 262205 6 621 620
                 262254 83 622 621 196670 619 622 327745 34 624 606 111
                 262205 6 625 624 262254 83 626 625 196670 623 626 327745
                 34 628 606 65 262205 6 629 628 262254 83 630 629
                 196670 627 630 196670 631 129 262205 83 632 615 327853 254
                 633 632 119 196855 635 0 262394 633 634 635 131320 634
                 196670 636 119 131321 637 131320 637 262390 639 640 0 131321
                 641 131320 641 262205 83 642 636 262205 83 643 615 327857
                 254 644 642 643 262394 644 638 639 131320 638 262205 83
                 646 631 327808 83 647 646 129 196670 631 647 393281 366
                 648 611 119 646 262205 7 649 648 196670 645 649 262205
                 7 650 469 524367 13 651 650 650 0 1 2 262205
                 7 652 645 524367 13 653 652 652 0 1 2 327813
                 13 654 651 653 327745 34 655 645 65 262205 6 656
                 655 262205 6 657 466 327813 6 658 656 657 327822 13
                 659 654 658 262205 13 660 605 327809 13 661 660 659
                 196670 605 661 131321 640 131320 640 262205 83 662 636 327808
                 83 663 662 129 196670 636 663 131321 637 131320 639 131321
                 635 131320 635 262205 83 664 619 327853 254 665 664 119
                 196855 667 0 262394 665 666 667 131320 666 196670 668 119
                 131321 669 131320 669 262390 671 672 0 131321 673 131320 673
                 262205 83 674 668 262205 83 675 619 327857 254 676 674
                 675 262394 676 670 671 131320 670 262205 83 678 631 327808
                 83 679 678 129 196670 631 679 393281 366 680 611 119
                 678 262205 7 681 680 196670 677 681 262205 83 683 631
                 327808 83 684 683 129 196670 631 684 393281 366 685 611
                 119 683 262205 7 686 685 524367 13 687 686 686 0
                 1 2 262271 13 688 687 196670 682 688 262205 13 690
                 682 196670 689 690 262205 13 692 689 262205 13 693 599
                 327809 13 694 692 693 393228 13 695 1 69 694 196670
                 691 695 327745 34 697 677 65 262205 6 698 697 196670
                 696 698 262205 7 699 677 524367 13 700 699 699 0
                 1 2 262205 6 701 696 327822 13 702 700 701 196670
                 703 702 262205 13 705 599 196670 704 705 262205 13 707
                 597 196670 706 707 262205 13 709 689 196670 708 709 262205
                 13 711 691 196670 710 711 262205 6 713 465 196670 712
                 713 262205 6 715 504 196670 714 715 262205 13 717 592
                 196670 716 717 262205 13 719 594 196670 718 719 262205 6
                 721 567 196670 720 721 262205 13 723 557 196670 722 723
                 262205 13 725 571 196670 724 725 262205 6 727 466 196670
                 726 727 1114169 13 728 49 703 704 706 708 710 712
                 714 716 718 720 722 724 726 262205 13 729 605 327809
                 13 730 729 728 196670 605 730 131321 672 131320 672 262205
                 83 731 668 327808 83 732 731 129 196670 668 732 131321
                 669 131320 671 131321 667 131320 667 262205 83 733 623 327853
                 254 734 733 119 196855 736 0 262394 734 735 736 131320
                 735 196670 737 119 131321 738 131320 738 262390 740 741 0
                 131321 742 131320 742 262205 83 743 737 262205 83 744 623
                 327857 254 745 743 744 262394 745 739 740 131320 739 262205
                 83 747 631 327808 83 748 747 129 196670 631 748 393281
                 366 749 611 119 747 262205 7 750 749 196670 746 750
                 262205 83 752 631 327808 83 753 752 129 196670 631 753
                 393281 366 754 611 119 752 262205 7 755 754 524367 13
                 756 755 755 0 1 2 196670 751 756 262205 13 758
                 751 262205 13 760 759 327811 13 761 758 760 196670 757
                 761 327745 34 763 757 105 262205 6 764 763 327745 34
                 765 757 105 262205 6 766 765 327813 6 767 764 766
                 327745 34 768 757 108 262205 6 769 768 327745 34 770
                 757 108 262205 6 771 770 327813 6 772 769 771 327809
                 6 773 767 772 327745 34 774 757 111 262205 6 775
                 774 327745 34 776 757 111 262205 6 777 776 327813 6
                 778 775 777 327809 6 779 773 778 196670 762 779 262205
                 13 781 757 262205 6 782 762 393228 6 783 1 31
                 782 393296 13 784 783 783 783 327816 13 785 781 784
                 196670 780 785 262205 13 787 780 196670 786 787 262205 13
                 789 786 262205 13 790 599 327809 13 791 789 790 393228
                 13 792 1 69 791 196670 788 792 327745 34 794 746
                 65 262205 6 795 794 262205 6 796 762 327816 6 797
                 795 796 196670 793 797 262205 7 798 746 524367 13 799
                 798 798 0 1 2 262205 6 800 793 327822 13 801
                 799 800 196670 802 801 262205 13 804 599 196670 803 804
                 262205 13 806 597 196670 805 806 262205 13 808 786 196670
                 807 808 262205 13 810 788 196670 809 810 262205 6 812
                 465 196670 811 812 262205 6 814 504 196670 813 814 262205
                 13 816 592 196670 815 816 262205 13 818 594 196670 817
                 818 262205 6 820 567 196670 819 820 262205 13 822 557
                 196670 821 822 262205 13 824 571 196670 823 824 262205 6
                 826 466 196670 825 826 1114169 13 827 49 802 803 805
                 807 809 811 813 815 817 819 821 823 825 262205 13
                 828 605 327809 13 829 828 827 196670 605 829 131321 741
                 131320 741 262205 83 830 737 327808 83 831 830 129 196670
                 737 831 131321 738 131320 740 131321 736 131320 736 262205 83
                 832 627 327853 254 833 832 119 196855 835 0 262394 833
                 834 835 131320 834 196670 836 119 131321 837 131320 837 262390
                 839 840 0 131321 841 131320 841 262205 83 842 836 262205
                 83 843 627 327857 254 844 842 843 262394 844 838 839
                 131320 838 262205 83 846 631 327808 83 847 846 129 196670
                 631 847 393281 366 848 611 119 846 262205 7 849 848
                 196670 845 849 262205 83 851 631 327808 83 852 851 129
                 196670 631 852 393281 366 853 611 119 851 262205 7 854
                 853 196670 850 854 262205 83 856 631 327808 83 857 856
                 129 196670 631 857 393281 366 858 611 119 856 262205 7
                 859 858 196670 855 859 262205 7 861 850 524367 13 862
                 861 861 0 1 2 262205 13 863 759 327811 13 864
                 862 863 196670 860 864 327745 34 866 860 105 262205 6
                 867 866 327745 34 868 860 105 262205 6 869 868 327813
                 6 870 867 869 327745 34 871 860 108 262205 6 872
                 871 327745 34 873 860 108 262205 6 874 873 327813 6
                 875 872 874 327809 6 876 870 875 327745 34 877 860
                 111 262205 6 878 877 327745 34 879 860 111 262205 6
                 880 879 327813 6 881 878 880 327809 6 882 876 881
                 196670 865 882 262205 13 884 860 262205 6 885 865 393228
                 6 886 1 31 885 393296 13 887 886 886 886 327816
                 13 888 884 887 196670 883 888 262205 7 890 855 524367
                 13 891 890 890 0 1 2 262205 13 892 883 327828
                 6 893 891 892 262271 6 894 893 196670 889 894 262205
                 13 896 883 196670 895 896 262205 13 898 895 262205 13
                 899 599 327809 13 900 898 899 393228 13 901 1 69
                 900 196670 897 901 327745 34 903 845 65 262205 6 904
                 903 327745 34 905 855 65 262205 6 906 905 327745 34
                 907 850 65 262205 6 908 907 262205 6 909 889 524300
                 6 910 1 49 906 908 909 327813 6 911 904 910
                 262205 6 912 865 327816 6 913 911 912 196670 902 913
                 262205 7 914 845 524367 13 915 914 914 0 1 2
                 262205 6 916 902 327822 13 917 915 916 196670 918 917
                 262205 13 920 599 196670 919 920 262205 13 922 597 196670
                 921 922 262205 13 924 895 196670 923 924 262205 13 926
                 897 196670 925 926 262205 6 928 465 196670 927 928 262205
                 6 930 504 196670 929 930 262205 13 932 592 196670 931
                 932 262205 13 934 594 196670 933 934 262205 6 936 567
                 196670 935 936 262205 13 938 557 196670 937 938 262205 13
                 940 571 196670 939 940 262205 6 942 466 196670 941 942
                 1114169 13 943 49 918 919 921 923 925 927 929 931
                 933 935 937 939 941 262205 13 944 605 327809 13 945
                 944 943 196670 605 945 131321 840 131320 840 262205 83 946
                 836 327808 83 947 946 129 196670 836 947 131321 837 131320
                 839 131321 835 131320 835 262205 13 950 605 327745 34 951
                 469 65 262205 6 952 951 327761 6 953 950 0 327761
                 6 954 950 1 327761 6 955 950 2 458832 7 956
                 953 954 955 952 196670 957 956 327737 7 958 11 957
                 196670 949 958 65789 65592 327734 7 11 0 9 196663 8
                 10 131320 12 262203 33 57 7 262205 7 58 10 524367
                 13 59 58 58 0 1 2 458764 13 62 1 26
                 59 61 196670 57 62 262205 13 63 57 327745 34 66
                 10 65 262205 6 67 66 327761 6 68 63 0 327761
                 6 69 63 1 327761 6 70 63 2 458832 7 71
                 68 69 70 67 131326 71 65592 327734 13 15 0 14
                 131320 16 262205 13 76 75 393228 13 77 1 69 76
                 131326 77 65592 327734 13 21 0 19 196663 18 20 131320
                 22 262203 34 80 7 262203 33 96 7 262203 33 99
                 7 262203 34 104 7 262203 34 116 7 327745 34 85
                 20 84 262205 6 86 85 327813 6 87 82 86 327745
                 34 89 20 88 262205 6 90 89 327813 6 91 87
                 90 327745 34 92 20 88 262205 6 93 92 327813 6
                 94 91 93 327809 6 95 81 94 196670 80 95 196670
                 96 98 262205 13 102 96 327811 13 103 101 102 196670
                 99 103 327745 34 106 99 105 262205 6 107 106 327745
                 34 109 99 108 262205 6 110 109 327745 34 112 99
                 111 262205 6 113 112 458764 6 114 1 37 110 113
                 458764 6 115 1 37 107 114 196670 104 115 262205 6
                 117 80 327811 6 118 117 100 327745 34 120 20 119
                 262205 6 121 120 327811 6 122 100 121 458764 6 124
                 1 26 122 123 327813 6 125 118 124 327809 6 126
                 100 125 262205 6 127 80 327811 6 128 127 100 327745
                 34 130 20 129 262205 6 131 130 327811 6 132 100
                 131 458764 6 133 1 26 132 123 327813 6 134 128
                 133 327809 6 135 100 134 327813 6 136 126 135 262205
                 6 137 104 327813 6 138 136 137 196670 116 138 327745
                 33 140 20 139 262205 13 141 140 262205 6 142 116
                 327822 13 143 141 142 131326 143 65592 327734 13 24 0
                 19 196663 18 23 131320 25 327745 33 147 23 146 262205
                 13 148 147 327745 33 150 23 149 262205 13 151 150
                 327745 33 152 23 149 262205 13 153 152 327745 33 154
                 23 146 262205 13 155 154 327813 13 156 153 155 327811
                 13 157 151 156 327745 34 159 23 88 262205 6 160
                 159 327813 6 161 158 160 327811 6 163 161 162 327745
                 34 164 23 88 262205 6 165 164 327813 6 166 163
                 165 393228 6 167 1 29 166 327822 13 168 157 167
                 327809 13 169 148 168 131326 169 65592 327734 6 28 0
                 26 196663 18 27 131320 29 262203 34 172 7 262203 34
                 175 7 262203 34 178 7 262203 34 185 7 262203 34
                 200 7 327745 34 173 27 119 262205 6 174 173 196670
                 172 174 327745 34 176 27 129 262205 6 177 176 196670
                 175 177 327745 34 180 27 179 262205 6 181 180 327745
                 34 182 27 179 262205 6 183 182 327813 6 184 181
                 183 196670 178 184 262205 6 186 172 327813 6 187 82
                 186 262205 6 188 172 262205 6 189 178 262205 6 190
                 178 327811 6 191 100 190 262205 6 192 172 262205 6
                 193 172 327813 6 194 192 193 327813 6 195 191 194
                 327809 6 196 189 195 393228 6 197 1 31 196 327809
                 6 198 188 197 327816 6 199 187 198 196670 185 199
                 262205 6 201 175 327813 6 202 82 201 262205 6 203
                 175 262205 6 204 178 262205 6 205 178 327811 6 206
                 100 205 262205 6 207 175 262205 6 208 175 327813 6
                 209 207 208 327813 6 210 206 209 327809 6 211 204
                 210 393228 6 212 1 31 211 327809 6 213 203 212
                 327816 6 214 202 213 196670 200 214 262205 6 215 185
                 262205 6 216 200 327813 6 217 215 216 131326 217 65592
                 327734 6 31 0 26 196663 18 30 131320 32 262203 34
                 220 7 262203 34 226 7 327745 34 221 30 179 262205
                 6 222 221 327745 34 223 30 179 262205 6 224 223
                 327813 6 225 222 224 196670 220 225 327745 34 228 30
                 227 262205 6 229 228 262205 6 230 220 327813 6 231
                 229 230 327745 34 232 30 227 262205 6 233 232 327811
                 6 234 231 233 327745 34 235 30 227 262205 6 236
                 235 327813 6 237 234 236 327809 6 238 237 100 196670
                 226 238 262205 6 239 220 262205 6 241 226 327813 6
                 242 240 241 262205 6 243 226 327813 6 244 242 243
                 327816 6 245 239 244 131326 245 65592 327734 13 49 0
                 35 196663 33 36 196663 33 37 196663 33 38 196663 33
                 39 196663 33 40 196663 34 41 196663 34 42 196663 33
                 43 196663 33 44 196663 34 45 196663 33 46 196663 33
                 47 196663 34 48 131320 50 262203 34 248 7 262203 33
                 262 7 262203 34 273 7 262203 34 277 7 262203 34
                 283 7 262203 34 288 7 262203 34 293 7 262203 34
                 298 7 262203 18 303 7 262203 33 318 7 262203 18
                 319 7 262203 34 322 7 262203 18 323 7 262203 34
                 326 7 262203 18 327 7 262203 33 330 7 262203 18
                 334 7 262203 33 338 7 262203 33 351 7 262203 33
                 362 7 262205 13 249 38 262205 13 250 39 327828 6
                 251 249 250 196670 248 251 262205 6 252 248 327864 254
                 255 252 253 196855 257 0 262394 255 256 257 131320 256
                 262205 13 258 38 262271 13 259 258 196670 38 259 262205
                 6 260 248 262271 6 261 260 196670 248 261 131321 257
                 131320 257 262205 13 263 37 262205 13 264 38 458764 13
                 265 1 71 263 264 393228 13 266 1 69 265 262271
                 13 267 266 196670 262 267 327745 34 269 262 108 262205
                 6 270 269 327813 6 271 270 268 327745 34 272 262
                 108 196670 272 271 262205 6 274 248 524300 6 276 1
                 43 274 275 100 196670 273 276 262205 13 278 38 262205
                 13 279 37 327828 6 280 278 279 393228 6 281 1
                 4 280 524300 6 282 1 43 281 275 100 196670 277
                 282 262205 13 284 38 262205 13 285 40 327828 6 286
                 284 285 524300 6 287 1 43 286 253 100 196670 283
                 287 262205 13 289 39 262205 13 290 40 327828 6 291
                 289 290 524300 6 292 1 43 291 253 100 196670 288
                 292 262205 13 294 37 262205 13 295 40 327828 6 296
                 294 295 524300 6 297 1 43 296 253 100 196670 293
                 297 262205 13 299 37 262205 13 300 39 327828 6 301
                 299 300 524300 6 302 1 43 301 253 100 196670 298
                 302 262205 6 304 273 262205 6 305 277 262205 6 306
                 283 262205 6 307 288 262205 6 308 293 262205 6 309
                 298 262205 6 310 41 262205 6 311 42 262205 13 312
                 43 262205 13 313 44 262205 6 314 45 262205 13 315
                 46 262205 13 316 47 1048656 17 317 304 305 306 307
                 308 309 310 311 312 313 314 315 316 196670 303 317
                 262205 17 320 303 196670 319 320 327737 13 321 24 319
                 196670 318 321 262205 17 324 303 196670 323 324 327737 6
                 325 28 323 196670 322 325 262205 17 328 303 196670 327
                 328 327737 6 329 31 327 196670 326 329 262205 13 331
                 318 393296 13 332 100 100 100 327811 13 333 332 331
                 262205 17 335 303 196670 334 335 327737 13 336 21 334
                 327813 13 337 333 336 196670 330 337 262205 13 339 318
                 262205 6 340 322 327822 13 341 339 340 262205 6 342
                 326 327822 13 343 341 342 262205 6 345 273 327813 6
                 346 344 345 262205 6 347 277 327813 6 348 346 347
                 393296 13 349 348 348 348 327816 13 350 343 349 196670
                 338 350 262205 6 352 273 262205 13 353 36 327822 13
                 354 353 352 262205 13 355 330 262205 13 356 338 327809
                 13 357 355 356 327813 13 358 354 357 196670 351 358
                 262205 6 359 48 262205 13 360 351 327822 13 361 360
                 359 196670 351 361 327745 366 367 365 129 262205 7 368
                 367 524367 13 369 368 368 0 1 2 196670 362 369
                 262205 13 370 362 262205 13 371 351 327809 13 372 371
                 370 196670 351 372 262205 13 373 351 131326 373 65592 327734
                 6 55 0 51 196663 33 52 196663 33 53 196663 34
                 54 131320 56 262203 34 376 7 262203 34 401 7 262203
                 34 429 7 262203 34 430 7 262203 34 441 7 262203
                 34 444 7 327745 34 378 52 105 262205 6 379 378
                 327813 6 380 377 379 327745 34 381 52 105 262205 6
                 382 381 327813 6 383 380 382 327745 34 385 52 108
                 262205 6 386 385 327813 6 387 384 386 327745 34 388
                 52 108 262205 6 389 388 327813 6 390 387 389 327809
                 6 391 383 390 327745 34 393 52 111 262205 6 394
                 393 327813 6 395 392 394 327745 34 396 52 111 262205
                 6 397 396 327813 6 398 395 397 327809 6 399 391
                 398 393228 6 400 1 31 399 196670 376 400 327745 34
                 402 53 105 262205 6 403 402 327813 6 404 377 403
                 327745 34 405 53 105 262205 6 406 405 327813 6 407
                 404 406 327745 34 408 53 108 262205 6 409 408 327813
                 6 410 384 409 327745 34 411 53 108 262205 6 412
                 411 327813 6 413 410 412 327809 6 414 407 413 327745
                 34 415 53 111 262205 6 416 415 327813 6 417 392
                 416 327745 34 418 53 111 262205 6 419 418 327813 6
                 420 417 419 327809 6 421 414 420 393228 6 422 1
                 31 421 196670 401 422 262205 6 423 401 327864 254 425
                 423 424 196855 427 0 262394 425 426 427 131320 426 131326
                 253 131320 427 196670 429 424 262205 6 431 376 262205 6
                 432 54 327811 6 433 100 432 327813 6 434 431 433
                 327816 6 436 434 435 262205 6 437 401 327809 6 438
                 436 437 327811 6 440 438 439 196670 430 440 262205 6
                 442 401 327811 6 443 424 442 196670 441 443 262205 6
                 445 430 262205 6 446 430 327813 6 447 445 446 262205
                 6 448 429 327813 6 449 344 448 262205 6 450 441
                 327813 6 451 449 450 327811 6 452 447 451 458764 6
                 453 1 40 452 253 196670 444 453 262205 6 454 430
                 262271 6 455 454 262205 6 456 444 393228 6 457 1
                 31 456 327809 6 458 455 457 262205 6 459 429 327813
                 6 460 82 459 327816 6 461 458 460 524300 6 462
                 1 43 461 253 100 131326 462 65592
              }
              NumSpecializationConstants 0
            }
            pipelineStates 6
            vsg::GraphicsPipelineState id=21 vsg::ColorBlendState
            {
              NumUserObjects 0
              logicOp 3
              logicOpEnable 0
              NumColorBlendAttachments 1
              blendEnable 0
              srcColorBlendFactor 0
              dstColorBlendFactor 0
              colorBlendOp 0
              srcAlphaBlendFactor 0
              dstAlphaBlendFactor 0
              alphaBlendOp 0
              colorWriteMask 15
              blendConstants 0 0 0 0
            }
            vsg::GraphicsPipelineState id=22 vsg::DepthStencilState
            {
              NumUserObjects 0
              depthTestEnable 1
              depthWriteEnable 1
              depthCompareOp 4
              depthBoundsTestEnable 0
              stencilTestEnable 0
              front.failOp 0
              front.passOp 0
              front.depthFailOp 0
              front.compareOp 0
              front.compareMask 0
              front.writeMask 0
              front.reference 0
              back.failOp 0
              back.passOp 0
              back.depthFailOp 0
              back.compareOp 0
              back.compareMask 0
              back.writeMask 0
              back.reference 0
              minDepthBounds 0
              maxDepthBounds 1
            }
            vsg::GraphicsPipelineState id=23 vsg::InputAssemblyState
            {
              NumUserObjects 0
              topology 3
              primitiveRestartEnable 0
            }
            vsg::GraphicsPipelineState id=24 vsg::MultisampleState
            {
              NumUserObjects 0
              rasterizationSamples 1
              sampleShadingEnable 0
              minSampleShading 0
              NumSampleMask 0
              alphaToCoverageEnable 0
              alphaToOneEnable 0
            }
            vsg::GraphicsPipelineState id=25 vsg::RasterizationState
            {
              NumUserObjects 0
              depthClampEnable 0
              rasterizerDiscardEnable 0
              polygonMode 0
              cullMode 0
              frontFace 0
              depthBiasEnable 0
              depthBiasConstantFactor 1
              depthBiasClamp 0
              depthBiasSlopeFactor 1
              lineWidth 1
            }
            vsg::GraphicsPipelineState id=26 vsg::VertexInputState
            {
              NumUserObjects 0
              NumBindings 4
              binding 0
              stride 12
              inputRate 0
              binding 1
              stride 12
              inputRate 0
              binding 2
              stride 8
              inputRate 0
              binding 3
              stride 0
              inputRate 1
              NumAttributes 4
              location 0
              binding 0
              format 106
              offset 0
              location 1
              binding 1
              format 106
              offset 0
              location 2
              binding 2
              format 103
              offset 0
              location 3
              binding 3
              format 109
              offset 0
            }
            subpass 0
          }
        }
        vsg::StateCommand id=27 vsg::BindDescriptorSet
        {
          NumUserObjects 0
          slot 1
          layout id=13
          firstSet 0
          descriptorSet id=28 vsg::DescriptorSet
          {
            NumUserObjects 0
            setLayout id=14
            descriptors 1
            vsg::Descriptor id=29 vsg::DescriptorBuffer
            {
              NumUserObjects 0
              dstBinding 10
              dstArrayElement 0
              NumData 1
              Data id=30 vsg::PbrMaterialValue
              {
                NumUserObjects 0
                Layout 0 0 0 1 1 1 0 -1
                Value                baseColorFactor 1 1 1 1
                emissiveFactor 0 0 0 1
                diffuseFactor 1 1 1 1
                specularFactor 0 0 0 1
                metallicFactor 1
                roughnessFactor 1
                alphaMask 1
                alphaMaskCutoff 0.5

              }
            }
          }
        }
        vsg::StateCommand id=31 vsg::BindViewDescriptorSets
        {
          NumUserObjects 0
          slot 2
          pipelineBindPoint 0
          layout id=13
          firstSet 1
        }
        prototypeArrayState id=0
      }
      matrix 0.025 0 0 0 0 -0.1 -8.74228e-09 0 0 2.18557e-09 -0.025 0
       0 0.09 0 1
      subgraphRequiresLocalFrustum 1
    }
    vsg::Node id=32 vsg::MatrixTransform
    {
      NumUserObjects 0
      children 1
      vsg::Node id=33 vsg::SpotLight
      {
        name "Spot_Orientation"
        color 10 0 0.0340713
        intensity 1
        position 0 0 -1
        direction 0 0 -1
        innerAngle 0.0741765
        outerAngle 0.0872665
      }
      matrix 1 0 0 0 0 5.96046e-08 -1 0 0 1 5.96046e-08 0
       0 0 0 1
      subgraphRequiresLocalFrustum 1
    }
  }
  matrix 1 0 0 0 0 0 1 0 0 -1 0 0
   0 0 0 1
  subgraphRequiresLocalFrustum 1
}
