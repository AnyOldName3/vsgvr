#vsga 0.2.7
Root id=1 vsg::MatrixTransform
{
  NumUserObjects 0
  children 1
  vsg::Node id=2 vsg::StateGroup
  {
    NumUserObjects 0
    children 1
    vsg::Node id=3 vsg::MatrixTransform
    {
      NumUserObjects 0
      children 2
      vsg::Node id=4 vsg::MatrixTransform
      {
        NumUserObjects 0
        children 1
        vsg::Node id=5 vsg::MatrixTransform
        {
          NumUserObjects 0
          children 1
          vsg::Node id=6 vsg::PointLight
          {
            name "Light_Orientation"
            color 10 0 0.00879861
            intensity 1
            position 0 0 0
          }
          matrix 1 0 0 0 0 5.96046e-08 -1 0 0 1 5.96046e-08 0
           0 0 0 1
          subgraphRequiresLocalFrustum 1
        }
        matrix -0.290865 -0.955171 0.055189 0 0.566393 -0.218391 -0.794672 0 0.771101 -0.199883 0.604525 0
         0 -0.02 0 1
        subgraphRequiresLocalFrustum 1
      }
      vsg::Node id=7 vsg::MatrixTransform
      {
        NumUserObjects 0
        children 1
        vsg::Node id=8 vsg::StateGroup
        {
          NumUserObjects 0
          children 1
          vsg::Node id=9 vsg::VertexIndexDraw
          {
            NumUserObjects 0
            firstBinding 0
            NumArrays 4
            Array id=10 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 1 -1 -1 1 -1 -1 1 -1 -1 1 -1 1
               1 -1 1 1 -1 1 -1 -1 -1 -1 -1 -1
               -1 -1 -1 -1 -1 1 -1 -1 1 -1 -1 1
               0.611511 1 -0.611511 0.611511 1 -0.611511 0.611511 1 -0.611511 1 0.611511 -1
               1 0.611511 -1 1 0.611511 -1 1 0.611511 -1 0.611511 1 0.611511
               0.611511 1 0.611511 0.611511 1 0.611511 1 0.611511 1 1 0.611511 1
               1 0.611511 1 1 0.611511 1 -0.611511 1 -0.611511 -0.611511 1 -0.611511
               -0.611511 1 -0.611511 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511 -1
               -1 0.611511 -1 -0.611511 1 0.611511 -0.611511 1 0.611511 -0.611511 1 0.611511
               -1 0.611511 1 -1 0.611511 1 -1 0.611511 1 -1 0.611511 1
            }
            Array id=11 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0 -1 -0 0 0 -1 1 0 -0 0 -1 -0
               0 0 1 1 0 -0 -1 0 -0 0 -1 -0
               0 0 -1 -1 0 -0 0 -1 -0 0 0 1
               0 0.707107 -0.707107 0 1 -0 0.707107 0.707107 -0 0 0 -1
               0 0.707107 -0.707107 0.707107 0.707107 -0 1 0 -0 0 0.707107 0.707107
               0 1 -0 0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
               0.707107 0.707107 -0 1 0 -0 -0.707107 0.707107 -0 0 0.707107 -0.707107
               0 1 -0 -1 0 -0 -0.707107 0.707107 -0 0 0 -1
               0 0.707107 -0.707107 -0.707107 0.707107 -0 0 0.707107 0.707107 0 1 -0
               -1 0 -0 -0.707107 0.707107 -0 0 0 1 0 0.707107 0.707107
            }
            Array id=12 vsg::vec2Array
            {
              NumUserObjects 0
              Layout 0 8 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0.375 0.5 0.375 0.5 0.375 0.5 0.375 0.25 0.375 0.25 0.375 0.25
               0.375 0.75 0.125 0.5 0.375 0.75 0.375 1 0.125 0.25 0.375 0
               0.673561 0.451439 0.673561 0.451439 0.673561 0.451439 0.576439 0.5 0.625 0.5 0.576439 0.5
               0.576439 0.5 0.673561 0.298561 0.673561 0.298561 0.673561 0.298561 0.576439 0.25 0.625 0.25
               0.576439 0.25 0.576439 0.25 0.826439 0.451439 0.826439 0.451439 0.826439 0.451439 0.576439 0.75
               0.875 0.5 0.576439 0.75 0.875 0.5 0.826439 0.298561 0.826439 0.298561 0.826439 0.298561
               0.576439 1 0.875 0.25 0.576439 0 0.875 0.25
            }
            Array id=13 vsg::vec4Array
            {
              NumUserObjects 0
              Layout 0 16 0 1 1 1 0 -1
              Size 1
              Storage id=0
              Data 1 1 1 1
            }
            Indices id=14 vsg::ushortArray
            {
              NumUserObjects 0
              Layout 0 2 0 1 1 1 0 -1
              Size 60
              Storage id=0
              Data 7 0 3 7 3 10 2 18 25 2 25 5
               4 22 38 4 38 11 9 29 6 9 36 29
               8 31 15 8 15 1 27 12 16 27 16 32
               13 28 35 13 35 20 14 21 24 14 24 17
               19 34 39 19 39 23 33 26 30 33 30 37
            }
            indexCount 60
            instanceCount 1
            firstIndex 0
            vertexOffset 0
            firstInstance 0
          }
          stateCommands 2
          vsg::StateCommand id=15 vsg::BindGraphicsPipeline
          {
            NumUserObjects 0
            slot 0
            pipeline id=16 vsg::GraphicsPipeline
            {
              NumUserObjects 0
              layout id=17 vsg::PipelineLayout
              {
                NumUserObjects 0
                Flags 0
                NumDescriptorSetLayouts 1
                DescriptorSetLayout id=18 vsg::DescriptorSetLayout
                {
                  NumUserObjects 0
                  NumDescriptorSetLayoutBindings 1
                  binding 10
                  descriptorType 6
                  descriptorCount 1
                  stageFlags 16
                }
                NumPushConstantRanges 1
                stageFlags 1
                offset 0
                size 128
              }
              stages 2
              vsg::ShaderStage id=19 vsg::ShaderStage
              {
                NumUserObjects 0
                stage 1
                entryPointName "main"
                module id=20 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450
#extension GL_ARB_separate_shader_objects : enable

#pragma import_defines (VSG_INSTANCE_POSITIONS, VSG_DISPLACEMENT_MAP)

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

#ifdef VSG_DISPLACEMENT_MAP
layout(binding = 6) uniform sampler2D displacementMap;
#endif

layout(location = 0) in vec3 vsg_Vertex;
layout(location = 1) in vec3 vsg_Normal;
layout(location = 2) in vec2 vsg_TexCoord0;
layout(location = 3) in vec4 vsg_Color;

#ifdef VSG_INSTANCE_POSITIONS
layout(location = 4) in vec3 vsg_position;
#endif

layout(location = 0) out vec3 eyePos;
layout(location = 1) out vec3 normalDir;
layout(location = 2) out vec4 vertexColor;
layout(location = 3) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;
layout(location = 6) out vec3 lightDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    vec4 vertex = vec4(vsg_Vertex, 1.0);
    vec4 normal = vec4(vsg_Normal, 0.0);

#ifdef VSG_DISPLACEMENT_MAP
    // TODO need to pass as as uniform or per instance attributes
    vec3 scale = vec3(1.0, 1.0, 1.0);

    vertex.xyz = vertex.xyz + vsg_Normal * (texture(displacementMap, vsg_TexCoord0.st).s * scale.z);

    float s_delta = 0.01;
    float width = 0.0;

    float s_left = max(vsg_TexCoord0.s - s_delta, 0.0);
    float s_right = min(vsg_TexCoord0.s + s_delta, 1.0);
    float t_center = vsg_TexCoord0.t;
    float delta_left_right = (s_right - s_left) * scale.x;
    float dz_left_right = (texture(displacementMap, vec2(s_right, t_center)).s - texture(displacementMap, vec2(s_left, t_center)).s) * scale.z;

    // TODO need to handle different origins of displacementMap vs diffuseMap etc,
    float t_delta = s_delta;
    float t_bottom = max(vsg_TexCoord0.t - t_delta, 0.0);
    float t_top = min(vsg_TexCoord0.t + t_delta, 1.0);
    float s_center = vsg_TexCoord0.s;
    float delta_bottom_top = (t_top - t_bottom) * scale.y;
    float dz_bottom_top = (texture(displacementMap, vec2(s_center, t_top)).s - texture(displacementMap, vec2(s_center, t_bottom)).s) * scale.z;

    vec3 dx = normalize(vec3(delta_left_right, 0.0, dz_left_right));
    vec3 dy = normalize(vec3(0.0, delta_bottom_top, -dz_bottom_top));
    vec3 dz = normalize(cross(dx, dy));

    normal.xyz = normalize(dx * vsg_Normal.x + dy * vsg_Normal.y + dz * vsg_Normal.z);
#endif


#ifdef VSG_INSTANCE_POSITIONS
   vertex.xyz = vertex.xyz + vsg_position;
#endif

    gl_Position = (pc.projection * pc.modelView) * vertex;

    eyePos = vec4(pc.modelView * vertex).xyz;

    vec4 lpos = /*vsg_LightSource.position*/ vec4(0.0, 0.0, 1.0, 0.0);

    viewDir = - (pc.modelView * vertex).xyz;
    normalDir = (pc.modelView * normal).xyz;

    if (lpos.w == 0.0)
        lightDir = lpos.xyz;
    else
        lightDir = lpos.xyz + viewDir;

    vertexColor = vsg_Color;
    texCoord0 = vsg_TexCoord0;
}
"
                  hints id=21 vsg::ShaderCompileSettings
                  {
                    vulkanVersion 4194304
                    clientInputVersion 100
                    language 0
                    defaultVersion 450
                    target 65536
                    forwardCompatible 0
                    defines 2
                    element "VSG_WORKFLOW_SPECGLOSS"
                    element "VSG_TWOSIDED"
                  }
                  SPIRVSize 708
                  SPIRV 119734787 65536 524298 101 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 1048591 0 4 1852399981 0 12 20 29
                   48 61 68 83 91 93 97 99 196611 2 450 589828
                   1096764487 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0
                   262149 9 1953654134 30821 327685 12 1600615286 1953654102 30821 262149 19 1836216174
                   27745 327685 20 1600615286 1836216142 27745 393221 27 1348430951 1700164197 2019914866 0
                   393222 27 0 1348430951 1953067887 7237481 196613 29 0 393221 33 1752397136
                   1936617283 1953390964 115 393222 33 0 1785688688 1769235301 28271 393222 33 1
                   1701080941 1701402220 119 196613 35 25456 262149 48 1348827493 29551 262149 59
                   1936683116 0 262149 61 2003134838 7498052 327685 68 1836216174 1766091873 114 327685
                   83 1751607660 1919501428 0 327685 91 1953654134 1866692709 7499628 327685 93 1600615286
                   1869377347 114 327685 97 1131963764 1685221231 48 393221 99 1600615286 1131963732 1685221231
                   48 262215 12 30 0 262215 20 30 1 327752 27 0
                   11 0 196679 27 2 262216 33 0 5 327752 33 0
                   35 0 327752 33 0 7 16 262216 33 1 5 327752
                   33 1 35 64 327752 33 1 7 16 196679 33 2
                   262215 48 30 0 262215 61 30 5 262215 68 30 1
                   262215 83 30 6 262215 91 30 2 262215 93 30 3
                   262215 97 30 3 262215 99 30 2 131091 2 196641 3
                   2 196630 6 32 262167 7 6 4 262176 8 7 7
                   262167 10 6 3 262176 11 1 10 262203 11 12 1
                   262187 6 14 1065353216 262203 11 20 1 262187 6 22 0
                   196638 27 7 262176 28 3 27 262203 28 29 3 262165
                   30 32 1 262187 30 31 0 262168 32 7 4 262174
                   33 32 32 262176 34 9 33 262203 34 35 9 262176
                   36 9 32 262187 30 39 1 262176 45 3 7 262176
                   47 3 10 262203 47 48 3 458796 7 60 22 22
                   14 22 262203 47 61 3 262203 47 68 3 262165 74
                   32 0 262187 74 75 3 262176 76 7 6 131092 79
                   262203 47 83 3 262203 45 91 3 262176 92 1 7
                   262203 92 93 1 262167 95 6 2 262176 96 3 95
                   262203 96 97 3 262176 98 1 95 262203 98 99 1
                   327734 2 4 0 3 131320 5 262203 8 9 7 262203
                   8 19 7 262203 8 59 7 262205 10 13 12 327761
                   6 15 13 0 327761 6 16 13 1 327761 6 17
                   13 2 458832 7 18 15 16 17 14 196670 9 18
                   262205 10 21 20 327761 6 23 21 0 327761 6 24
                   21 1 327761 6 25 21 2 458832 7 26 23 24
                   25 22 196670 19 26 327745 36 37 35 31 262205 32
                   38 37 327745 36 40 35 39 262205 32 41 40 327826
                   32 42 38 41 262205 7 43 9 327825 7 44 42
                   43 327745 45 46 29 31 196670 46 44 327745 36 49
                   35 39 262205 32 50 49 262205 7 51 9 327825 7
                   52 50 51 327761 6 53 52 0 327761 6 54 52
                   1 327761 6 55 52 2 327761 6 56 52 3 458832
                   7 57 53 54 55 56 524367 10 58 57 57 0
                   1 2 196670 48 58 196670 59 60 327745 36 62 35
                   39 262205 32 63 62 262205 7 64 9 327825 7 65
                   63 64 524367 10 66 65 65 0 1 2 262271 10
                   67 66 196670 61 67 327745 36 69 35 39 262205 32
                   70 69 262205 7 71 19 327825 7 72 70 71 524367
                   10 73 72 72 0 1 2 196670 68 73 327745 76
                   77 59 75 262205 6 78 77 327860 79 80 78 22
                   196855 82 0 262394 80 81 86 131320 81 262205 7 84
                   59 524367 10 85 84 84 0 1 2 196670 83 85
                   131321 82 131320 86 262205 7 87 59 524367 10 88 87
                   87 0 1 2 262205 10 89 61 327809 10 90 88
                   89 196670 83 90 131321 82 131320 82 262205 7 94 93
                   196670 91 94 262205 95 100 99 196670 97 100 65789 65592
                }
                NumSpecializationConstants 0
              }
              vsg::ShaderStage id=22 vsg::ShaderStage
              {
                NumUserObjects 0
                stage 16
                entryPointName "main"
                module id=23 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_GREYSACLE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_METALLROUGHNESS_MAP, VSG_SPECULAR_MAP, VSG_TWOSIDED, VSG_WORKFLOW_SPECGLOSS)

const float PI = 3.14159265359;
const float RECIPROCAL_PI = 0.31830988618;
const float RECIPROCAL_PI2 = 0.15915494;
const float EPSILON = 1e-6;
const float c_MinRoughness = 0.04;

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_METALLROUGHNESS_MAP
layout(binding = 1) uniform sampler2D mrMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(binding = 10) uniform PbrData
{
    vec4 baseColorFactor;
    vec4 emissiveFactor;
    vec4 diffuseFactor;
    vec4 specularFactor;
    float metallicFactor;
    float roughnessFactor;
    float alphaMask;
    float alphaMaskCutoff;
} pbr;

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
layout(location = 3) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;
layout(location = 6) in vec3 lightDir;

layout(location = 0) out vec4 outColor;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float VdotL;                  // cos angle between view direction and light direction
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};


vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

vec4 LINEARtoSRGB(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(1.0 / 2.2));
    return vec4(linOut, srgbIn.w);
}

float rcp(const in float value)
{
    return 1.0 / value;
}

float pow5(const in float value)
{
    return value * value * value * value * value;
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 BRDF_Diffuse_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI;
}

vec3 BRDF_Diffuse_Custom_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI * pow(pbrInputs.NdotV, 0.5 + 0.3 * pbrInputs.perceptualRoughness);
}

// [Gotanda 2012, \"Beyond a Simple Physically Based Blinn-Phong Model in Real-Time\"]
vec3 BRDF_Diffuse_OrenNayar(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float s = a;// / ( 1.29 + 0.5 * a );
    float s2 = s * s;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = pbrInputs.VdotL - pbrInputs.NdotV * pbrInputs.NdotL;
    float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
    float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? 1.0 / max(pbrInputs.NdotL, pbrInputs.NdotV) : 1 );
    return pbrInputs.diffuseColor / PI * ( C1 + C2 ) * ( 1 + pbrInputs.perceptualRoughness * 0.5 );
}

// [Gotanda 2014, \"Designing Reflectance Models for New Consoles\"]
vec3 BRDF_Diffuse_Gotanda(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float a2 = a * a;
    float F0 = 0.04;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = VoL - pbrInputs.NdotV * pbrInputs.NdotL;
    float a2_13 = a2 + 1.36053;
    float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - pbrInputs.NdotV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - pbrInputs.NdotV, 1 + rcp(39*a2*a2+1) ) + 1 );
    //float Fr = ( 1 - 0.36 * a ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( -2.5 * Roughness * ( 1 - NoV ) + 1 );
    float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - pow5( 1 - pbrInputs.NdotL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (pbrInputs.NdotL - 1) ) * pbrInputs.NdotL;
    float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * pbrInputs.NdotV) ) ) * ( 1 - pow( 1 - pbrInputs.NdotL, ( 1 - 0.3726732 * pbrInputs.NdotV * pbrInputs.NdotV ) / ( 0.188566 + 0.38841 * pbrInputs.NdotV ) ) );
    float Bp = Cosri < 0 ? 1.4 * pbrInputs.NdotV * pbrInputs.NdotL * Cosri : Cosri;
    float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
    return pbrInputs.diffuseColor * RECIPROCAL_PI * Lr;
}

vec3 BRDF_Diffuse_Burley(PBRInfo pbrInputs)
{
    float energyBias = mix(pbrInputs.perceptualRoughness, 0.0, 0.5);
    float energyFactor = mix(pbrInputs.perceptualRoughness, 1.0, 1.0 / 1.51);
    float fd90 = energyBias + 2.0 * pbrInputs.VdotH * pbrInputs.VdotH * pbrInputs.perceptualRoughness;
    float f0 = 1.0;
    float lightScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotL, 5.0);
    float viewScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotV, 5.0);

    return pbrInputs.diffuseColor * lightScatter * viewScatter * energyFactor;
}

vec3 BRDF_Diffuse_Disney(PBRInfo pbrInputs)
{
	float Fd90 = 0.5 + 2.0 * pbrInputs.perceptualRoughness * pbrInputs.VdotH * pbrInputs.VdotH;
    vec3 f0 = vec3(0.1);
	vec3 invF0 = vec3(1.0, 1.0, 1.0) - f0;
	float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotV, 5.0 ))) * dim;
	return pbrInputs.diffuseColor * result;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
    //return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance90*pbrInputs.reflectance0) * exp2((-5.55473 * pbrInputs.VdotH - 6.98316) * pbrInputs.VdotH);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
    float NdotL = pbrInputs.NdotL;
    float NdotV = pbrInputs.NdotV;
    float r = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;

    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));
    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));
    return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
    return roughnessSq / (PI * f * f);
}

vec3 BRDF(vec3 v, vec3 n, vec3 l, vec3 h, float perceptualRoughness, float metallic, vec3 specularEnvironmentR0, vec3 specularEnvironmentR90, float alphaRoughness, vec3 diffuseColor, vec3 specularColor, float ao)
{
    vec3 reflection = -normalize(reflect(v, n));
    reflection.y *= -1.0f;

    float NdotL = clamp(dot(n, l), 0.001, 1.0);
    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    float NdotH = clamp(dot(n, h), 0.0, 1.0);
    float LdotH = clamp(dot(l, h), 0.0, 1.0);
    float VdotH = clamp(dot(v, h), 0.0, 1.0);
    float VdotL = clamp(dot(v, l), 0.0, 1.0);

    PBRInfo pbrInputs = PBRInfo(NdotL,
                                NdotV,
                                NdotH,
                                LdotH,
                                VdotH,
                                VdotL,
                                perceptualRoughness,
                                metallic,
                                specularEnvironmentR0,
                                specularEnvironmentR90,
                                alphaRoughness,
                                diffuseColor,
                                specularColor);

    // Calculate the shading terms for the microfacet specular shading model
    vec3 F = specularReflection(pbrInputs);
    float G = geometricOcclusion(pbrInputs);
    float D = microfacetDistribution(pbrInputs);

    const vec3 u_LightColor = vec3(1.0);

    // Calculation of analytical lighting contribution
    vec3 diffuseContrib = (1.0 - F) * BRDF_Diffuse_Disney(pbrInputs);
    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

    color *= ao;

#ifdef VSG_EMISSIVE_MAP
    vec3 emissive = SRGBtoLINEAR(texture(emissiveMap, texCoord0)).rgb * pbr.emissiveFactor.rgb;
#else
    vec3 emissive = pbr.emissiveFactor.rgb;
#endif
    color += emissive;

    return color;
}

float convertMetallic(vec3 diffuse, vec3 specular, float maxSpecular)
{
    float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
    float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);

    if (perceivedSpecular < c_MinRoughness)
    {
        return 0.0;
    }

    float a = c_MinRoughness;
    float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - c_MinRoughness) + perceivedSpecular - 2.0 * c_MinRoughness;
    float c = c_MinRoughness - perceivedSpecular;
    float D = max(b * b - 4.0 * a * c, 0.0);
    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}

void main()
{
    float perceptualRoughness = 0.0;
    float metallic;
    vec3 diffuseColor;
    vec4 baseColor;

    float ambientOcclusion = 1.0;

    vec3 f0 = vec3(0.04);

#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSACLE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s * pbr.baseColorFactor;
        baseColor = vertexColor * vec4(v, v, v, 1.0);
    #else
        baseColor = vertexColor * SRGBtoLINEAR(texture(diffuseMap, texCoord0)) * pbr.baseColorFactor;
    #endif
#else
    baseColor = vertexColor * pbr.baseColorFactor;
#endif

    if (pbr.alphaMask == 1.0f)
    {
        if (baseColor.a < pbr.alphaMaskCutoff)
            discard;
    }


#ifdef VSG_WORKFLOW_SPECGLOSS
    #ifdef VSG_SPECULAR_MAP
        vec3 specular = SRGBtoLINEAR(texture(specularMap, texCoord0)).rgb;
        perceptualRoughness = 1.0 - texture(specularMap, texCoord0).a;
    #else
        vec3 specular = vec3(0.0);
        perceptualRoughness = 0.0;
    #endif

        const float epsilon = 1e-6;

    #ifdef VSG_DIFFUSE_MAP
        vec4 diffuse = SRGBtoLINEAR(texture(diffuseMap, texCoord0));
    #else
        vec4 diffuse = vec4(1.0);
    #endif

        float maxSpecular = max(max(specular.r, specular.g), specular.b);

        // Convert metallic value from specular glossiness inputs
        metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

        vec3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - c_MinRoughness) / max(1 - metallic, epsilon)) * pbr.diffuseFactor.rgb;
        vec3 baseColorSpecularPart = specular - (vec3(c_MinRoughness) * (1 - metallic) * (1 / max(metallic, epsilon))) * pbr.specularFactor.rgb;
        baseColor = vec4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);
#else
        perceptualRoughness = pbr.roughnessFactor;
        metallic = pbr.metallicFactor;

    #ifdef VSG_METALLROUGHNESS_MAP
        vec4 mrSample = texture(mrMap, texCoord0);
        perceptualRoughness = mrSample.g * perceptualRoughness;
        metallic = mrSample.b * metallic;
    #endif
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion = texture(aoMap, texCoord0).r;
#endif

    diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;

    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();
    vec3 v = normalize(viewDir);    // Vector from surface point to camera
    vec3 l = normalize(lightDir);     // Vector from surface point to light
    vec3 h = normalize(l+v);                        // Half vector between both l and v

    vec3 colorFrontFace = BRDF(v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
#ifdef VSG_TWOSIDED
    vec3 colorBackFace = BRDF(v, -n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
    vec3 color = colorFrontFace+colorBackFace;
#else
    vec3 color = colorFrontFace;
#endif

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
}
"
                  hints id=21
                  SPIRVSize 4330
                  SPIRV 119734787 65536 524298 678 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 786447 4 4 1852399981 0 74 459 588
                   592 658 674 677 196624 4 7 196611 2 450 589828 1096764487
                   1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 458757
                   11 1162758476 1869894209 1111970387 879130152 59 262149 10 1650946675 28233 327685 15
                   1316250983 1634562671 10348 262149 17 1230127696 7300718 327686 17 0 1953457230 76
                   327686 17 1 1953457230 86 327686 17 2 1953457230 72 327686 17
                   3 1953457228 72 327686 17 4 1953457238 72 327686 17 5 1953457238
                   76 524294 17 6 1668441456 1970565221 1867672673 1852335989 7566181 393222 17 7
                   1635018093 1936027244 115 458758 17 8 1818649970 1635017573 811950958 0 458758 17
                   9 1818649970 1635017573 962945902 48 458758 17 10 1752198241 1970229857 1701734503 29555
                   458758 17 11 1717987684 1130722165 1919904879 0 458758 17 12 1667592307 1918987381
                   1869377347 114 1441797 21 1178882626 1718174815 1702065510 1936278623 679044462 1970435187 1345156195 1850298946
                   1714253670 828779825 758212141 1714237798 828779825 758212141 1982673254 1982673766 1714238310 1719020849 1719020851 3879219
                   327685 20 1232233072 1953853550 115 1441797 24 1667592307 1918987381 1818649938 1769235301 1932029551
                   1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827
                   862352941 862352941 15153 327685 23 1232233072 1953853550 115 1441797 28 1836016999 1769108581
                   1667452771 1769174380 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798
                   1719020849 1719020851 828779827 862352941 862352941 15153 327685 27 1232233072 1953853550 115 1507333
                   31 1919117677 1667327599 1766093925 1769108595 1769239906 1932029551 1668641396 1112550772 1718503762 828779887 758212141
                   1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685 30
                   1232233072 1953853550 115 983045 48 1178882626 862352936 862352955 862352955 862352955 993093179 1983590758
                   1983591270 1715155814 1719024433 1719024435 828783411 59 196613 36 118 196613 37 110
                   196613 38 108 196613 39 104 458757 40 1668441456 1970565221 1867672673 1852335989
                   7566181 327685 41 1635018093 1667853420 0 524293 42 1667592307 1918987381 1769369157 1835954034
                   1383362149 48 524293 43 1667592307 1918987381 1769369157 1835954034 1383362149 12345 393221 44
                   1752198241 1970229857 1701734503 29555 393221 45 1717987684 1130722165 1919904879 0 393221 46
                   1667592307 1918987381 1869377347 114 196613 47 28513 589829 54 1986948963 1299477093 1818326117
                   677603692 993224310 993224310 3879270 262149 51 1717987684 6648693 327685 52 1667592307 1918987381
                   0 327685 53 1400398189 1969448304 7496044 262149 56 1332636012 29813 327685 74
                   1836216174 1766091873 114 262149 79 809067590 0 196613 95 12390 262149 98
                   1182166633 48 196613 103 7170404 262149 115 1970496882 29804 262149 171 1953457230
                   76 262149 174 1953457230 86 196613 177 114 393221 184 1702130785 1952544110
                   1282305897 0 393221 199 1702130785 1952544110 1450078057 0 327685 219 1735749490 1936027240
                   7426931 196613 225 102 327685 247 1818649970 1769235301 28271 262149 258 1953457230
                   76 262149 264 1953457230 86 262149 270 1953457230 72 262149 276 1953457228
                   72 262149 281 1953457238 72 262149 286 1953457238 76 327685 291 1232233072
                   1953853550 115 196613 306 70 262149 307 1634886000 109 196613 310 71
                   262149 311 1634886000 109 196613 314 68 262149 315 1634886000 109 393221
                   318 1717987684 1130722165 1920233071 25193 262149 322 1634886000 109 327685 326 1667592307
                   1953394499 6449522 262149 339 1869377379 114 327685 349 1936289125 1702259059 0 262149
                   350 1148346960 6386785 458758 350 0 1702060386 1869377347 1667319410 7499636 458758 350
                   1 1936289125 1702259059 1952670022 29295 458758 350 2 1717987684 1181053813 1869898593 114
                   458758 350 3 1667592307 1918987381 1952670022 29295 458758 350 4 1635018093 1667853420
                   1952670022 29295 458758 350 5 1735749490 1936027240 1667319411 7499636 393222 350 6
                   1752198241 1935756641 107 458758 350 7 1752198241 1935756641 1953842027 6710895 196613 352
                   7496304 458757 363 1668441456 1702259045 1718174820 1702065510 0 458757 388 1668441456 1702259045
                   1701860196 1634497891 114 196613 417 97 196613 418 98 196613 429 99
                   196613 432 68 458757 453 1668441456 1970565221 1867672673 1852335989 7566181 458757 454
                   1768058209 1333030501 1970037603 1852795251 0 196613 455 12390 327685 457 1702060386 1869377347
                   114 327685 459 1953654134 1866692709 7499628 327685 479 1667592307 1918987381 0 262149
                   481 1717987684 6648693 327685 483 1400398189 1969448304 7496044 327685 492 1635018093 1667853420
                   0 262149 493 1634886000 109 262149 496 1634886000 109 262149 498 1634886000
                   109 524293 501 1702060386 1869377347 1718174834 1702065510 1953653072 0 524293 517 1702060386
                   1869377347 1701860210 1634497891 1918980210 116 393221 545 1717987684 1130722165 1919904879 0 393221
                   555 1752198241 1970229857 1701734503 29555 393221 559 1667592307 1918987381 1869377347 114 327685
                   566 1818649970 1635017573 6644590 393221 575 1818649970 1635017573 962945902 48 524293 580
                   1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 582 1667592307 1918987381 1769369157 1835954034
                   1383362149 12345 196613 585 110 196613 587 118 262149 588 2003134838 7498052
                   196613 591 108 327685 592 1751607660 1919501428 0 196613 595 104 393221
                   600 1869377379 1869760114 1632007278 25955 262149 601 1634886000 109 262149 603 1634886000
                   109 262149 605 1634886000 109 262149 607 1634886000 109 262149 609 1634886000
                   109 262149 611 1634886000 109 262149 613 1634886000 109 262149 615 1634886000
                   109 262149 617 1634886000 109 262149 619 1634886000 109 262149 621 1634886000
                   109 262149 623 1634886000 109 393221 626 1869377379 1667318386 1667319403 101 262149
                   629 1634886000 109 262149 631 1634886000 109 262149 632 1634886000 109 262149
                   634 1634886000 109 262149 636 1634886000 109 262149 638 1634886000 109 262149
                   640 1634886000 109 262149 642 1634886000 109 262149 644 1634886000 109 262149
                   646 1634886000 109 262149 648 1634886000 109 262149 650 1634886000 109 262149
                   653 1869377379 114 327685 658 1131705711 1919904879 0 262149 666 1634886000 109
                   393221 671 1752397136 1936617283 1953390964 115 393222 671 0 1785688688 1769235301 28271
                   393222 671 1 1701080941 1701402220 119 196613 673 25456 262149 674 1348827493
                   29551 327685 677 1131963764 1685221231 48 262215 74 30 1 327752 350
                   0 35 0 327752 350 1 35 16 327752 350 2 35
                   32 327752 350 3 35 48 327752 350 4 35 64 327752
                   350 5 35 68 327752 350 6 35 72 327752 350 7
                   35 76 196679 350 2 262215 352 34 0 262215 352 33
                   10 262215 459 30 2 262215 588 30 5 262215 592 30
                   6 262215 658 30 0 262216 671 0 5 327752 671 0
                   35 0 327752 671 0 7 16 262216 671 1 5 327752
                   671 1 35 64 327752 671 1 7 16 196679 671 2
                   262215 674 30 0 262215 677 30 3 131091 2 196641 3
                   2 196630 6 32 262167 7 6 4 262176 8 7 7
                   262177 9 7 8 262167 13 6 3 196641 14 13 983070
                   17 6 6 6 6 6 6 6 6 13 13 6
                   13 13 262176 18 7 17 262177 19 13 18 262177 26
                   6 18 262176 33 7 13 262176 34 7 6 983073 35
                   13 33 33 33 33 34 34 33 33 34 33 33
                   34 393249 50 6 33 33 34 262187 6 59 1055439407 393260
                   13 60 59 59 59 262165 63 32 0 262187 63 64
                   3 262176 73 1 13 262203 73 74 1 262187 6 80
                   1056964608 262187 6 81 1073741824 262165 82 32 1 262187 82 83
                   6 262187 82 87 4 262187 6 96 1036831949 393260 13 97
                   96 96 96 262187 6 99 1065353216 393260 13 100 99 99
                   99 262187 63 104 0 262187 63 107 1 262187 63 110
                   2 262187 82 118 0 262187 6 122 1084227584 262187 82 128
                   1 262187 82 138 11 262187 82 145 8 262187 82 148
                   9 262187 6 157 3232874585 262187 6 161 1088386572 262187 82 178
                   10 262187 82 226 2 262187 6 239 1078530011 262187 6 253
                   3212836864 262187 6 262 981668463 262187 6 274 0 262187 6 332
                   1082130432 655390 350 7 7 7 7 6 6 6 6 262176
                   351 2 350 262203 351 352 2 262176 353 2 7 262187
                   6 364 1050220167 262187 6 371 1058424226 262187 6 379 1038710997 262187
                   6 411 1025758986 131092 412 262187 6 423 1064682127 262187 6 427
                   1034147594 393260 13 456 411 411 411 262176 458 1 7 262203
                   458 459 1 262176 464 2 6 262187 82 472 7 393260
                   13 480 274 274 274 458796 7 482 99 99 99 99
                   262187 6 509 897988541 262187 82 526 3 262187 6 577 1103626240
                   262203 73 588 1 262203 73 592 1 262176 657 3 7
                   262203 657 658 3 262187 6 668 1050868099 262187 6 669 1042479491
                   262168 670 7 4 262174 671 670 670 262176 672 9 671
                   262203 672 673 9 262203 73 674 1 262167 675 6 2
                   262176 676 1 675 262203 676 677 1 327734 2 4 0
                   3 131320 5 262203 34 453 7 262203 34 454 7 262203
                   33 455 7 262203 8 457 7 262203 33 479 7 262203
                   8 481 7 262203 34 483 7 262203 34 492 7 262203
                   33 493 7 262203 33 496 7 262203 34 498 7 262203
                   33 501 7 262203 33 517 7 262203 33 545 7 262203
                   34 555 7 262203 33 559 7 262203 34 566 7 262203
                   34 575 7 262203 33 580 7 262203 33 582 7 262203
                   33 585 7 262203 33 587 7 262203 33 591 7 262203
                   33 595 7 262203 33 600 7 262203 33 601 7 262203
                   33 603 7 262203 33 605 7 262203 33 607 7 262203
                   34 609 7 262203 34 611 7 262203 33 613 7 262203
                   33 615 7 262203 34 617 7 262203 33 619 7 262203
                   33 621 7 262203 34 623 7 262203 33 626 7 262203
                   33 629 7 262203 33 631 7 262203 33 632 7 262203
                   33 634 7 262203 34 636 7 262203 34 638 7 262203
                   33 640 7 262203 33 642 7 262203 34 644 7 262203
                   33 646 7 262203 33 648 7 262203 34 650 7 262203
                   33 653 7 262203 8 666 7 196670 453 274 196670 454
                   99 196670 455 456 262205 7 460 459 327745 353 461 352
                   118 262205 7 462 461 327813 7 463 460 462 196670 457
                   463 327745 464 465 352 83 262205 6 466 465 327860 412
                   467 466 99 196855 469 0 262394 467 468 469 131320 468
                   327745 34 470 457 64 262205 6 471 470 327745 464 473
                   352 472 262205 6 474 473 327864 412 475 471 474 196855
                   477 0 262394 475 476 477 131320 476 65788 131320 477 131321
                   469 131320 469 196670 479 480 196670 453 274 196670 481 482
                   327745 34 484 479 104 262205 6 485 484 327745 34 486
                   479 107 262205 6 487 486 458764 6 488 1 40 485
                   487 327745 34 489 479 110 262205 6 490 489 458764 6
                   491 1 40 488 490 196670 483 491 262205 7 494 481
                   524367 13 495 494 494 0 1 2 196670 493 495 262205
                   13 497 479 196670 496 497 262205 6 499 483 196670 498
                   499 458809 6 500 54 493 496 498 196670 492 500 262205
                   7 502 481 524367 13 503 502 502 0 1 2 262205
                   6 504 483 327811 6 505 99 504 327816 6 506 505
                   423 262205 6 507 492 327811 6 508 99 507 458764 6
                   510 1 40 508 509 327816 6 511 506 510 327822 13
                   512 503 511 327745 353 513 352 226 262205 7 514 513
                   524367 13 515 514 514 0 1 2 327813 13 516 512
                   515 196670 501 516 262205 13 518 479 262205 6 519 492
                   327811 6 520 99 519 327822 13 521 456 520 262205 6
                   522 492 458764 6 523 1 40 522 509 327816 6 524
                   99 523 327822 13 525 521 524 327745 353 527 352 526
                   262205 7 528 527 524367 13 529 528 528 0 1 2
                   327813 13 530 525 529 327811 13 531 518 530 196670 517
                   531 262205 13 532 501 262205 13 533 517 262205 6 534
                   492 262205 6 535 492 327813 6 536 534 535 393296 13
                   537 536 536 536 524300 13 538 1 46 532 533 537
                   327745 34 539 481 64 262205 6 540 539 327761 6 541
                   538 0 327761 6 542 538 1 327761 6 543 538 2
                   458832 7 544 541 542 543 540 196670 457 544 262205 7
                   546 457 524367 13 547 546 546 0 1 2 262205 13
                   548 455 327811 13 549 100 548 327813 13 550 547 549
                   196670 545 550 262205 6 551 492 327811 6 552 99 551
                   262205 13 553 545 327822 13 554 553 552 196670 545 554
                   262205 6 556 453 262205 6 557 453 327813 6 558 556
                   557 196670 555 558 262205 13 560 455 262205 7 561 457
                   524367 13 562 561 561 0 1 2 262205 6 563 492
                   393296 13 564 563 563 563 524300 13 565 1 46 560
                   562 564 196670 559 565 327745 34 567 559 104 262205 6
                   568 567 327745 34 569 559 107 262205 6 570 569 458764
                   6 571 1 40 568 570 327745 34 572 559 110 262205
                   6 573 572 458764 6 574 1 40 571 573 196670 566
                   574 262205 6 576 566 327813 6 578 576 577 524300 6
                   579 1 43 578 274 99 196670 575 579 262205 13 581
                   559 196670 580 581 262205 6 583 575 327822 13 584 100
                   583 196670 582 584 262201 13 586 15 196670 585 586 262205
                   13 589 588 393228 13 590 1 69 589 196670 587 590
                   262205 13 593 592 393228 13 594 1 69 593 196670 591
                   594 262205 13 596 591 262205 13 597 587 327809 13 598
                   596 597 393228 13 599 1 69 598 196670 595 599 262205
                   13 602 587 196670 601 602 262205 13 604 585 196670 603
                   604 262205 13 606 591 196670 605 606 262205 13 608 595
                   196670 607 608 262205 6 610 453 196670 609 610 262205 6
                   612 492 196670 611 612 262205 13 614 580 196670 613 614
                   262205 13 616 582 196670 615 616 262205 6 618 555 196670
                   617 618 262205 13 620 545 196670 619 620 262205 13 622
                   559 196670 621 622 262205 6 624 454 196670 623 624 1048633
                   13 625 48 601 603 605 607 609 611 613 615 617
                   619 621 623 196670 600 625 262205 13 627 585 262271 13
                   628 627 262205 13 630 587 196670 629 630 196670 631 628
                   262205 13 633 591 196670 632 633 262205 13 635 595 196670
                   634 635 262205 6 637 453 196670 636 637 262205 6 639
                   492 196670 638 639 262205 13 641 580 196670 640 641 262205
                   13 643 582 196670 642 643 262205 6 645 555 196670 644
                   645 262205 13 647 545 196670 646 647 262205 13 649 559
                   196670 648 649 262205 6 651 454 196670 650 651 1048633 13
                   652 48 629 631 632 634 636 638 640 642 644 646
                   648 650 196670 626 652 262205 13 654 600 262205 13 655
                   626 327809 13 656 654 655 196670 653 656 262205 13 659
                   653 327745 34 660 457 64 262205 6 661 660 327761 6
                   662 659 0 327761 6 663 659 1 327761 6 664 659
                   2 458832 7 665 662 663 664 661 196670 666 665 327737
                   7 667 11 666 196670 658 667 65789 65592 327734 7 11
                   0 9 196663 8 10 131320 12 262203 33 56 7 262205
                   7 57 10 524367 13 58 57 57 0 1 2 458764
                   13 61 1 26 58 60 196670 56 61 262205 13 62
                   56 327745 34 65 10 64 262205 6 66 65 327761 6
                   67 62 0 327761 6 68 62 1 327761 6 69 62
                   2 458832 7 70 67 68 69 66 131326 70 65592 327734
                   13 15 0 14 131320 16 262205 13 75 74 393228 13
                   76 1 69 75 131326 76 65592 327734 13 21 0 19
                   196663 18 20 131320 22 262203 34 79 7 262203 33 95
                   7 262203 33 98 7 262203 34 103 7 262203 34 115
                   7 327745 34 84 20 83 262205 6 85 84 327813 6
                   86 81 85 327745 34 88 20 87 262205 6 89 88
                   327813 6 90 86 89 327745 34 91 20 87 262205 6
                   92 91 327813 6 93 90 92 327809 6 94 80 93
                   196670 79 94 196670 95 97 262205 13 101 95 327811 13
                   102 100 101 196670 98 102 327745 34 105 98 104 262205
                   6 106 105 327745 34 108 98 107 262205 6 109 108
                   327745 34 111 98 110 262205 6 112 111 458764 6 113
                   1 37 109 112 458764 6 114 1 37 106 113 196670
                   103 114 262205 6 116 79 327811 6 117 116 99 327745
                   34 119 20 118 262205 6 120 119 327811 6 121 99
                   120 458764 6 123 1 26 121 122 327813 6 124 117
                   123 327809 6 125 99 124 262205 6 126 79 327811 6
                   127 126 99 327745 34 129 20 128 262205 6 130 129
                   327811 6 131 99 130 458764 6 132 1 26 131 122
                   327813 6 133 127 132 327809 6 134 99 133 327813 6
                   135 125 134 262205 6 136 103 327813 6 137 135 136
                   196670 115 137 327745 33 139 20 138 262205 13 140 139
                   262205 6 141 115 327822 13 142 140 141 131326 142 65592
                   327734 13 24 0 19 196663 18 23 131320 25 327745 33
                   146 23 145 262205 13 147 146 327745 33 149 23 148
                   262205 13 150 149 327745 33 151 23 148 262205 13 152
                   151 327745 33 153 23 145 262205 13 154 153 327813 13
                   155 152 154 327811 13 156 150 155 327745 34 158 23
                   87 262205 6 159 158 327813 6 160 157 159 327811 6
                   162 160 161 327745 34 163 23 87 262205 6 164 163
                   327813 6 165 162 164 393228 6 166 1 29 165 327822
                   13 167 156 166 327809 13 168 147 167 131326 168 65592
                   327734 6 28 0 26 196663 18 27 131320 29 262203 34
                   171 7 262203 34 174 7 262203 34 177 7 262203 34
                   184 7 262203 34 199 7 327745 34 172 27 118 262205
                   6 173 172 196670 171 173 327745 34 175 27 128 262205
                   6 176 175 196670 174 176 327745 34 179 27 178 262205
                   6 180 179 327745 34 181 27 178 262205 6 182 181
                   327813 6 183 180 182 196670 177 183 262205 6 185 171
                   327813 6 186 81 185 262205 6 187 171 262205 6 188
                   177 262205 6 189 177 327811 6 190 99 189 262205 6
                   191 171 262205 6 192 171 327813 6 193 191 192 327813
                   6 194 190 193 327809 6 195 188 194 393228 6 196
                   1 31 195 327809 6 197 187 196 327816 6 198 186
                   197 196670 184 198 262205 6 200 174 327813 6 201 81
                   200 262205 6 202 174 262205 6 203 177 262205 6 204
                   177 327811 6 205 99 204 262205 6 206 174 262205 6
                   207 174 327813 6 208 206 207 327813 6 209 205 208
                   327809 6 210 203 209 393228 6 211 1 31 210 327809
                   6 212 202 211 327816 6 213 201 212 196670 199 213
                   262205 6 214 184 262205 6 215 199 327813 6 216 214
                   215 131326 216 65592 327734 6 31 0 26 196663 18 30
                   131320 32 262203 34 219 7 262203 34 225 7 327745 34
                   220 30 178 262205 6 221 220 327745 34 222 30 178
                   262205 6 223 222 327813 6 224 221 223 196670 219 224
                   327745 34 227 30 226 262205 6 228 227 262205 6 229
                   219 327813 6 230 228 229 327745 34 231 30 226 262205
                   6 232 231 327811 6 233 230 232 327745 34 234 30
                   226 262205 6 235 234 327813 6 236 233 235 327809 6
                   237 236 99 196670 225 237 262205 6 238 219 262205 6
                   240 225 327813 6 241 239 240 262205 6 242 225 327813
                   6 243 241 242 327816 6 244 238 243 131326 244 65592
                   327734 13 48 0 35 196663 33 36 196663 33 37 196663
                   33 38 196663 33 39 196663 34 40 196663 34 41 196663
                   33 42 196663 33 43 196663 34 44 196663 33 45 196663
                   33 46 196663 34 47 131320 49 262203 33 247 7 262203
                   34 258 7 262203 34 264 7 262203 34 270 7 262203
                   34 276 7 262203 34 281 7 262203 34 286 7 262203
                   18 291 7 262203 33 306 7 262203 18 307 7 262203
                   34 310 7 262203 18 311 7 262203 34 314 7 262203
                   18 315 7 262203 33 318 7 262203 18 322 7 262203
                   33 326 7 262203 33 339 7 262203 33 349 7 262205
                   13 248 36 262205 13 249 37 458764 13 250 1 71
                   248 249 393228 13 251 1 69 250 262271 13 252 251
                   196670 247 252 327745 34 254 247 107 262205 6 255 254
                   327813 6 256 255 253 327745 34 257 247 107 196670 257
                   256 262205 13 259 37 262205 13 260 38 327828 6 261
                   259 260 524300 6 263 1 43 261 262 99 196670 258
                   263 262205 13 265 37 262205 13 266 36 327828 6 267
                   265 266 393228 6 268 1 4 267 524300 6 269 1
                   43 268 262 99 196670 264 269 262205 13 271 37 262205
                   13 272 39 327828 6 273 271 272 524300 6 275 1
                   43 273 274 99 196670 270 275 262205 13 277 38 262205
                   13 278 39 327828 6 279 277 278 524300 6 280 1
                   43 279 274 99 196670 276 280 262205 13 282 36 262205
                   13 283 39 327828 6 284 282 283 524300 6 285 1
                   43 284 274 99 196670 281 285 262205 13 287 36 262205
                   13 288 38 327828 6 289 287 288 524300 6 290 1
                   43 289 274 99 196670 286 290 262205 6 292 258 262205
                   6 293 264 262205 6 294 270 262205 6 295 276 262205
                   6 296 281 262205 6 297 286 262205 6 298 40 262205
                   6 299 41 262205 13 300 42 262205 13 301 43 262205
                   6 302 44 262205 13 303 45 262205 13 304 46 1048656
                   17 305 292 293 294 295 296 297 298 299 300 301
                   302 303 304 196670 291 305 262205 17 308 291 196670 307
                   308 327737 13 309 24 307 196670 306 309 262205 17 312
                   291 196670 311 312 327737 6 313 28 311 196670 310 313
                   262205 17 316 291 196670 315 316 327737 6 317 31 315
                   196670 314 317 262205 13 319 306 393296 13 320 99 99
                   99 327811 13 321 320 319 262205 17 323 291 196670 322
                   323 327737 13 324 21 322 327813 13 325 321 324 196670
                   318 325 262205 13 327 306 262205 6 328 310 327822 13
                   329 327 328 262205 6 330 314 327822 13 331 329 330
                   262205 6 333 258 327813 6 334 332 333 262205 6 335
                   264 327813 6 336 334 335 393296 13 337 336 336 336
                   327816 13 338 331 337 196670 326 338 262205 6 340 258
                   327822 13 341 100 340 262205 13 342 318 262205 13 343
                   326 327809 13 344 342 343 327813 13 345 341 344 196670
                   339 345 262205 6 346 47 262205 13 347 339 327822 13
                   348 347 346 196670 339 348 327745 353 354 352 128 262205
                   7 355 354 524367 13 356 355 355 0 1 2 196670
                   349 356 262205 13 357 349 262205 13 358 339 327809 13
                   359 358 357 196670 339 359 262205 13 360 339 131326 360
                   65592 327734 6 54 0 50 196663 33 51 196663 33 52
                   196663 34 53 131320 55 262203 34 363 7 262203 34 388
                   7 262203 34 417 7 262203 34 418 7 262203 34 429
                   7 262203 34 432 7 327745 34 365 51 104 262205 6
                   366 365 327813 6 367 364 366 327745 34 368 51 104
                   262205 6 369 368 327813 6 370 367 369 327745 34 372
                   51 107 262205 6 373 372 327813 6 374 371 373 327745
                   34 375 51 107 262205 6 376 375 327813 6 377 374
                   376 327809 6 378 370 377 327745 34 380 51 110 262205
                   6 381 380 327813 6 382 379 381 327745 34 383 51
                   110 262205 6 384 383 327813 6 385 382 384 327809 6
                   386 378 385 393228 6 387 1 31 386 196670 363 387
                   327745 34 389 52 104 262205 6 390 389 327813 6 391
                   364 390 327745 34 392 52 104 262205 6 393 392 327813
                   6 394 391 393 327745 34 395 52 107 262205 6 396
                   395 327813 6 397 371 396 327745 34 398 52 107 262205
                   6 399 398 327813 6 400 397 399 327809 6 401 394
                   400 327745 34 402 52 110 262205 6 403 402 327813 6
                   404 379 403 327745 34 405 52 110 262205 6 406 405
                   327813 6 407 404 406 327809 6 408 401 407 393228 6
                   409 1 31 408 196670 388 409 262205 6 410 388 327864
                   412 413 410 411 196855 415 0 262394 413 414 415 131320
                   414 131326 274 131320 415 196670 417 411 262205 6 419 363
                   262205 6 420 53 327811 6 421 99 420 327813 6 422
                   419 421 327816 6 424 422 423 262205 6 425 388 327809
                   6 426 424 425 327811 6 428 426 427 196670 418 428
                   262205 6 430 388 327811 6 431 411 430 196670 429 431
                   262205 6 433 418 262205 6 434 418 327813 6 435 433
                   434 262205 6 436 417 327813 6 437 332 436 262205 6
                   438 429 327813 6 439 437 438 327811 6 440 435 439
                   458764 6 441 1 40 440 274 196670 432 441 262205 6
                   442 418 262271 6 443 442 262205 6 444 432 393228 6
                   445 1 31 444 327809 6 446 443 445 262205 6 447
                   417 327813 6 448 81 447 327816 6 449 446 448 524300
                   6 450 1 43 449 274 99 131326 450 65592
                }
                NumSpecializationConstants 0
              }
              pipelineStates 6
              vsg::GraphicsPipelineState id=24 vsg::VertexInputState
              {
                NumUserObjects 0
                NumBindings 4
                binding 0
                stride 12
                inputRate 0
                binding 1
                stride 12
                inputRate 0
                binding 2
                stride 8
                inputRate 0
                binding 3
                stride 16
                inputRate 1
                NumAttributes 4
                location 0
                binding 0
                format 106
                offset 0
                location 1
                binding 1
                format 106
                offset 0
                location 2
                binding 2
                format 103
                offset 0
                location 3
                binding 3
                format 109
                offset 0
              }
              vsg::GraphicsPipelineState id=25 vsg::InputAssemblyState
              {
                NumUserObjects 0
                topology 3
                primitiveRestartEnable 0
              }
              vsg::GraphicsPipelineState id=26 vsg::RasterizationState
              {
                NumUserObjects 0
                depthClampEnable 0
                rasterizerDiscardEnable 0
                polygonMode 0
                cullMode 0
                frontFace 0
                depthBiasEnable 0
                depthBiasConstantFactor 1
                depthBiasClamp 0
                depthBiasSlopeFactor 1
                lineWidth 1
              }
              vsg::GraphicsPipelineState id=27 vsg::MultisampleState
              {
                NumUserObjects 0
                rasterizationSamples 1
                sampleShadingEnable 0
                minSampleShading 0
                NumSampleMask 0
                alphaToCoverageEnable 0
                alphaToOneEnable 0
              }
              vsg::GraphicsPipelineState id=28 vsg::ColorBlendState
              {
                NumUserObjects 0
                logicOp 3
                logicOpEnable 0
                NumColorBlendAttachments 1
                blendEnable 0
                srcColorBlendFactor 6
                dstColorBlendFactor 7
                colorBlendOp 0
                srcAlphaBlendFactor 6
                dstAlphaBlendFactor 7
                alphaBlendOp 1
                colorWriteMask 15
                blendConstants 0 0 0 0
              }
              vsg::GraphicsPipelineState id=29 vsg::DepthStencilState
              {
                NumUserObjects 0
                depthTestEnable 1
                depthWriteEnable 1
                depthCompareOp 4
                depthBoundsTestEnable 0
                stencilTestEnable 0
                front.failOp 0
                front.passOp 0
                front.depthFailOp 0
                front.compareOp 0
                front.compareMask 0
                front.writeMask 0
                front.reference 0
                back.failOp 0
                back.passOp 0
                back.depthFailOp 0
                back.compareOp 0
                back.compareMask 0
                back.writeMask 0
                back.reference 0
                minDepthBounds 0
                maxDepthBounds 1
              }
              subpass 0
            }
          }
          vsg::StateCommand id=30 vsg::BindDescriptorSet
          {
            NumUserObjects 0
            slot 1
            layout id=17
            firstSet 0
            descriptorSet id=31 vsg::DescriptorSet
            {
              NumUserObjects 0
              setLayout id=18
              descriptors 1
              vsg::Descriptor id=32 vsg::DescriptorBuffer
              {
                NumUserObjects 0
                dstBinding 10
                dstArrayElement 0
                NumData 1
                Data id=33 vsg::PbrMaterialValue
                {
                  NumUserObjects 0
                  Layout 0 0 0 1 1 1 0 -1
                  Value                  baseColorFactor 1 1 1 1
                  emissiveFactor 0 0 0 1
                  diffuseFactor 1 1 1 1
                  specularFactor 0 0 0 1
                  metallicFactor 1
                  roughnessFactor 1
                  alphaMask 1
                  alphaMaskCutoff 0.5

                }
              }
            }
          }
          prototypeArrayState id=0
        }
        matrix 0.025 0 0 0 0 -0.1 -8.74228e-09 0 0 2.18557e-09 -0.025 0
         0 0.09 0 1
        subgraphRequiresLocalFrustum 1
      }
      matrix 1 0 0 0 0 1 0 0 0 0 1 0
       0 0 0 1
      subgraphRequiresLocalFrustum 1
    }
    stateCommands 2
    vsg::StateCommand id=34 vsg::BindGraphicsPipeline
    {
      NumUserObjects 0
      slot 0
      pipeline id=35 vsg::GraphicsPipeline
      {
        NumUserObjects 0
        layout id=36 vsg::PipelineLayout
        {
          NumUserObjects 0
          Flags 0
          NumDescriptorSetLayouts 1
          DescriptorSetLayout id=37 vsg::DescriptorSetLayout
          {
            NumUserObjects 0
            NumDescriptorSetLayoutBindings 1
            binding 10
            descriptorType 6
            descriptorCount 1
            stageFlags 16
          }
          NumPushConstantRanges 1
          stageFlags 1
          offset 0
          size 128
        }
        stages 2
        vsg::ShaderStage id=38 vsg::ShaderStage
        {
          NumUserObjects 0
          stage 1
          entryPointName "main"
          module id=39 vsg::ShaderModule
          {
            NumUserObjects 0
            Source "#version 450
#extension GL_ARB_separate_shader_objects : enable

#pragma import_defines (VSG_INSTANCE_POSITIONS, VSG_DISPLACEMENT_MAP)

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

#ifdef VSG_DISPLACEMENT_MAP
layout(binding = 6) uniform sampler2D displacementMap;
#endif

layout(location = 0) in vec3 vsg_Vertex;
layout(location = 1) in vec3 vsg_Normal;
layout(location = 2) in vec2 vsg_TexCoord0;
layout(location = 3) in vec4 vsg_Color;

#ifdef VSG_INSTANCE_POSITIONS
layout(location = 4) in vec3 vsg_position;
#endif

layout(location = 0) out vec3 eyePos;
layout(location = 1) out vec3 normalDir;
layout(location = 2) out vec4 vertexColor;
layout(location = 3) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;
layout(location = 6) out vec3 lightDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    vec4 vertex = vec4(vsg_Vertex, 1.0);
    vec4 normal = vec4(vsg_Normal, 0.0);

#ifdef VSG_DISPLACEMENT_MAP
    // TODO need to pass as as uniform or per instance attributes
    vec3 scale = vec3(1.0, 1.0, 1.0);

    vertex.xyz = vertex.xyz + vsg_Normal * (texture(displacementMap, vsg_TexCoord0.st).s * scale.z);

    float s_delta = 0.01;
    float width = 0.0;

    float s_left = max(vsg_TexCoord0.s - s_delta, 0.0);
    float s_right = min(vsg_TexCoord0.s + s_delta, 1.0);
    float t_center = vsg_TexCoord0.t;
    float delta_left_right = (s_right - s_left) * scale.x;
    float dz_left_right = (texture(displacementMap, vec2(s_right, t_center)).s - texture(displacementMap, vec2(s_left, t_center)).s) * scale.z;

    // TODO need to handle different origins of displacementMap vs diffuseMap etc,
    float t_delta = s_delta;
    float t_bottom = max(vsg_TexCoord0.t - t_delta, 0.0);
    float t_top = min(vsg_TexCoord0.t + t_delta, 1.0);
    float s_center = vsg_TexCoord0.s;
    float delta_bottom_top = (t_top - t_bottom) * scale.y;
    float dz_bottom_top = (texture(displacementMap, vec2(s_center, t_top)).s - texture(displacementMap, vec2(s_center, t_bottom)).s) * scale.z;

    vec3 dx = normalize(vec3(delta_left_right, 0.0, dz_left_right));
    vec3 dy = normalize(vec3(0.0, delta_bottom_top, -dz_bottom_top));
    vec3 dz = normalize(cross(dx, dy));

    normal.xyz = normalize(dx * vsg_Normal.x + dy * vsg_Normal.y + dz * vsg_Normal.z);
#endif


#ifdef VSG_INSTANCE_POSITIONS
   vertex.xyz = vertex.xyz + vsg_position;
#endif

    gl_Position = (pc.projection * pc.modelView) * vertex;

    eyePos = vec4(pc.modelView * vertex).xyz;

    vec4 lpos = /*vsg_LightSource.position*/ vec4(0.0, 0.0, 1.0, 0.0);

    viewDir = - (pc.modelView * vertex).xyz;
    normalDir = (pc.modelView * normal).xyz;

    if (lpos.w == 0.0)
        lightDir = lpos.xyz;
    else
        lightDir = lpos.xyz + viewDir;

    vertexColor = vsg_Color;
    texCoord0 = vsg_TexCoord0;
}
"
            hints id=0
            SPIRVSize 708
            SPIRV 119734787 65536 524298 101 0 131089 1 393227 1 1280527431 1685353262 808793134
             0 196622 0 1 1048591 0 4 1852399981 0 12 20 29
             48 61 68 83 91 93 97 99 196611 2 450 589828
             1096764487 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0
             262149 9 1953654134 30821 327685 12 1600615286 1953654102 30821 262149 19 1836216174
             27745 327685 20 1600615286 1836216142 27745 393221 27 1348430951 1700164197 2019914866 0
             393222 27 0 1348430951 1953067887 7237481 196613 29 0 393221 33 1752397136
             1936617283 1953390964 115 393222 33 0 1785688688 1769235301 28271 393222 33 1
             1701080941 1701402220 119 196613 35 25456 262149 48 1348827493 29551 262149 59
             1936683116 0 262149 61 2003134838 7498052 327685 68 1836216174 1766091873 114 327685
             83 1751607660 1919501428 0 327685 91 1953654134 1866692709 7499628 327685 93 1600615286
             1869377347 114 327685 97 1131963764 1685221231 48 393221 99 1600615286 1131963732 1685221231
             48 262215 12 30 0 262215 20 30 1 327752 27 0
             11 0 196679 27 2 262216 33 0 5 327752 33 0
             35 0 327752 33 0 7 16 262216 33 1 5 327752
             33 1 35 64 327752 33 1 7 16 196679 33 2
             262215 48 30 0 262215 61 30 5 262215 68 30 1
             262215 83 30 6 262215 91 30 2 262215 93 30 3
             262215 97 30 3 262215 99 30 2 131091 2 196641 3
             2 196630 6 32 262167 7 6 4 262176 8 7 7
             262167 10 6 3 262176 11 1 10 262203 11 12 1
             262187 6 14 1065353216 262203 11 20 1 262187 6 22 0
             196638 27 7 262176 28 3 27 262203 28 29 3 262165
             30 32 1 262187 30 31 0 262168 32 7 4 262174
             33 32 32 262176 34 9 33 262203 34 35 9 262176
             36 9 32 262187 30 39 1 262176 45 3 7 262176
             47 3 10 262203 47 48 3 458796 7 60 22 22
             14 22 262203 47 61 3 262203 47 68 3 262165 74
             32 0 262187 74 75 3 262176 76 7 6 131092 79
             262203 47 83 3 262203 45 91 3 262176 92 1 7
             262203 92 93 1 262167 95 6 2 262176 96 3 95
             262203 96 97 3 262176 98 1 95 262203 98 99 1
             327734 2 4 0 3 131320 5 262203 8 9 7 262203
             8 19 7 262203 8 59 7 262205 10 13 12 327761
             6 15 13 0 327761 6 16 13 1 327761 6 17
             13 2 458832 7 18 15 16 17 14 196670 9 18
             262205 10 21 20 327761 6 23 21 0 327761 6 24
             21 1 327761 6 25 21 2 458832 7 26 23 24
             25 22 196670 19 26 327745 36 37 35 31 262205 32
             38 37 327745 36 40 35 39 262205 32 41 40 327826
             32 42 38 41 262205 7 43 9 327825 7 44 42
             43 327745 45 46 29 31 196670 46 44 327745 36 49
             35 39 262205 32 50 49 262205 7 51 9 327825 7
             52 50 51 327761 6 53 52 0 327761 6 54 52
             1 327761 6 55 52 2 327761 6 56 52 3 458832
             7 57 53 54 55 56 524367 10 58 57 57 0
             1 2 196670 48 58 196670 59 60 327745 36 62 35
             39 262205 32 63 62 262205 7 64 9 327825 7 65
             63 64 524367 10 66 65 65 0 1 2 262271 10
             67 66 196670 61 67 327745 36 69 35 39 262205 32
             70 69 262205 7 71 19 327825 7 72 70 71 524367
             10 73 72 72 0 1 2 196670 68 73 327745 76
             77 59 75 262205 6 78 77 327860 79 80 78 22
             196855 82 0 262394 80 81 86 131320 81 262205 7 84
             59 524367 10 85 84 84 0 1 2 196670 83 85
             131321 82 131320 86 262205 7 87 59 524367 10 88 87
             87 0 1 2 262205 10 89 61 327809 10 90 88
             89 196670 83 90 131321 82 131320 82 262205 7 94 93
             196670 91 94 262205 95 100 99 196670 97 100 65789 65592
          }
          NumSpecializationConstants 0
        }
        vsg::ShaderStage id=40 vsg::ShaderStage
        {
          NumUserObjects 0
          stage 16
          entryPointName "main"
          module id=41 vsg::ShaderModule
          {
            NumUserObjects 0
            Source "#version 450
#extension GL_ARB_separate_shader_objects : enable
#pragma import_defines (VSG_POINT_SPRITE, VSG_DIFFUSE_MAP, VSG_GREYSACLE_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_SPECULAR_MAP, VSG_TWOSIDED)

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(binding = 10) uniform MaterialData
{
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;
    vec4 emissiveColor;
    float shininess;
    float alphaMask;
    float alphaMaskCutoff;
} material;

layout(location = 0) in vec3 eyePos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec4 vertexColor;
#ifndef VSG_POINT_SPRITE
layout(location = 3) in vec2 texCoord0;
#endif
layout(location = 5) in vec3 viewDir;
layout(location = 6) in vec3 lightDir;

layout(location = 0) out vec4 outColor;

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(eyePos);
    vec3 q2 = dFdy(eyePos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

vec3 computeLighting(vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, vec3 emissiveColor, float shininess, float ambientOcclusion, vec3 ld, vec3 nd, vec3 vd)
{
    vec3 color = vec3(0.0);
    color.rgb += ambientColor;

    float diff = max(dot(ld, nd), 0.0);
    color.rgb += diffuseColor * diff;

    if (diff > 0.0)
    {
        vec3 halfDir = normalize(ld + vd);
        color.rgb += specularColor * pow(max(dot(halfDir, nd), 0.0), shininess);
    }

    vec3 result = color + emissiveColor;
    result *= ambientOcclusion;

    return result;
}

void main()
{
#ifdef VSG_POINT_SPRITE
    vec2 texCoord0 = gl_PointCoord.xy;
#endif

    vec4 ambientColor = vertexColor * material.ambientColor;
    vec4 diffuseColor = vertexColor * material.diffuseColor;
    vec4 specularColor = vertexColor * material.specularColor;
    vec4 emissiveColor = vertexColor * material.emissiveColor;
    float shininess = material.shininess;
    float ambientOcclusion = 1.0;

#ifdef VSG_DIFFUSE_MAP
    #ifdef VSG_GREYSACLE_DIFFUSE_MAP
        float v = texture(diffuseMap, texCoord0.st).s;
        diffuseColor *= vec4(v, v, v, 1.0);
    #else
        diffuseColor *= texture(diffuseMap, texCoord0.st);
    #endif
#endif

    if (material.alphaMask == 1.0f)
    {
        if (diffuseColor.a < material.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_EMISSIVE_MAP
    emissiveColor *= texture(emissiveMap, texCoord0.st);
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion *= texture(aoMap, texCoord0.st).r;
#endif

#ifdef VSG_SPECULAR_MAP
    specularColor *= texture(specularMap, texCoord0.st);
#endif

    vec3 nd = getNormal();
    vec3 ld = normalize(lightDir);
    vec3 vd = normalize(viewDir);

    vec3 colorFrontFace = computeLighting(ambientColor.rgb, diffuseColor.rgb, specularColor.rgb, emissiveColor.rgb, shininess, ambientOcclusion, ld, nd, vd);
#ifdef VSG_TWOSIDED
    vec3 colorBackFace = computeLighting(ambientColor.rgb, diffuseColor.rgb, specularColor.rgb, emissiveColor.rgb, shininess, ambientOcclusion, ld, -nd, vd);
    outColor.rgb = colorFrontFace + colorBackFace;
#else
    outColor.rgb = colorFrontFace;
#endif
    outColor.a = diffuseColor.a;
}
"
            hints id=0
            SPIRVSize 1358
            SPIRV 119734787 65536 524298 192 0 131089 1 393227 1 1280527431 1685353262 808793134
             0 196622 0 1 786447 4 4 1852399981 0 26 81 137
             141 169 188 191 196624 4 7 196611 2 450 589828 1096764487
             1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 327685
             9 1316250983 1634562671 10348 983045 23 1886220131 1281717365 1952999273 677867113 993224310 993224310
             993224310 993224310 1715155302 1719024433 1719024435 1719024435 15155 393221 14 1768058209 1131703909 1919904879
             0 393221 15 1717987684 1130722165 1919904879 0 393221 16 1667592307 1918987381 1869377347
             114 393221 17 1936289125 1702259059 1869377347 114 327685 18 1852401779 1936027241 115
             458757 19 1768058209 1333030501 1970037603 1852795251 0 196613 20 25708 196613 21
             25710 196613 22 25718 327685 26 1836216174 1766091873 114 262149 31 1869377379
             114 262149 37 1717987684 0 262149 52 1718378856 7498052 262149 67 1970496882
             29804 393221 79 1768058209 1131703909 1919904879 0 327685 81 1953654134 1866692709 7499628
             393221 83 1702125901 1818323314 1635017028 0 458758 83 0 1768058209 1131703909 1919904879
             0 458758 83 1 1717987684 1130722165 1919904879 0 458758 83 2 1667592307
             1918987381 1869377347 114 458758 83 3 1936289125 1702259059 1869377347 114 393222 83
             4 1852401779 1936027241 115 393222 83 5 1752198241 1935756641 107 458758 83
             6 1752198241 1935756641 1953842027 6710895 327685 85 1702125933 1818323314 0 393221 92
             1717987684 1130722165 1919904879 0 393221 98 1667592307 1918987381 1869377347 114 393221 104
             1936289125 1702259059 1869377347 114 327685 110 1852401779 1936027241 115 458757 115 1768058209
             1333030501 1970037603 1852795251 0 196613 134 25710 196613 136 25708 327685 137
             1751607660 1919501428 0 196613 140 25718 262149 141 2003134838 7498052 393221 144
             1869377379 1869760114 1632007278 25955 262149 145 1634886000 109 262149 148 1634886000 109
             262149 151 1634886000 109 262149 154 1634886000 109 262149 157 1634886000 109
             262149 159 1634886000 109 262149 161 1634886000 109 262149 163 1634886000 109
             262149 165 1634886000 109 327685 169 1131705711 1919904879 0 393221 185 1752397136
             1936617283 1953390964 115 393222 185 0 1785688688 1769235301 28271 393222 185 1
             1701080941 1701402220 119 196613 187 25456 262149 188 1348827493 29551 327685 191
             1131963764 1685221231 48 262215 26 30 1 262215 81 30 2 327752
             83 0 35 0 327752 83 1 35 16 327752 83 2
             35 32 327752 83 3 35 48 327752 83 4 35 64
             327752 83 5 35 68 327752 83 6 35 72 196679 83
             2 262215 85 34 0 262215 85 33 10 262215 137 30
             6 262215 141 30 5 262215 169 30 0 262216 185 0
             5 327752 185 0 35 0 327752 185 0 7 16 262216
             185 1 5 327752 185 1 35 64 327752 185 1 7
             16 196679 185 2 262215 188 30 0 262215 191 30 3
             131091 2 196641 3 2 196630 6 32 262167 7 6 3
             196641 8 7 262176 11 7 7 262176 12 7 6 786465
             13 7 11 11 11 11 12 12 11 11 11 262176
             25 1 7 262203 25 26 1 262187 6 32 0 393260
             7 33 32 32 32 131092 48 262167 77 6 4 262176
             78 7 77 262176 80 1 77 262203 80 81 1 589854
             83 77 77 77 77 6 6 6 262176 84 2 83
             262203 84 85 2 262165 86 32 1 262187 86 87 0
             262176 88 2 77 262187 86 94 1 262187 86 100 2
             262187 86 106 3 262187 86 111 4 262176 112 2 6
             262187 6 116 1065353216 262187 86 117 5 262165 123 32 0
             262187 123 124 3 262187 86 127 6 262203 25 137 1
             262203 25 141 1 262176 168 3 77 262203 168 169 3
             262187 123 171 0 262176 172 3 6 262187 123 175 1
             262187 123 178 2 262168 184 77 4 262174 185 184 184
             262176 186 9 185 262203 186 187 9 262203 25 188 1
             262167 189 6 2 262176 190 1 189 262203 190 191 1
             327734 2 4 0 3 131320 5 262203 78 79 7 262203
             78 92 7 262203 78 98 7 262203 78 104 7 262203
             12 110 7 262203 12 115 7 262203 11 134 7 262203
             11 136 7 262203 11 140 7 262203 11 144 7 262203
             11 145 7 262203 11 148 7 262203 11 151 7 262203
             11 154 7 262203 12 157 7 262203 12 159 7 262203
             11 161 7 262203 11 163 7 262203 11 165 7 262205
             77 82 81 327745 88 89 85 87 262205 77 90 89
             327813 77 91 82 90 196670 79 91 262205 77 93 81
             327745 88 95 85 94 262205 77 96 95 327813 77 97
             93 96 196670 92 97 262205 77 99 81 327745 88 101
             85 100 262205 77 102 101 327813 77 103 99 102 196670
             98 103 262205 77 105 81 327745 88 107 85 106 262205
             77 108 107 327813 77 109 105 108 196670 104 109 327745
             112 113 85 111 262205 6 114 113 196670 110 114 196670
             115 116 327745 112 118 85 117 262205 6 119 118 327860
             48 120 119 116 196855 122 0 262394 120 121 122 131320
             121 327745 12 125 92 124 262205 6 126 125 327745 112
             128 85 127 262205 6 129 128 327864 48 130 126 129
             196855 132 0 262394 130 131 132 131320 131 65788 131320 132
             131321 122 131320 122 262201 7 135 9 196670 134 135 262205
             7 138 137 393228 7 139 1 69 138 196670 136 139
             262205 7 142 141 393228 7 143 1 69 142 196670 140
             143 262205 77 146 79 524367 7 147 146 146 0 1
             2 196670 145 147 262205 77 149 92 524367 7 150 149
             149 0 1 2 196670 148 150 262205 77 152 98 524367
             7 153 152 152 0 1 2 196670 151 153 262205 77
             155 104 524367 7 156 155 155 0 1 2 196670 154
             156 262205 6 158 110 196670 157 158 262205 6 160 115
             196670 159 160 262205 7 162 136 196670 161 162 262205 7
             164 134 196670 163 164 262205 7 166 140 196670 165 166
             852025 7 167 23 145 148 151 154 157 159 161 163
             165 196670 144 167 262205 7 170 144 327745 172 173 169
             171 327761 6 174 170 0 196670 173 174 327745 172 176
             169 175 327761 6 177 170 1 196670 176 177 327745 172
             179 169 178 327761 6 180 170 2 196670 179 180 327745
             12 181 92 124 262205 6 182 181 327745 172 183 169
             124 196670 183 182 65789 65592 327734 7 9 0 8 131320
             10 262205 7 27 26 393228 7 28 1 69 27 131326
             28 65592 327734 7 23 0 13 196663 11 14 196663 11
             15 196663 11 16 196663 11 17 196663 12 18 196663 12
             19 196663 11 20 196663 11 21 196663 11 22 131320 24
             262203 11 31 7 262203 12 37 7 262203 11 52 7
             262203 11 67 7 196670 31 33 262205 7 34 14 262205
             7 35 31 327809 7 36 35 34 196670 31 36 262205
             7 38 20 262205 7 39 21 327828 6 40 38 39
             458764 6 41 1 40 40 32 196670 37 41 262205 7
             42 15 262205 6 43 37 327822 7 44 42 43 262205
             7 45 31 327809 7 46 45 44 196670 31 46 262205
             6 47 37 327866 48 49 47 32 196855 51 0 262394
             49 50 51 131320 50 262205 7 53 20 262205 7 54
             22 327809 7 55 53 54 393228 7 56 1 69 55
             196670 52 56 262205 7 57 16 262205 7 58 52 262205
             7 59 21 327828 6 60 58 59 458764 6 61 1
             40 60 32 262205 6 62 18 458764 6 63 1 26
             61 62 327822 7 64 57 63 262205 7 65 31 327809
             7 66 65 64 196670 31 66 131321 51 131320 51 262205
             7 68 31 262205 7 69 17 327809 7 70 68 69
             196670 67 70 262205 6 71 19 262205 7 72 67 327822
             7 73 72 71 196670 67 73 262205 7 74 67 131326
             74 65592
          }
          NumSpecializationConstants 0
        }
        pipelineStates 6
        vsg::GraphicsPipelineState id=42 vsg::VertexInputState
        {
          NumUserObjects 0
          NumBindings 4
          binding 0
          stride 12
          inputRate 0
          binding 1
          stride 12
          inputRate 0
          binding 2
          stride 8
          inputRate 0
          binding 3
          stride 16
          inputRate 1
          NumAttributes 4
          location 0
          binding 0
          format 106
          offset 0
          location 1
          binding 1
          format 106
          offset 0
          location 2
          binding 2
          format 103
          offset 0
          location 3
          binding 3
          format 109
          offset 0
        }
        vsg::GraphicsPipelineState id=43 vsg::InputAssemblyState
        {
          NumUserObjects 0
          topology 3
          primitiveRestartEnable 0
        }
        vsg::GraphicsPipelineState id=44 vsg::RasterizationState
        {
          NumUserObjects 0
          depthClampEnable 0
          rasterizerDiscardEnable 0
          polygonMode 0
          cullMode 2
          frontFace 0
          depthBiasEnable 0
          depthBiasConstantFactor 1
          depthBiasClamp 0
          depthBiasSlopeFactor 1
          lineWidth 1
        }
        vsg::GraphicsPipelineState id=45 vsg::MultisampleState
        {
          NumUserObjects 0
          rasterizationSamples 1
          sampleShadingEnable 0
          minSampleShading 0
          NumSampleMask 0
          alphaToCoverageEnable 0
          alphaToOneEnable 0
        }
        vsg::GraphicsPipelineState id=46 vsg::ColorBlendState
        {
          NumUserObjects 0
          logicOp 3
          logicOpEnable 0
          NumColorBlendAttachments 1
          blendEnable 0
          srcColorBlendFactor 6
          dstColorBlendFactor 7
          colorBlendOp 0
          srcAlphaBlendFactor 6
          dstAlphaBlendFactor 7
          alphaBlendOp 1
          colorWriteMask 15
          blendConstants 0 0 0 0
        }
        vsg::GraphicsPipelineState id=47 vsg::DepthStencilState
        {
          NumUserObjects 0
          depthTestEnable 1
          depthWriteEnable 1
          depthCompareOp 4
          depthBoundsTestEnable 0
          stencilTestEnable 0
          front.failOp 0
          front.passOp 0
          front.depthFailOp 0
          front.compareOp 0
          front.compareMask 0
          front.writeMask 0
          front.reference 0
          back.failOp 0
          back.passOp 0
          back.depthFailOp 0
          back.compareOp 0
          back.compareMask 0
          back.writeMask 0
          back.reference 0
          minDepthBounds 0
          maxDepthBounds 1
        }
        subpass 0
      }
    }
    vsg::StateCommand id=48 vsg::BindDescriptorSet
    {
      NumUserObjects 0
      slot 1
      layout id=36
      firstSet 0
      descriptorSet id=49 vsg::DescriptorSet
      {
        NumUserObjects 0
        setLayout id=37
        descriptors 1
        vsg::Descriptor id=50 vsg::DescriptorBuffer
        {
          NumUserObjects 0
          dstBinding 10
          dstArrayElement 0
          NumData 1
          Data id=51 vsg::PhongMaterialValue
          {
            NumUserObjects 0
            Layout 0 0 0 1 1 1 0 -1
            Value            ambient 0 0 0 1
            diffuse 1 1 1 1
            specular 0 0 0 1
            emissive 0 0 0 1
            shininess 100
            alphaMask 1
            alphaMaskCutoff 0.5

          }
        }
      }
    }
    prototypeArrayState id=0
  }
  matrix 1 0 0 0 0 0 1 0 0 -1 0 0
   0 0 0 1
  subgraphRequiresLocalFrustum 1
}
