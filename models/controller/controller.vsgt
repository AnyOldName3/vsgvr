#vsga 0.1.2
Root id=1 vsg::MatrixTransform
{
  NumUserObjects 0
  NumChildren 1
  Child id=2 vsg::StateGroup
  {
    NumUserObjects 0
    NumChildren 1
    Child id=3 vsg::MatrixTransform
    {
      NumUserObjects 0
      NumChildren 3
      Child id=4 vsg::MatrixTransform
      {
        NumUserObjects 0
        NumChildren 0
        Matrix -0.290865 0.955171 -0.0551891 0 -0.771101 -0.199883 0.604525 0 0.566393 0.218391 0.794672 0
         0 -0.0200351 0 1
        SubgraphRequiresLocalFrustum 1
      }
      Child id=5 vsg::MatrixTransform
      {
        NumUserObjects 0
        NumChildren 1
        Child id=6 vsg::StateGroup
        {
          NumUserObjects 0
          NumChildren 1
          Child id=7 vsg::VertexIndexDraw
          {
            NumUserObjects 0
            firstBinding 0
            NumArrays 3
            Array id=8 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 1 1 -1 1 1 -1 1 1 -1 1 -1 -1
               1 -1 -1 1 -1 -1 -1 1 -1 -1 1 -1
               -1 1 -1 -1 -1 -1 -1 -1 -1 -1 -1 -1
               0.611511 0.611511 1 0.611511 0.611511 1 0.611511 0.611511 1 1 1 0.611511
               1 1 0.611511 1 1 0.611511 1 1 0.611511 0.611511 -0.611511 1
               0.611511 -0.611511 1 0.611511 -0.611511 1 1 -1 0.611511 1 -1 0.611511
               1 -1 0.611511 1 -1 0.611511 -0.611511 0.611511 1 -0.611511 0.611511 1
               -0.611511 0.611511 1 -1 1 0.611511 -1 1 0.611511 -1 1 0.611511
               -1 1 0.611511 -0.611511 -0.611511 1 -0.611511 -0.611511 1 -0.611511 -0.611511 1
               -1 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511 -1 -1 0.611511
            }
            Array id=9 vsg::vec3Array
            {
              NumUserObjects 0
              Layout 0 12 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0 0 -1 0 1 0 1 0 0 0 -1 0
               0 0 -1 1 0 0 -1 0 0 0 0 -1
               0 1 0 -1 0 0 0 -1 0 0 0 -1
               0 0 1 0 0.707107 0.707107 0.707107 0 0.707107 0 0.707107 0.707107
               0 1 0 0.707107 0 0.707107 1 0 0 0 -0.707107 0.707107
               0 0 1 0.707107 0 0.707107 0 -1 0 0 -0.707107 0.707107
               0.707107 0 0.707107 1 0 0 -0.707107 0 0.707107 0 0 1
               0 0.707107 0.707107 -1 0 0 -0.707107 0 0.707107 0 0.707107 0.707107
               0 1 0 -0.707107 0 0.707107 0 -0.707107 0.707107 0 0 1
               -1 0 0 -0.707107 0 0.707107 0 -1 0 0 -0.707107 0.707107
            }
            Array id=10 vsg::vec2Array
            {
              NumUserObjects 0
              Layout 0 8 0 1 1 1 0 -1
              Size 40
              Storage id=0
              Data 0.375 0.5 0.375 0.5 0.375 0.5 0.375 0.25 0.375 0.25 0.375 0.25
               0.375 0.75 0.125 0.5 0.375 0.75 0.375 1 0.375 0 0.125 0.25
               0.673561 0.451439 0.673561 0.451439 0.673561 0.451439 0.625 0.5 0.576439 0.5 0.576439 0.5
               0.576439 0.5 0.673561 0.298561 0.673561 0.298561 0.673561 0.298561 0.576439 0.25 0.625 0.25
               0.576439 0.25 0.576439 0.25 0.826439 0.451439 0.826439 0.451439 0.826439 0.451439 0.576439 0.75
               0.875 0.5 0.875 0.5 0.576439 0.75 0.826439 0.298561 0.826439 0.298561 0.826439 0.298561
               0.576439 1 0.875 0.25 0.576439 0 0.875 0.25
            }
            Indices id=11 vsg::ushortArray
            {
              NumUserObjects 0
              Layout 0 2 0 1 1 1 0 -1
              Size 60
              Storage id=0
              Data 7 0 4 7 4 11 2 18 25 2 25 5
               3 22 38 3 38 10 9 29 6 9 36 29
               8 32 16 8 16 1 12 27 35 12 35 20
               28 13 15 28 15 31 14 21 24 14 24 17
               19 34 39 19 39 23 33 26 30 33 30 37
            }
            indexCount 60
            instanceCount 1
            firstIndex 0
            vertexOffset 0
            firstInstance 0
          }
          NumStateCommands 2
          StateCommand id=12 vsg::BindGraphicsPipeline
          {
            NumUserObjects 0
            Slot 0
            GraphicsPipeline id=13 vsg::GraphicsPipeline
            {
              NumUserObjects 0
              PipelineLayout id=14 vsg::PipelineLayout
              {
                NumUserObjects 0
                Flags 0
                NumDescriptorSetLayouts 1
                DescriptorSetLayout id=15 vsg::DescriptorSetLayout
                {
                  NumUserObjects 0
                  NumDescriptorSetLayoutBindings 1
                  binding 10
                  descriptorType 6
                  descriptorCount 1
                  stageFlags 16
                }
                NumPushConstantRanges 1
                stageFlags 1
                offset 0
                size 128
              }
              NumShaderStages 2
              ShaderStage id=16 vsg::ShaderStage
              {
                NumUserObjects 0
                Stage 1
                EntryPoint "main"
                ShaderModule id=17 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450

#extension GL_ARB_separate_shader_objects : enable

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(location = 0) in vec3 osg_Vertex;
layout(location = 0) out vec3 worldPos;

layout(location = 1) in vec3 osg_Normal;
layout(location = 1) out vec3 normalDir;

layout(location = 2) in vec2 osg_TexCoord0;
layout(location = 2) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;
layout(location = 6) out vec3 lightDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    gl_Position = (pc.projection * pc.modelView) * vec4(osg_Vertex, 1.0);
    worldPos = vec4(pc.modelView * vec4(osg_Vertex, 1.0)).xyz;

    vec3 n = (pc.modelView * vec4(osg_Normal, 0.0)).xyz;
    normalDir = n;
    vec4 lpos = /*osg_LightSource.position*/ vec4(0.0, 0.25, 1.0, 0.0);
    viewDir = -vec3(pc.modelView * vec4(osg_Vertex, 1.0));

    if (lpos.w == 0.0)
        lightDir = lpos.xyz;
    else
        lightDir = lpos.xyz + viewDir;

    texCoord0 = osg_TexCoord0 * vec2(1,1);
}
"
                  SPIRVSize 730
                  SPIRV 119734787 66560 524298 110 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 983055 0 4 1852399981 0 10 16 26
                   37 56 65 71 94 104 106 196611 2 450 589828 1096764487
                   1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 393221
                   8 1348430951 1700164197 2019914866 0 393222 8 0 1348430951 1953067887 7237481 196613
                   10 0 393221 14 1752397136 1936617283 1953390964 115 393222 14 0 1785688688
                   1769235301 28271 393222 14 1 1701080941 1701402220 119 196613 16 25456 327685
                   26 1600615279 1953654102 30821 327685 37 1819438967 1936674916 0 196613 53 110
                   327685 56 1600615279 1836216142 27745 327685 65 1836216174 1766091873 114 262149 68
                   1936683116 0 262149 71 2003134838 7498052 327685 94 1751607660 1919501428 0 327685
                   104 1131963764 1685221231 48 393221 106 1600615279 1131963732 1685221231 48 327752 8
                   0 11 0 196679 8 2 262216 14 0 5 327752 14
                   0 35 0 327752 14 0 7 16 262216 14 1 5
                   327752 14 1 35 64 327752 14 1 7 16 196679 14
                   2 262215 26 30 0 262215 37 30 0 262215 56 30
                   1 262215 65 30 1 262215 71 30 5 262215 94 30
                   6 262215 104 30 2 262215 106 30 2 131091 2 196641
                   3 2 196630 6 32 262167 7 6 4 196638 8 7
                   262176 9 3 8 262203 9 10 3 262165 11 32 1
                   262187 11 12 0 262168 13 7 4 262174 14 13 13
                   262176 15 9 14 262203 15 16 9 262176 17 9 13
                   262187 11 20 1 262167 24 6 3 262176 25 1 24
                   262203 25 26 1 262187 6 28 1065353216 262176 34 3 7
                   262176 36 3 24 262203 36 37 3 262176 52 7 24
                   262203 25 56 1 262187 6 58 0 262203 36 65 3
                   262176 67 7 7 262187 6 69 1048576000 458796 7 70 58
                   69 28 58 262203 36 71 3 262165 85 32 0 262187
                   85 86 3 262176 87 7 6 131092 90 262203 36 94
                   3 262167 102 6 2 262176 103 3 102 262203 103 104
                   3 262176 105 1 102 262203 105 106 1 327724 102 108
                   28 28 327734 2 4 0 3 131320 5 262203 52 53
                   7 262203 67 68 7 327745 17 18 16 12 262205 13
                   19 18 327745 17 21 16 20 262205 13 22 21 327826
                   13 23 19 22 262205 24 27 26 327761 6 29 27
                   0 327761 6 30 27 1 327761 6 31 27 2 458832
                   7 32 29 30 31 28 327825 7 33 23 32 327745
                   34 35 10 12 196670 35 33 327745 17 38 16 20
                   262205 13 39 38 262205 24 40 26 327761 6 41 40
                   0 327761 6 42 40 1 327761 6 43 40 2 458832
                   7 44 41 42 43 28 327825 7 45 39 44 327761
                   6 46 45 0 327761 6 47 45 1 327761 6 48
                   45 2 327761 6 49 45 3 458832 7 50 46 47
                   48 49 524367 24 51 50 50 0 1 2 196670 37
                   51 327745 17 54 16 20 262205 13 55 54 262205 24
                   57 56 327761 6 59 57 0 327761 6 60 57 1
                   327761 6 61 57 2 458832 7 62 59 60 61 58
                   327825 7 63 55 62 524367 24 64 63 63 0 1
                   2 196670 53 64 262205 24 66 53 196670 65 66 196670
                   68 70 327745 17 72 16 20 262205 13 73 72 262205
                   24 74 26 327761 6 75 74 0 327761 6 76 74
                   1 327761 6 77 74 2 458832 7 78 75 76 77
                   28 327825 7 79 73 78 327761 6 80 79 0 327761
                   6 81 79 1 327761 6 82 79 2 393296 24 83
                   80 81 82 262271 24 84 83 196670 71 84 327745 87
                   88 68 86 262205 6 89 88 327860 90 91 89 58
                   196855 93 0 262394 91 92 97 131320 92 262205 7 95
                   68 524367 24 96 95 95 0 1 2 196670 94 96
                   131321 93 131320 97 262205 7 98 68 524367 24 99 98
                   98 0 1 2 262205 24 100 71 327809 24 101 99
                   100 196670 94 101 131321 93 131320 93 262205 102 107 106
                   327813 102 109 107 108 196670 104 109 65789 65592
                }
                NumSpecializationConstants 0
              }
              ShaderStage id=18 vsg::ShaderStage
              {
                NumUserObjects 0
                Stage 16
                EntryPoint "main"
                ShaderModule id=19 vsg::ShaderModule
                {
                  NumUserObjects 0
                  Source "#version 450
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_METALLROUGHNESS_MAP, VSG_SPECULAR_MAP, VSG_TWOSIDED, VSG_WORKFLOW_SPECGLOSS)
#define VSG_TWOSIDED

#extension GL_ARB_separate_shader_objects : enable

const float PI = 3.14159265359;
const float RECIPROCAL_PI = 0.31830988618;
const float RECIPROCAL_PI2 = 0.15915494;
const float EPSILON = 1e-6;
const float c_MinRoughness = 0.04;

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_METALLROUGHNESS_MAP
layout(binding = 1) uniform sampler2D mrMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(binding = 10) uniform PbrData
{
    vec4 baseColorFactor;
    vec4 emissiveFactor;
    vec4 diffuseFactor;
    vec4 specularFactor;
    float metallicFactor;
    float roughnessFactor;
    float alphaMask;
    float alphaMaskCutoff;
} pbr;

layout(location = 0) in vec3 worldPos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;
layout(location = 6) in vec3 lightDir;

layout(location = 0) out vec4 outColor;


// Encapsulate the various inputs used by the various functions in the shading equation
// We store values in this struct to simplify the integration of alternative implementations
// of the shading terms, outlined in the Readme.MD Appendix.
struct PBRInfo
{
    float NdotL;                  // cos angle between normal and light direction
    float NdotV;                  // cos angle between normal and view direction
    float NdotH;                  // cos angle between normal and half vector
    float LdotH;                  // cos angle between light direction and half vector
    float VdotH;                  // cos angle between view direction and half vector
    float VdotL;                  // cos angle between view direction and light direction
    float perceptualRoughness;    // roughness value, as authored by the model creator (input to shader)
    float metalness;              // metallic value at the surface
    vec3 reflectance0;            // full reflectance color (normal incidence angle)
    vec3 reflectance90;           // reflectance color at grazing angle
    float alphaRoughness;         // roughness mapped to a more linear change in the roughness (proposed by [2])
    vec3 diffuseColor;            // color contribution from diffuse lighting
    vec3 specularColor;           // color contribution from specular lighting
};


vec4 SRGBtoLINEAR(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(2.2));
    return vec4(linOut,srgbIn.w);
}

vec4 LINEARtoSRGB(vec4 srgbIn)
{
    vec3 linOut = pow(srgbIn.xyz, vec3(1.0 / 2.2));
    return vec4(linOut, srgbIn.w);
}

float rcp(const in float value)
{
    return 1.0 / value;
}

float pow5(const in float value)
{
    return value * value * value * value * value;
}

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(worldPos);
    vec3 q2 = dFdy(worldPos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

// Basic Lambertian diffuse
// Implementation from Lambert's Photometria https://archive.org/details/lambertsphotome00lambgoog
// See also [1], Equation 1
vec3 BRDF_Diffuse_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI;
}

vec3 BRDF_Diffuse_Custom_Lambert(PBRInfo pbrInputs)
{
    return pbrInputs.diffuseColor * RECIPROCAL_PI * pow(pbrInputs.NdotV, 0.5 + 0.3 * pbrInputs.perceptualRoughness);
}

// [Gotanda 2012, \"Beyond a Simple Physically Based Blinn-Phong Model in Real-Time\"]
vec3 BRDF_Diffuse_OrenNayar(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float s = a;// / ( 1.29 + 0.5 * a );
    float s2 = s * s;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = pbrInputs.VdotL - pbrInputs.NdotV * pbrInputs.NdotL;
    float C1 = 1 - 0.5 * s2 / (s2 + 0.33);
    float C2 = 0.45 * s2 / (s2 + 0.09) * Cosri * ( Cosri >= 0 ? 1.0 / max(pbrInputs.NdotL, pbrInputs.NdotV) : 1 );
    return pbrInputs.diffuseColor / PI * ( C1 + C2 ) * ( 1 + pbrInputs.perceptualRoughness * 0.5 );
}

// [Gotanda 2014, \"Designing Reflectance Models for New Consoles\"]
vec3 BRDF_Diffuse_Gotanda(PBRInfo pbrInputs)
{
    float a = pbrInputs.alphaRoughness;
    float a2 = a * a;
    float F0 = 0.04;
    float VoL = 2 * pbrInputs.VdotH * pbrInputs.VdotH - 1;		// double angle identity
    float Cosri = VoL - pbrInputs.NdotV * pbrInputs.NdotL;
    float a2_13 = a2 + 1.36053;
    float Fr = ( 1 - ( 0.542026*a2 + 0.303573*a ) / a2_13 ) * ( 1 - pow( 1 - pbrInputs.NdotV, 5 - 4*a2 ) / a2_13 ) * ( ( -0.733996*a2*a + 1.50912*a2 - 1.16402*a ) * pow( 1 - pbrInputs.NdotV, 1 + rcp(39*a2*a2+1) ) + 1 );
    //float Fr = ( 1 - 0.36 * a ) * ( 1 - pow( 1 - NoV, 5 - 4*a2 ) / a2_13 ) * ( -2.5 * Roughness * ( 1 - NoV ) + 1 );
    float Lm = ( max( 1 - 2*a, 0 ) * ( 1 - pow5( 1 - pbrInputs.NdotL ) ) + min( 2*a, 1 ) ) * ( 1 - 0.5*a * (pbrInputs.NdotL - 1) ) * pbrInputs.NdotL;
    float Vd = ( a2 / ( (a2 + 0.09) * (1.31072 + 0.995584 * pbrInputs.NdotV) ) ) * ( 1 - pow( 1 - pbrInputs.NdotL, ( 1 - 0.3726732 * pbrInputs.NdotV * pbrInputs.NdotV ) / ( 0.188566 + 0.38841 * pbrInputs.NdotV ) ) );
    float Bp = Cosri < 0 ? 1.4 * pbrInputs.NdotV * pbrInputs.NdotL * Cosri : Cosri;
    float Lr = (21.0 / 20.0) * (1 - F0) * ( Fr * Lm + Vd + Bp );
    return pbrInputs.diffuseColor * RECIPROCAL_PI * Lr;
}

vec3 BRDF_Diffuse_Burley(PBRInfo pbrInputs)
{
    float energyBias = mix(pbrInputs.perceptualRoughness, 0.0, 0.5);
    float energyFactor = mix(pbrInputs.perceptualRoughness, 1.0, 1.0 / 1.51);
    float fd90 = energyBias + 2.0 * pbrInputs.VdotH * pbrInputs.VdotH * pbrInputs.perceptualRoughness;
    float f0 = 1.0;
    float lightScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotL, 5.0);
    float viewScatter = f0 + (fd90 - f0) * pow(1.0 - pbrInputs.NdotV, 5.0);

    return pbrInputs.diffuseColor * lightScatter * viewScatter * energyFactor;
}

vec3 BRDF_Diffuse_Disney(PBRInfo pbrInputs)
{
	float Fd90 = 0.5 + 2.0 * pbrInputs.perceptualRoughness * pbrInputs.VdotH * pbrInputs.VdotH;
    vec3 f0 = vec3(0.1);
	vec3 invF0 = vec3(1.0, 1.0, 1.0) - f0;
	float dim = min(invF0.r, min(invF0.g, invF0.b));
	float result = ((1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotL, 5.0 )) * (1.0 + (Fd90 - 1.0) * pow(1.0 - pbrInputs.NdotV, 5.0 ))) * dim;
	return pbrInputs.diffuseColor * result;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(PBRInfo pbrInputs)
{
    //return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
    return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance90*pbrInputs.reflectance0) * exp2((-5.55473 * pbrInputs.VdotH - 6.98316) * pbrInputs.VdotH);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(PBRInfo pbrInputs)
{
    float NdotL = pbrInputs.NdotL;
    float NdotV = pbrInputs.NdotV;
    float r = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;

    float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r + (1.0 - r) * (NdotL * NdotL)));
    float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r + (1.0 - r) * (NdotV * NdotV)));
    return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from \"Average Irregularity Representation of a Roughened Surface for Ray Reflection\" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(PBRInfo pbrInputs)
{
    float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
    float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
    return roughnessSq / (PI * f * f);
}

vec3 BRDF(vec3 v, vec3 n, vec3 l, vec3 h, float perceptualRoughness, float metallic, vec3 specularEnvironmentR0, vec3 specularEnvironmentR90, float alphaRoughness, vec3 diffuseColor, vec3 specularColor, float ao)
{
    vec3 reflection = -normalize(reflect(v, n));
    reflection.y *= -1.0f;

    float NdotL = clamp(dot(n, l), 0.001, 1.0);
    float NdotV = clamp(abs(dot(n, v)), 0.001, 1.0);
    float NdotH = clamp(dot(n, h), 0.0, 1.0);
    float LdotH = clamp(dot(l, h), 0.0, 1.0);
    float VdotH = clamp(dot(v, h), 0.0, 1.0);
    float VdotL = clamp(dot(v, l), 0.0, 1.0);

    PBRInfo pbrInputs = PBRInfo(NdotL,
                                NdotV,
                                NdotH,
                                LdotH,
                                VdotH,
                                VdotL,
                                perceptualRoughness,
                                metallic,
                                specularEnvironmentR0,
                                specularEnvironmentR90,
                                alphaRoughness,
                                diffuseColor,
                                specularColor);

    // Calculate the shading terms for the microfacet specular shading model
    vec3 F = specularReflection(pbrInputs);
    float G = geometricOcclusion(pbrInputs);
    float D = microfacetDistribution(pbrInputs);

    const vec3 u_LightColor = vec3(1.0);

    // Calculation of analytical lighting contribution
    vec3 diffuseContrib = (1.0 - F) * BRDF_Diffuse_Disney(pbrInputs);
    vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);
    // Obtain final intensity as reflectance (BRDF) scaled by the energy of the light (cosine law)
    vec3 color = NdotL * u_LightColor * (diffuseContrib + specContrib);

    color *= ao;

#ifdef VSG_EMISSIVE_MAP
    vec3 emissive = SRGBtoLINEAR(texture(emissiveMap, texCoord0)).rgb * pbr.emissiveFactor.rgb;
#else
    vec3 emissive = pbr.emissiveFactor.rgb;
#endif
    color += emissive;

    return color;
}

float convertMetallic(vec3 diffuse, vec3 specular, float maxSpecular)
{
    float perceivedDiffuse = sqrt(0.299 * diffuse.r * diffuse.r + 0.587 * diffuse.g * diffuse.g + 0.114 * diffuse.b * diffuse.b);
    float perceivedSpecular = sqrt(0.299 * specular.r * specular.r + 0.587 * specular.g * specular.g + 0.114 * specular.b * specular.b);

    if (perceivedSpecular < c_MinRoughness)
    {
        return 0.0;
    }

    float a = c_MinRoughness;
    float b = perceivedDiffuse * (1.0 - maxSpecular) / (1.0 - c_MinRoughness) + perceivedSpecular - 2.0 * c_MinRoughness;
    float c = c_MinRoughness - perceivedSpecular;
    float D = max(b * b - 4.0 * a * c, 0.0);
    return clamp((-b + sqrt(D)) / (2.0 * a), 0.0, 1.0);
}

void main()
{
    float perceptualRoughness = 0.0;
    float metallic;
    vec3 diffuseColor;
    vec4 baseColor;

    float ambientOcclusion = 1.0;

    vec3 f0 = vec3(0.04);

#ifdef VSG_DIFFUSE_MAP
    baseColor = SRGBtoLINEAR(texture(diffuseMap, texCoord0)) * pbr.baseColorFactor;
#else
    baseColor = pbr.baseColorFactor;
#endif

    if (pbr.alphaMask == 1.0f)
    {
        if (baseColor.a < pbr.alphaMaskCutoff)
            discard;
    }


#ifdef VSG_WORKFLOW_SPECGLOSS
    #ifdef VSG_SPECULAR_MAP
        vec3 specular = SRGBtoLINEAR(texture(specularMap, texCoord0)).rgb;
        perceptualRoughness = 1.0 - texture(specularMap, texCoord0).a;
    #else
        vec3 specular = vec3(0.0);
        perceptualRoughness = 0.0;
    #endif

        const float epsilon = 1e-6;

    #ifdef VSG_DIFFUSE_MAP
        vec4 diffuse = SRGBtoLINEAR(texture(diffuseMap, texCoord0));
    #else
        vec4 diffuse = vec4(1.0);
    #endif

        float maxSpecular = max(max(specular.r, specular.g), specular.b);

        // Convert metallic value from specular glossiness inputs
        metallic = convertMetallic(diffuse.rgb, specular, maxSpecular);

        vec3 baseColorDiffusePart = diffuse.rgb * ((1.0 - maxSpecular) / (1 - c_MinRoughness) / max(1 - metallic, epsilon)) * pbr.diffuseFactor.rgb;
        vec3 baseColorSpecularPart = specular - (vec3(c_MinRoughness) * (1 - metallic) * (1 / max(metallic, epsilon))) * pbr.specularFactor.rgb;
        baseColor = vec4(mix(baseColorDiffusePart, baseColorSpecularPart, metallic * metallic), diffuse.a);
#else
        perceptualRoughness = pbr.roughnessFactor;
        metallic = pbr.metallicFactor;

    #ifdef VSG_METALLROUGHNESS_MAP
        vec4 mrSample = texture(mrMap, texCoord0);
        perceptualRoughness = mrSample.g * perceptualRoughness;
        metallic = mrSample.b * metallic;
    #endif
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion = texture(aoMap, texCoord0).r;
#endif

    diffuseColor = baseColor.rgb * (vec3(1.0) - f0);
    diffuseColor *= 1.0 - metallic;

    float alphaRoughness = perceptualRoughness * perceptualRoughness;

    vec3 specularColor = mix(f0, baseColor.rgb, metallic);

    // Compute reflectance.
    float reflectance = max(max(specularColor.r, specularColor.g), specularColor.b);

    // For typical incident reflectance range (between 4% to 100%) set the grazing reflectance to 100% for typical fresnel effect.
    // For very low reflectance range on highly diffuse objects (below 4%), incrementally reduce grazing reflecance to 0%.
    float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);
    vec3 specularEnvironmentR0 = specularColor.rgb;
    vec3 specularEnvironmentR90 = vec3(1.0, 1.0, 1.0) * reflectance90;

    vec3 n = getNormal();
    vec3 v = normalize(viewDir);    // Vector from surface point to camera
    vec3 l = normalize(lightDir);     // Vector from surface point to light
    vec3 h = normalize(l+v);                        // Half vector between both l and v

    vec3 colorFrontFace = BRDF(v, n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
#ifdef VSG_TWOSIDED
    vec3 colorBackFace = BRDF(v, -n, l, h, perceptualRoughness, metallic, specularEnvironmentR0, specularEnvironmentR90, alphaRoughness, diffuseColor, specularColor, ambientOcclusion);
    vec3 color = colorFrontFace+colorBackFace;
#else
    vec3 color = colorFrontFace;
#endif

    outColor = LINEARtoSRGB(vec4(color, baseColor.a));
}
"
                  SPIRVSize 3444
                  SPIRV 119734787 66560 524298 521 0 131089 1 393227 1 1280527431 1685353262 808793134
                   0 196622 0 1 851983 4 4 1852399981 0 68 346 430
                   434 500 516 517 520 196624 4 7 196611 2 450 589828
                   1096764487 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0
                   458757 11 1162758476 1869894209 1111970387 879130152 59 262149 10 1650946675 28233 327685
                   15 1316250983 1634562671 10348 262149 17 1230127696 7300718 327686 17 0 1953457230
                   76 327686 17 1 1953457230 86 327686 17 2 1953457230 72 327686
                   17 3 1953457228 72 327686 17 4 1953457238 72 327686 17 5
                   1953457238 76 524294 17 6 1668441456 1970565221 1867672673 1852335989 7566181 393222 17
                   7 1635018093 1936027244 115 458758 17 8 1818649970 1635017573 811950958 0 458758
                   17 9 1818649970 1635017573 962945902 48 458758 17 10 1752198241 1970229857 1701734503
                   29555 458758 17 11 1717987684 1130722165 1919904879 0 458758 17 12 1667592307
                   1918987381 1869377347 114 1441797 21 1178882626 1718174815 1702065510 1936278623 679044462 1970435187 1345156195
                   1850298946 1714253670 828779825 758212141 1714237798 828779825 758212141 1982673254 1982673766 1714238310 1719020849 1719020851
                   3879219 327685 20 1232233072 1953853550 115 1441797 24 1667592307 1918987381 1818649938 1769235301
                   1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851
                   828779827 862352941 862352941 15153 327685 23 1232233072 1953853550 115 1441797 28 1836016999
                   1769108581 1667452771 1769174380 1932029551 1668641396 1112550772 1718503762 828779887 758212141 1714237798 828779825 758212141
                   1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685 27 1232233072 1953853550 115
                   1507333 31 1919117677 1667327599 1766093925 1769108595 1769239906 1932029551 1668641396 1112550772 1718503762 828779887
                   758212141 1714237798 828779825 758212141 1714237798 1719020849 1719020851 828779827 862352941 862352941 15153 327685
                   30 1232233072 1953853550 115 983045 48 1178882626 862352936 862352955 862352955 862352955 993093179
                   1983590758 1983591270 1715155814 1719024433 1719024435 828783411 59 196613 36 118 196613 37
                   110 196613 38 108 196613 39 104 458757 40 1668441456 1970565221 1867672673
                   1852335989 7566181 327685 41 1635018093 1667853420 0 524293 42 1667592307 1918987381 1769369157
                   1835954034 1383362149 48 524293 43 1667592307 1918987381 1769369157 1835954034 1383362149 12345 393221
                   44 1752198241 1970229857 1701734503 29555 393221 45 1717987684 1130722165 1919904879 0 393221
                   46 1667592307 1918987381 1869377347 114 196613 47 28513 262149 50 1332636012 29813
                   327685 68 1836216174 1766091873 114 262149 73 809067590 0 196613 89 12390
                   262149 92 1182166633 48 196613 97 7170404 262149 109 1970496882 29804 262149
                   165 1953457230 76 262149 168 1953457230 86 196613 171 114 393221 178
                   1702130785 1952544110 1282305897 0 393221 193 1702130785 1952544110 1450078057 0 327685 213
                   1735749490 1936027240 7426931 196613 219 102 327685 241 1818649970 1769235301 28271 262149
                   252 1953457230 76 262149 258 1953457230 86 262149 264 1953457230 72 262149
                   270 1953457228 72 262149 275 1953457238 72 262149 280 1953457238 76 327685
                   285 1232233072 1953853550 115 196613 300 70 262149 301 1634886000 109 196613
                   304 71 262149 305 1634886000 109 196613 308 68 262149 309 1634886000
                   109 393221 312 1717987684 1130722165 1920233071 25193 262149 316 1634886000 109 327685
                   320 1667592307 1953394499 6449522 262149 333 1869377379 114 327685 343 1936289125 1702259059
                   0 262149 344 1148346960 6386785 458758 344 0 1702060386 1869377347 1667319410 7499636
                   458758 344 1 1936289125 1702259059 1952670022 29295 458758 344 2 1717987684 1181053813
                   1869898593 114 458758 344 3 1667592307 1918987381 1952670022 29295 458758 344 4
                   1635018093 1667853420 1952670022 29295 458758 344 5 1735749490 1936027240 1667319411 7499636 393222
                   344 6 1752198241 1935756641 107 458758 344 7 1752198241 1935756641 1953842027 6710895
                   196613 346 7496304 458757 357 1668441456 1970565221 1867672673 1852335989 7566181 458757 358
                   1768058209 1333030501 1970037603 1852795251 0 196613 359 12390 327685 362 1702060386 1869377347
                   114 327685 384 1635018093 1667853420 0 393221 387 1717987684 1130722165 1919904879 0
                   393221 397 1752198241 1970229857 1701734503 29555 393221 401 1667592307 1918987381 1869377347 114
                   327685 408 1818649970 1635017573 6644590 393221 417 1818649970 1635017573 962945902 48 524293
                   422 1667592307 1918987381 1769369157 1835954034 1383362149 48 524293 424 1667592307 1918987381 1769369157
                   1835954034 1383362149 12345 196613 427 110 196613 429 118 262149 430 2003134838
                   7498052 196613 433 108 327685 434 1751607660 1919501428 0 196613 437 104
                   393221 442 1869377379 1869760114 1632007278 25955 262149 443 1634886000 109 262149 445
                   1634886000 109 262149 447 1634886000 109 262149 449 1634886000 109 262149 451
                   1634886000 109 262149 453 1634886000 109 262149 455 1634886000 109 262149 457
                   1634886000 109 262149 459 1634886000 109 262149 461 1634886000 109 262149 463
                   1634886000 109 262149 465 1634886000 109 393221 468 1869377379 1667318386 1667319403 101
                   262149 471 1634886000 109 262149 473 1634886000 109 262149 474 1634886000 109
                   262149 476 1634886000 109 262149 478 1634886000 109 262149 480 1634886000 109
                   262149 482 1634886000 109 262149 484 1634886000 109 262149 486 1634886000 109
                   262149 488 1634886000 109 262149 490 1634886000 109 262149 492 1634886000 109
                   262149 495 1869377379 114 327685 500 1131705711 1919904879 0 262149 508 1634886000
                   109 393221 514 1752397136 1936617283 1953390964 115 393222 514 0 1785688688 1769235301
                   28271 393222 514 1 1701080941 1701402220 119 196613 516 25456 327685 517
                   1819438967 1936674916 0 327685 520 1131963764 1685221231 48 262215 68 30 1
                   327752 344 0 35 0 327752 344 1 35 16 327752 344
                   2 35 32 327752 344 3 35 48 327752 344 4 35
                   64 327752 344 5 35 68 327752 344 6 35 72 327752
                   344 7 35 76 196679 344 2 262215 346 34 0 262215
                   346 33 10 262215 430 30 5 262215 434 30 6 262215
                   500 30 0 262216 514 0 5 327752 514 0 35 0
                   327752 514 0 7 16 262216 514 1 5 327752 514 1
                   35 64 327752 514 1 7 16 196679 514 2 262215 517
                   30 0 262215 520 30 2 131091 2 196641 3 2 196630
                   6 32 262167 7 6 4 262176 8 7 7 262177 9
                   7 8 262167 13 6 3 196641 14 13 983070 17 6
                   6 6 6 6 6 6 6 13 13 6 13 13
                   262176 18 7 17 262177 19 13 18 262177 26 6 18
                   262176 33 7 13 262176 34 7 6 983073 35 13 33
                   33 33 33 34 34 33 33 34 33 33 34 262187
                   6 53 1055439407 393260 13 54 53 53 53 262165 57 32
                   0 262187 57 58 3 262176 67 1 13 262203 67 68
                   1 262187 6 74 1056964608 262187 6 75 1073741824 262165 76 32
                   1 262187 76 77 6 262187 76 81 4 262187 6 90
                   1036831949 393260 13 91 90 90 90 262187 6 93 1065353216 393260
                   13 94 93 93 93 262187 57 98 0 262187 57 101
                   1 262187 57 104 2 262187 76 112 0 262187 6 116
                   1084227584 262187 76 122 1 262187 76 132 11 262187 76 139
                   8 262187 76 142 9 262187 6 151 3232874585 262187 6 155
                   1088386572 262187 76 172 10 262187 76 220 2 262187 6 233
                   1078530011 262187 6 247 3212836864 262187 6 256 981668463 262187 6 268
                   0 262187 6 326 1082130432 655390 344 7 7 7 7 6
                   6 6 6 262176 345 2 344 262203 345 346 2 262176
                   347 2 7 262187 6 360 1025758986 393260 13 361 360 360
                   360 262176 365 2 6 131092 368 262187 76 374 7 262187
                   76 381 5 262187 6 419 1103626240 262203 67 430 1 262203
                   67 434 1 262176 499 3 7 262203 499 500 3 262187
                   6 510 1050868099 262187 6 511 1042479491 262187 6 512 897988541 262168
                   513 7 4 262174 514 513 513 262176 515 9 514 262203
                   515 516 9 262203 67 517 1 262167 518 6 2 262176
                   519 1 518 262203 519 520 1 327734 2 4 0 3
                   131320 5 262203 34 357 7 262203 34 358 7 262203 33
                   359 7 262203 8 362 7 262203 34 384 7 262203 33
                   387 7 262203 34 397 7 262203 33 401 7 262203 34
                   408 7 262203 34 417 7 262203 33 422 7 262203 33
                   424 7 262203 33 427 7 262203 33 429 7 262203 33
                   433 7 262203 33 437 7 262203 33 442 7 262203 33
                   443 7 262203 33 445 7 262203 33 447 7 262203 33
                   449 7 262203 34 451 7 262203 34 453 7 262203 33
                   455 7 262203 33 457 7 262203 34 459 7 262203 33
                   461 7 262203 33 463 7 262203 34 465 7 262203 33
                   468 7 262203 33 471 7 262203 33 473 7 262203 33
                   474 7 262203 33 476 7 262203 34 478 7 262203 34
                   480 7 262203 33 482 7 262203 33 484 7 262203 34
                   486 7 262203 33 488 7 262203 33 490 7 262203 34
                   492 7 262203 33 495 7 262203 8 508 7 196670 357
                   268 196670 358 93 196670 359 361 327745 347 363 346 112
                   262205 7 364 363 196670 362 364 327745 365 366 346 77
                   262205 6 367 366 327860 368 369 367 93 196855 371 0
                   262394 369 370 371 131320 370 327745 34 372 362 58 262205
                   6 373 372 327745 365 375 346 374 262205 6 376 375
                   327864 368 377 373 376 196855 379 0 262394 377 378 379
                   131320 378 65788 131320 379 131321 371 131320 371 327745 365 382
                   346 381 262205 6 383 382 196670 357 383 327745 365 385
                   346 81 262205 6 386 385 196670 384 386 262205 7 388
                   362 524367 13 389 388 388 0 1 2 262205 13 390
                   359 327811 13 391 94 390 327813 13 392 389 391 196670
                   387 392 262205 6 393 384 327811 6 394 93 393 262205
                   13 395 387 327822 13 396 395 394 196670 387 396 262205
                   6 398 357 262205 6 399 357 327813 6 400 398 399
                   196670 397 400 262205 13 402 359 262205 7 403 362 524367
                   13 404 403 403 0 1 2 262205 6 405 384 393296
                   13 406 405 405 405 524300 13 407 1 46 402 404
                   406 196670 401 407 327745 34 409 401 98 262205 6 410
                   409 327745 34 411 401 101 262205 6 412 411 458764 6
                   413 1 40 410 412 327745 34 414 401 104 262205 6
                   415 414 458764 6 416 1 40 413 415 196670 408 416
                   262205 6 418 408 327813 6 420 418 419 524300 6 421
                   1 43 420 268 93 196670 417 421 262205 13 423 401
                   196670 422 423 262205 6 425 417 327822 13 426 94 425
                   196670 424 426 262201 13 428 15 196670 427 428 262205 13
                   431 430 393228 13 432 1 69 431 196670 429 432 262205
                   13 435 434 393228 13 436 1 69 435 196670 433 436
                   262205 13 438 433 262205 13 439 429 327809 13 440 438
                   439 393228 13 441 1 69 440 196670 437 441 262205 13
                   444 429 196670 443 444 262205 13 446 427 196670 445 446
                   262205 13 448 433 196670 447 448 262205 13 450 437 196670
                   449 450 262205 6 452 357 196670 451 452 262205 6 454
                   384 196670 453 454 262205 13 456 422 196670 455 456 262205
                   13 458 424 196670 457 458 262205 6 460 397 196670 459
                   460 262205 13 462 387 196670 461 462 262205 13 464 401
                   196670 463 464 262205 6 466 358 196670 465 466 1048633 13
                   467 48 443 445 447 449 451 453 455 457 459 461
                   463 465 196670 442 467 262205 13 469 427 262271 13 470
                   469 262205 13 472 429 196670 471 472 196670 473 470 262205
                   13 475 433 196670 474 475 262205 13 477 437 196670 476
                   477 262205 6 479 357 196670 478 479 262205 6 481 384
                   196670 480 481 262205 13 483 422 196670 482 483 262205 13
                   485 424 196670 484 485 262205 6 487 397 196670 486 487
                   262205 13 489 387 196670 488 489 262205 13 491 401 196670
                   490 491 262205 6 493 358 196670 492 493 1048633 13 494
                   48 471 473 474 476 478 480 482 484 486 488 490
                   492 196670 468 494 262205 13 496 442 262205 13 497 468
                   327809 13 498 496 497 196670 495 498 262205 13 501 495
                   327745 34 502 362 58 262205 6 503 502 327761 6 504
                   501 0 327761 6 505 501 1 327761 6 506 501 2
                   458832 7 507 504 505 506 503 196670 508 507 327737 7
                   509 11 508 196670 500 509 65789 65592 327734 7 11 0
                   9 196663 8 10 131320 12 262203 33 50 7 262205 7
                   51 10 524367 13 52 51 51 0 1 2 458764 13
                   55 1 26 52 54 196670 50 55 262205 13 56 50
                   327745 34 59 10 58 262205 6 60 59 327761 6 61
                   56 0 327761 6 62 56 1 327761 6 63 56 2
                   458832 7 64 61 62 63 60 131326 64 65592 327734 13
                   15 0 14 131320 16 262205 13 69 68 393228 13 70
                   1 69 69 131326 70 65592 327734 13 21 0 19 196663
                   18 20 131320 22 262203 34 73 7 262203 33 89 7
                   262203 33 92 7 262203 34 97 7 262203 34 109 7
                   327745 34 78 20 77 262205 6 79 78 327813 6 80
                   75 79 327745 34 82 20 81 262205 6 83 82 327813
                   6 84 80 83 327745 34 85 20 81 262205 6 86
                   85 327813 6 87 84 86 327809 6 88 74 87 196670
                   73 88 196670 89 91 262205 13 95 89 327811 13 96
                   94 95 196670 92 96 327745 34 99 92 98 262205 6
                   100 99 327745 34 102 92 101 262205 6 103 102 327745
                   34 105 92 104 262205 6 106 105 458764 6 107 1
                   37 103 106 458764 6 108 1 37 100 107 196670 97
                   108 262205 6 110 73 327811 6 111 110 93 327745 34
                   113 20 112 262205 6 114 113 327811 6 115 93 114
                   458764 6 117 1 26 115 116 327813 6 118 111 117
                   327809 6 119 93 118 262205 6 120 73 327811 6 121
                   120 93 327745 34 123 20 122 262205 6 124 123 327811
                   6 125 93 124 458764 6 126 1 26 125 116 327813
                   6 127 121 126 327809 6 128 93 127 327813 6 129
                   119 128 262205 6 130 97 327813 6 131 129 130 196670
                   109 131 327745 33 133 20 132 262205 13 134 133 262205
                   6 135 109 327822 13 136 134 135 131326 136 65592 327734
                   13 24 0 19 196663 18 23 131320 25 327745 33 140
                   23 139 262205 13 141 140 327745 33 143 23 142 262205
                   13 144 143 327745 33 145 23 142 262205 13 146 145
                   327745 33 147 23 139 262205 13 148 147 327813 13 149
                   146 148 327811 13 150 144 149 327745 34 152 23 81
                   262205 6 153 152 327813 6 154 151 153 327811 6 156
                   154 155 327745 34 157 23 81 262205 6 158 157 327813
                   6 159 156 158 393228 6 160 1 29 159 327822 13
                   161 150 160 327809 13 162 141 161 131326 162 65592 327734
                   6 28 0 26 196663 18 27 131320 29 262203 34 165
                   7 262203 34 168 7 262203 34 171 7 262203 34 178
                   7 262203 34 193 7 327745 34 166 27 112 262205 6
                   167 166 196670 165 167 327745 34 169 27 122 262205 6
                   170 169 196670 168 170 327745 34 173 27 172 262205 6
                   174 173 327745 34 175 27 172 262205 6 176 175 327813
                   6 177 174 176 196670 171 177 262205 6 179 165 327813
                   6 180 75 179 262205 6 181 165 262205 6 182 171
                   262205 6 183 171 327811 6 184 93 183 262205 6 185
                   165 262205 6 186 165 327813 6 187 185 186 327813 6
                   188 184 187 327809 6 189 182 188 393228 6 190 1
                   31 189 327809 6 191 181 190 327816 6 192 180 191
                   196670 178 192 262205 6 194 168 327813 6 195 75 194
                   262205 6 196 168 262205 6 197 171 262205 6 198 171
                   327811 6 199 93 198 262205 6 200 168 262205 6 201
                   168 327813 6 202 200 201 327813 6 203 199 202 327809
                   6 204 197 203 393228 6 205 1 31 204 327809 6
                   206 196 205 327816 6 207 195 206 196670 193 207 262205
                   6 208 178 262205 6 209 193 327813 6 210 208 209
                   131326 210 65592 327734 6 31 0 26 196663 18 30 131320
                   32 262203 34 213 7 262203 34 219 7 327745 34 214
                   30 172 262205 6 215 214 327745 34 216 30 172 262205
                   6 217 216 327813 6 218 215 217 196670 213 218 327745
                   34 221 30 220 262205 6 222 221 262205 6 223 213
                   327813 6 224 222 223 327745 34 225 30 220 262205 6
                   226 225 327811 6 227 224 226 327745 34 228 30 220
                   262205 6 229 228 327813 6 230 227 229 327809 6 231
                   230 93 196670 219 231 262205 6 232 213 262205 6 234
                   219 327813 6 235 233 234 262205 6 236 219 327813 6
                   237 235 236 327816 6 238 232 237 131326 238 65592 327734
                   13 48 0 35 196663 33 36 196663 33 37 196663 33
                   38 196663 33 39 196663 34 40 196663 34 41 196663 33
                   42 196663 33 43 196663 34 44 196663 33 45 196663 33
                   46 196663 34 47 131320 49 262203 33 241 7 262203 34
                   252 7 262203 34 258 7 262203 34 264 7 262203 34
                   270 7 262203 34 275 7 262203 34 280 7 262203 18
                   285 7 262203 33 300 7 262203 18 301 7 262203 34
                   304 7 262203 18 305 7 262203 34 308 7 262203 18
                   309 7 262203 33 312 7 262203 18 316 7 262203 33
                   320 7 262203 33 333 7 262203 33 343 7 262205 13
                   242 36 262205 13 243 37 458764 13 244 1 71 242
                   243 393228 13 245 1 69 244 262271 13 246 245 196670
                   241 246 327745 34 248 241 101 262205 6 249 248 327813
                   6 250 249 247 327745 34 251 241 101 196670 251 250
                   262205 13 253 37 262205 13 254 38 327828 6 255 253
                   254 524300 6 257 1 43 255 256 93 196670 252 257
                   262205 13 259 37 262205 13 260 36 327828 6 261 259
                   260 393228 6 262 1 4 261 524300 6 263 1 43
                   262 256 93 196670 258 263 262205 13 265 37 262205 13
                   266 39 327828 6 267 265 266 524300 6 269 1 43
                   267 268 93 196670 264 269 262205 13 271 38 262205 13
                   272 39 327828 6 273 271 272 524300 6 274 1 43
                   273 268 93 196670 270 274 262205 13 276 36 262205 13
                   277 39 327828 6 278 276 277 524300 6 279 1 43
                   278 268 93 196670 275 279 262205 13 281 36 262205 13
                   282 38 327828 6 283 281 282 524300 6 284 1 43
                   283 268 93 196670 280 284 262205 6 286 252 262205 6
                   287 258 262205 6 288 264 262205 6 289 270 262205 6
                   290 275 262205 6 291 280 262205 6 292 40 262205 6
                   293 41 262205 13 294 42 262205 13 295 43 262205 6
                   296 44 262205 13 297 45 262205 13 298 46 1048656 17
                   299 286 287 288 289 290 291 292 293 294 295 296
                   297 298 196670 285 299 262205 17 302 285 196670 301 302
                   327737 13 303 24 301 196670 300 303 262205 17 306 285
                   196670 305 306 327737 6 307 28 305 196670 304 307 262205
                   17 310 285 196670 309 310 327737 6 311 31 309 196670
                   308 311 262205 13 313 300 393296 13 314 93 93 93
                   327811 13 315 314 313 262205 17 317 285 196670 316 317
                   327737 13 318 21 316 327813 13 319 315 318 196670 312
                   319 262205 13 321 300 262205 6 322 304 327822 13 323
                   321 322 262205 6 324 308 327822 13 325 323 324 262205
                   6 327 252 327813 6 328 326 327 262205 6 329 258
                   327813 6 330 328 329 393296 13 331 330 330 330 327816
                   13 332 325 331 196670 320 332 262205 6 334 252 327822
                   13 335 94 334 262205 13 336 312 262205 13 337 320
                   327809 13 338 336 337 327813 13 339 335 338 196670 333
                   339 262205 6 340 47 262205 13 341 333 327822 13 342
                   341 340 196670 333 342 327745 347 348 346 122 262205 7
                   349 348 524367 13 350 349 349 0 1 2 196670 343
                   350 262205 13 351 343 262205 13 352 333 327809 13 353
                   352 351 196670 333 353 262205 13 354 333 131326 354 65592
                }
                NumSpecializationConstants 0
              }
              NumPipelineStates 6
              PipelineState id=20 vsg::VertexInputState
              {
                NumUserObjects 0
                NumBindings 3
                binding 0
                stride 12
                inputRate 0
                binding 1
                stride 12
                inputRate 0
                binding 2
                stride 8
                inputRate 0
                NumAttributes 3
                location 0
                binding 0
                format 106
                offset 0
                location 1
                binding 1
                format 106
                offset 0
                location 2
                binding 2
                format 103
                offset 0
              }
              PipelineState id=21 vsg::InputAssemblyState
              {
                NumUserObjects 0
                topology 3
                primitiveRestartEnable 0
              }
              PipelineState id=22 vsg::RasterizationState
              {
                NumUserObjects 0
                depthClampEnable 0
                rasterizerDiscardEnable 0
                polygonMode 0
                cullMode 0
                frontFace 0
                depthBiasEnable 0
                depthBiasConstantFactor 1
                depthBiasClamp 0
                depthBiasSlopeFactor 1
                lineWidth 1
              }
              PipelineState id=23 vsg::MultisampleState
              {
                NumUserObjects 0
                rasterizationSamples 1
                sampleShadingEnable 0
                minSampleShading 0
                NumSampleMask 0
                alphaToCoverageEnable 0
                alphaToOneEnable 0
              }
              PipelineState id=24 vsg::ColorBlendState
              {
                NumUserObjects 0
                logicOp 3
                logicOpEnable 0
                NumColorBlendAttachments 1
                blendEnable 0
                srcColorBlendFactor 6
                dstColorBlendFactor 7
                colorBlendOp 0
                srcAlphaBlendFactor 6
                dstAlphaBlendFactor 7
                alphaBlendOp 1
                colorWriteMask 15
                blendConstants 0 0 0 0
              }
              PipelineState id=25 vsg::DepthStencilState
              {
                NumUserObjects 0
                depthTestEnable 1
                depthWriteEnable 1
                depthCompareOp 1
                depthBoundsTestEnable 0
                stencilTestEnable 0
                front.failOp 0
                front.passOp 0
                front.depthFailOp 0
                front.compareOp 0
                front.compareMask 0
                front.writeMask 0
                front.reference 0
                back.failOp 0
                back.passOp 0
                back.depthFailOp 0
                back.compareOp 0
                back.compareMask 0
                back.writeMask 0
                back.reference 0
                minDepthBounds 0
                maxDepthBounds 1
              }
              subpass 0
            }
          }
          StateCommand id=26 vsg::BindDescriptorSet
          {
            NumUserObjects 0
            Slot 1
            PipelineLayout id=14
            firstSet 0
            DescriptorSet id=27 vsg::DescriptorSet
            {
              NumUserObjects 0
              DescriptorSetLayout id=15
              NumDescriptors 1
              Descriptor id=28 vsg::DescriptorBuffer
              {
                NumUserObjects 0
                DstBinding 10
                DstArrayElement 0
                NumData 1
                Data id=29 vsg::ubyteArray
                {
                  NumUserObjects 0
                  Layout 0 1 0 1 1 1 0 -1
                  Size 80
                  Storage id=0
                  Data 0 0 128 63 0 0 128 63 0 0 128 63
                   0 0 128 63 0 0 0 0 0 0 0 0
                   0 0 0 0 0 0 128 63 0 0 128 63
                   0 0 128 63 0 0 128 63 0 0 128 63
                   0 0 0 0 0 0 0 0 0 0 0 0
                   0 0 128 63 0 0 128 63 0 0 128 63
                   0 0 128 63 0 0 0 63
                }
              }
            }
          }
        }
        Matrix 2.98023e-09 0 -0.025 0 0.025 1.49012e-09 1.49012e-09 0 0 -0.107493 6.40708e-09 0
         0 0.0940672 0 1
        SubgraphRequiresLocalFrustum 1
      }
      Child id=30 vsg::MatrixTransform
      {
        NumUserObjects 0
        NumChildren 0
        Matrix 0.685921 0.727676 0 0 -0.324014 0.305421 0.895396 0 0.651558 -0.61417 0.445271 0
         7.35889 -6.92579 4.95831 1
        SubgraphRequiresLocalFrustum 1
      }
      Matrix 1 0 0 0 0 1 0 0 0 0 1 0
       0 0 0 1
      SubgraphRequiresLocalFrustum 1
    }
    NumStateCommands 2
    StateCommand id=31 vsg::BindGraphicsPipeline
    {
      NumUserObjects 0
      Slot 0
      GraphicsPipeline id=32 vsg::GraphicsPipeline
      {
        NumUserObjects 0
        PipelineLayout id=33 vsg::PipelineLayout
        {
          NumUserObjects 0
          Flags 0
          NumDescriptorSetLayouts 1
          DescriptorSetLayout id=34 vsg::DescriptorSetLayout
          {
            NumUserObjects 0
            NumDescriptorSetLayoutBindings 1
            binding 10
            descriptorType 6
            descriptorCount 1
            stageFlags 16
          }
          NumPushConstantRanges 1
          stageFlags 1
          offset 0
          size 128
        }
        NumShaderStages 2
        ShaderStage id=35 vsg::ShaderStage
        {
          NumUserObjects 0
          Stage 1
          EntryPoint "main"
          ShaderModule id=36 vsg::ShaderModule
          {
            NumUserObjects 0
            Source "#version 450

#extension GL_ARB_separate_shader_objects : enable

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(location = 0) in vec3 osg_Vertex;
layout(location = 0) out vec3 worldPos;

layout(location = 1) in vec3 osg_Normal;
layout(location = 1) out vec3 normalDir;

layout(location = 2) in vec2 osg_TexCoord0;
layout(location = 2) out vec2 texCoord0;

layout(location = 5) out vec3 viewDir;
layout(location = 6) out vec3 lightDir;

out gl_PerVertex{ vec4 gl_Position; };

void main()
{
    gl_Position = (pc.projection * pc.modelView) * vec4(osg_Vertex, 1.0);
    worldPos = vec4(pc.modelView * vec4(osg_Vertex, 1.0)).xyz;

    vec3 n = (pc.modelView * vec4(osg_Normal, 0.0)).xyz;
    normalDir = n;
    vec4 lpos = /*osg_LightSource.position*/ vec4(0.0, 0.25, 1.0, 0.0);
    viewDir = -vec3(pc.modelView * vec4(osg_Vertex, 1.0));

    if (lpos.w == 0.0)
        lightDir = lpos.xyz;
    else
        lightDir = lpos.xyz + viewDir;

    texCoord0 = osg_TexCoord0 * vec2(1,1);
}
"
            SPIRVSize 730
            SPIRV 119734787 66560 524298 110 0 131089 1 393227 1 1280527431 1685353262 808793134
             0 196622 0 1 983055 0 4 1852399981 0 10 16 26
             37 56 65 71 94 104 106 196611 2 450 589828 1096764487
             1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0 393221
             8 1348430951 1700164197 2019914866 0 393222 8 0 1348430951 1953067887 7237481 196613
             10 0 393221 14 1752397136 1936617283 1953390964 115 393222 14 0 1785688688
             1769235301 28271 393222 14 1 1701080941 1701402220 119 196613 16 25456 327685
             26 1600615279 1953654102 30821 327685 37 1819438967 1936674916 0 196613 53 110
             327685 56 1600615279 1836216142 27745 327685 65 1836216174 1766091873 114 262149 68
             1936683116 0 262149 71 2003134838 7498052 327685 94 1751607660 1919501428 0 327685
             104 1131963764 1685221231 48 393221 106 1600615279 1131963732 1685221231 48 327752 8
             0 11 0 196679 8 2 262216 14 0 5 327752 14
             0 35 0 327752 14 0 7 16 262216 14 1 5
             327752 14 1 35 64 327752 14 1 7 16 196679 14
             2 262215 26 30 0 262215 37 30 0 262215 56 30
             1 262215 65 30 1 262215 71 30 5 262215 94 30
             6 262215 104 30 2 262215 106 30 2 131091 2 196641
             3 2 196630 6 32 262167 7 6 4 196638 8 7
             262176 9 3 8 262203 9 10 3 262165 11 32 1
             262187 11 12 0 262168 13 7 4 262174 14 13 13
             262176 15 9 14 262203 15 16 9 262176 17 9 13
             262187 11 20 1 262167 24 6 3 262176 25 1 24
             262203 25 26 1 262187 6 28 1065353216 262176 34 3 7
             262176 36 3 24 262203 36 37 3 262176 52 7 24
             262203 25 56 1 262187 6 58 0 262203 36 65 3
             262176 67 7 7 262187 6 69 1048576000 458796 7 70 58
             69 28 58 262203 36 71 3 262165 85 32 0 262187
             85 86 3 262176 87 7 6 131092 90 262203 36 94
             3 262167 102 6 2 262176 103 3 102 262203 103 104
             3 262176 105 1 102 262203 105 106 1 327724 102 108
             28 28 327734 2 4 0 3 131320 5 262203 52 53
             7 262203 67 68 7 327745 17 18 16 12 262205 13
             19 18 327745 17 21 16 20 262205 13 22 21 327826
             13 23 19 22 262205 24 27 26 327761 6 29 27
             0 327761 6 30 27 1 327761 6 31 27 2 458832
             7 32 29 30 31 28 327825 7 33 23 32 327745
             34 35 10 12 196670 35 33 327745 17 38 16 20
             262205 13 39 38 262205 24 40 26 327761 6 41 40
             0 327761 6 42 40 1 327761 6 43 40 2 458832
             7 44 41 42 43 28 327825 7 45 39 44 327761
             6 46 45 0 327761 6 47 45 1 327761 6 48
             45 2 327761 6 49 45 3 458832 7 50 46 47
             48 49 524367 24 51 50 50 0 1 2 196670 37
             51 327745 17 54 16 20 262205 13 55 54 262205 24
             57 56 327761 6 59 57 0 327761 6 60 57 1
             327761 6 61 57 2 458832 7 62 59 60 61 58
             327825 7 63 55 62 524367 24 64 63 63 0 1
             2 196670 53 64 262205 24 66 53 196670 65 66 196670
             68 70 327745 17 72 16 20 262205 13 73 72 262205
             24 74 26 327761 6 75 74 0 327761 6 76 74
             1 327761 6 77 74 2 458832 7 78 75 76 77
             28 327825 7 79 73 78 327761 6 80 79 0 327761
             6 81 79 1 327761 6 82 79 2 393296 24 83
             80 81 82 262271 24 84 83 196670 71 84 327745 87
             88 68 86 262205 6 89 88 327860 90 91 89 58
             196855 93 0 262394 91 92 97 131320 92 262205 7 95
             68 524367 24 96 95 95 0 1 2 196670 94 96
             131321 93 131320 97 262205 7 98 68 524367 24 99 98
             98 0 1 2 262205 24 100 71 327809 24 101 99
             100 196670 94 101 131321 93 131320 93 262205 102 107 106
             327813 102 109 107 108 196670 104 109 65789 65592
          }
          NumSpecializationConstants 0
        }
        ShaderStage id=37 vsg::ShaderStage
        {
          NumUserObjects 0
          Stage 16
          EntryPoint "main"
          ShaderModule id=38 vsg::ShaderModule
          {
            NumUserObjects 0
            Source "#version 450
#pragma import_defines (VSG_DIFFUSE_MAP, VSG_EMISSIVE_MAP, VSG_LIGHTMAP_MAP, VSG_NORMAL_MAP, VSG_SPECULAR_MAP, VSG_TWOSIDED)

#extension GL_ARB_separate_shader_objects : enable

#ifdef VSG_DIFFUSE_MAP
layout(binding = 0) uniform sampler2D diffuseMap;
#endif

#ifdef VSG_NORMAL_MAP
layout(binding = 2) uniform sampler2D normalMap;
#endif

#ifdef VSG_LIGHTMAP_MAP
layout(binding = 3) uniform sampler2D aoMap;
#endif

#ifdef VSG_EMISSIVE_MAP
layout(binding = 4) uniform sampler2D emissiveMap;
#endif

#ifdef VSG_SPECULAR_MAP
layout(binding = 5) uniform sampler2D specularMap;
#endif

layout(push_constant) uniform PushConstants {
    mat4 projection;
    mat4 modelView;
} pc;

layout(binding = 10) uniform MaterialData
{
    vec4 ambientColor;
    vec4 diffuseColor;
    vec4 specularColor;
    vec4 emissiveColor;
    float shininess;
    float alphaMask;
    float alphaMaskCutoff;
} material;

layout(location = 0) in vec3 worldPos;
layout(location = 1) in vec3 normalDir;
layout(location = 2) in vec2 texCoord0;
layout(location = 5) in vec3 viewDir;
layout(location = 6) in vec3 lightDir;

layout(location = 0) out vec4 outColor;

// Find the normal for this fragment, pulling either from a predefined normal map
// or from the interpolated mesh normal and tangent attributes.
vec3 getNormal()
{
#ifdef VSG_NORMAL_MAP
    // Perturb normal, see http://www.thetenthplanet.de/archives/1180
    vec3 tangentNormal = texture(normalMap, texCoord0).xyz * 2.0 - 1.0;

    //tangentNormal *= vec3(2,2,1);

    vec3 q1 = dFdx(worldPos);
    vec3 q2 = dFdy(worldPos);
    vec2 st1 = dFdx(texCoord0);
    vec2 st2 = dFdy(texCoord0);

    vec3 N = normalize(normalDir);
    vec3 T = normalize(q1 * st2.t - q2 * st1.t);
    vec3 B = -normalize(cross(N, T));
    mat3 TBN = mat3(T, B, N);

    return normalize(TBN * tangentNormal);
#else
    return normalize(normalDir);
#endif
}

vec3 computeLighting(vec3 ambientColor, vec3 diffuseColor, vec3 specularColor, vec3 emissiveColor, float shininess, float ambientOcclusion, vec3 ld, vec3 nd, vec3 vd)
{
    vec3 color = vec3(0.0);
    color.rgb += ambientColor;

    float diff = max(dot(ld, nd), 0.0);
    color.rgb += diffuseColor * diff;

    if (diff > 0.0)
    {
        vec3 halfDir = normalize(ld + vd);
        color.rgb += specularColor * pow(max(dot(halfDir, nd), 0.0), shininess);
    }

    vec3 result = color + emissiveColor;
    result *= ambientOcclusion;

    return result;
}

void main()
{
    vec4 ambientColor = material.ambientColor;
    vec4 diffuseColor = material.diffuseColor;
    vec4 specularColor = material.specularColor;
    vec4 emissiveColor = material.emissiveColor;
    float shininess = material.shininess;
    float ambientOcclusion = 1.0;

#ifdef VSG_DIFFUSE_MAP
    diffuseColor *= texture(diffuseMap, texCoord0.st);
#endif

    if (material.alphaMask == 1.0f)
    {
        if (diffuseColor.a < material.alphaMaskCutoff)
            discard;
    }

#ifdef VSG_EMISSIVE_MAP
    emissiveColor *= texture(emissiveMap, texCoord0.st);
#endif

#ifdef VSG_LIGHTMAP_MAP
    ambientOcclusion *= texture(aoMap, texCoord0.st).r;
#endif

#ifdef VSG_SPECULAR_MAP
    specularColor *= texture(specularMap, texCoord0.st);
#endif

    vec3 nd = getNormal();
    vec3 ld = normalize(lightDir);
    vec3 vd = normalize(viewDir);

    vec3 colorFrontFace = computeLighting(ambientColor.rgb, diffuseColor.rgb, specularColor.rgb, emissiveColor.rgb, shininess, ambientOcclusion, ld, nd, vd);
#ifdef VSG_TWOSIDED
    vec3 colorBackFace = computeLighting(ambientColor.rgb, diffuseColor.rgb, specularColor.rgb, emissiveColor.rgb, shininess, ambientOcclusion, ld, -nd, vd);
    outColor.rgb = colorFrontFace + colorBackFace;
#else
    outColor.rgb = colorFrontFace;
#endif
    outColor.a = diffuseColor.a;
}
"
            SPIRVSize 1272
            SPIRV 119734787 66560 524298 175 0 131089 1 393227 1 1280527431 1685353262 808793134
             0 196622 0 1 851983 4 4 1852399981 0 26 82 127
             131 159 170 171 174 196624 4 7 196611 2 450 589828
             1096764487 1935622738 1918988389 1600484449 1684105331 1868526181 1667590754 29556 262149 4 1852399981 0
             327685 9 1316250983 1634562671 10348 983045 23 1886220131 1281717365 1952999273 677867113 993224310
             993224310 993224310 993224310 1715155302 1719024433 1719024435 1719024435 15155 393221 14 1768058209 1131703909
             1919904879 0 393221 15 1717987684 1130722165 1919904879 0 393221 16 1667592307 1918987381
             1869377347 114 393221 17 1936289125 1702259059 1869377347 114 327685 18 1852401779 1936027241
             115 458757 19 1768058209 1333030501 1970037603 1852795251 0 196613 20 25708 196613
             21 25710 196613 22 25718 327685 26 1836216174 1766091873 114 262149 31
             1869377379 114 262149 37 1717987684 0 262149 52 1718378856 7498052 262149 67
             1970496882 29804 393221 79 1768058209 1131703909 1919904879 0 393221 80 1702125901 1818323314
             1635017028 0 458758 80 0 1768058209 1131703909 1919904879 0 458758 80 1
             1717987684 1130722165 1919904879 0 458758 80 2 1667592307 1918987381 1869377347 114 458758
             80 3 1936289125 1702259059 1869377347 114 393222 80 4 1852401779 1936027241 115
             393222 80 5 1752198241 1935756641 107 458758 80 6 1752198241 1935756641 1953842027
             6710895 327685 82 1702125933 1818323314 0 393221 88 1717987684 1130722165 1919904879 0
             393221 92 1667592307 1918987381 1869377347 114 393221 96 1936289125 1702259059 1869377347 114
             327685 100 1852401779 1936027241 115 458757 105 1768058209 1333030501 1970037603 1852795251 0
             196613 124 25710 196613 126 25708 327685 127 1751607660 1919501428 0 196613
             130 25718 262149 131 2003134838 7498052 393221 134 1869377379 1869760114 1632007278 25955
             262149 135 1634886000 109 262149 138 1634886000 109 262149 141 1634886000 109
             262149 144 1634886000 109 262149 147 1634886000 109 262149 149 1634886000 109
             262149 151 1634886000 109 262149 153 1634886000 109 262149 155 1634886000 109
             327685 159 1131705711 1919904879 0 393221 168 1752397136 1936617283 1953390964 115 393222
             168 0 1785688688 1769235301 28271 393222 168 1 1701080941 1701402220 119 196613
             170 25456 327685 171 1819438967 1936674916 0 327685 174 1131963764 1685221231 48
             262215 26 30 1 327752 80 0 35 0 327752 80 1
             35 16 327752 80 2 35 32 327752 80 3 35 48
             327752 80 4 35 64 327752 80 5 35 68 327752 80
             6 35 72 196679 80 2 262215 82 34 0 262215 82
             33 10 262215 127 30 6 262215 131 30 5 262215 159
             30 0 262216 168 0 5 327752 168 0 35 0 327752
             168 0 7 16 262216 168 1 5 327752 168 1 35
             64 327752 168 1 7 16 196679 168 2 262215 171 30
             0 262215 174 30 2 131091 2 196641 3 2 196630 6
             32 262167 7 6 3 196641 8 7 262176 11 7 7
             262176 12 7 6 786465 13 7 11 11 11 11 12
             12 11 11 11 262176 25 1 7 262203 25 26 1
             262187 6 32 0 393260 7 33 32 32 32 131092 48
             262167 77 6 4 262176 78 7 77 589854 80 77 77
             77 77 6 6 6 262176 81 2 80 262203 81 82
             2 262165 83 32 1 262187 83 84 0 262176 85 2
             77 262187 83 89 1 262187 83 93 2 262187 83 97
             3 262187 83 101 4 262176 102 2 6 262187 6 106
             1065353216 262187 83 107 5 262165 113 32 0 262187 113 114
             3 262187 83 117 6 262203 25 127 1 262203 25 131
             1 262176 158 3 77 262203 158 159 3 262176 165 3
             6 262168 167 77 4 262174 168 167 167 262176 169 9
             168 262203 169 170 9 262203 25 171 1 262167 172 6
             2 262176 173 1 172 262203 173 174 1 327734 2 4
             0 3 131320 5 262203 78 79 7 262203 78 88 7
             262203 78 92 7 262203 78 96 7 262203 12 100 7
             262203 12 105 7 262203 11 124 7 262203 11 126 7
             262203 11 130 7 262203 11 134 7 262203 11 135 7
             262203 11 138 7 262203 11 141 7 262203 11 144 7
             262203 12 147 7 262203 12 149 7 262203 11 151 7
             262203 11 153 7 262203 11 155 7 327745 85 86 82
             84 262205 77 87 86 196670 79 87 327745 85 90 82
             89 262205 77 91 90 196670 88 91 327745 85 94 82
             93 262205 77 95 94 196670 92 95 327745 85 98 82
             97 262205 77 99 98 196670 96 99 327745 102 103 82
             101 262205 6 104 103 196670 100 104 196670 105 106 327745
             102 108 82 107 262205 6 109 108 327860 48 110 109
             106 196855 112 0 262394 110 111 112 131320 111 327745 12
             115 88 114 262205 6 116 115 327745 102 118 82 117
             262205 6 119 118 327864 48 120 116 119 196855 122 0
             262394 120 121 122 131320 121 65788 131320 122 131321 112 131320
             112 262201 7 125 9 196670 124 125 262205 7 128 127
             393228 7 129 1 69 128 196670 126 129 262205 7 132
             131 393228 7 133 1 69 132 196670 130 133 262205 77
             136 79 524367 7 137 136 136 0 1 2 196670 135
             137 262205 77 139 88 524367 7 140 139 139 0 1
             2 196670 138 140 262205 77 142 92 524367 7 143 142
             142 0 1 2 196670 141 143 262205 77 145 96 524367
             7 146 145 145 0 1 2 196670 144 146 262205 6
             148 100 196670 147 148 262205 6 150 105 196670 149 150
             262205 7 152 126 196670 151 152 262205 7 154 124 196670
             153 154 262205 7 156 130 196670 155 156 852025 7 157
             23 135 138 141 144 147 149 151 153 155 196670 134
             157 262205 7 160 134 262205 77 161 159 589903 77 162
             161 160 4 5 6 3 196670 159 162 327745 12 163
             88 114 262205 6 164 163 327745 165 166 159 114 196670
             166 164 65789 65592 327734 7 9 0 8 131320 10 262205
             7 27 26 393228 7 28 1 69 27 131326 28 65592
             327734 7 23 0 13 196663 11 14 196663 11 15 196663
             11 16 196663 11 17 196663 12 18 196663 12 19 196663
             11 20 196663 11 21 196663 11 22 131320 24 262203 11
             31 7 262203 12 37 7 262203 11 52 7 262203 11
             67 7 196670 31 33 262205 7 34 14 262205 7 35
             31 327809 7 36 35 34 196670 31 36 262205 7 38
             20 262205 7 39 21 327828 6 40 38 39 458764 6
             41 1 40 40 32 196670 37 41 262205 7 42 15
             262205 6 43 37 327822 7 44 42 43 262205 7 45
             31 327809 7 46 45 44 196670 31 46 262205 6 47
             37 327866 48 49 47 32 196855 51 0 262394 49 50
             51 131320 50 262205 7 53 20 262205 7 54 22 327809
             7 55 53 54 393228 7 56 1 69 55 196670 52
             56 262205 7 57 16 262205 7 58 52 262205 7 59
             21 327828 6 60 58 59 458764 6 61 1 40 60
             32 262205 6 62 18 458764 6 63 1 26 61 62
             327822 7 64 57 63 262205 7 65 31 327809 7 66
             65 64 196670 31 66 131321 51 131320 51 262205 7 68
             31 262205 7 69 17 327809 7 70 68 69 196670 67
             70 262205 6 71 19 262205 7 72 67 327822 7 73
             72 71 196670 67 73 262205 7 74 67 131326 74 65592
          }
          NumSpecializationConstants 0
        }
        NumPipelineStates 6
        PipelineState id=39 vsg::VertexInputState
        {
          NumUserObjects 0
          NumBindings 3
          binding 0
          stride 12
          inputRate 0
          binding 1
          stride 12
          inputRate 0
          binding 2
          stride 8
          inputRate 0
          NumAttributes 3
          location 0
          binding 0
          format 106
          offset 0
          location 1
          binding 1
          format 106
          offset 0
          location 2
          binding 2
          format 103
          offset 0
        }
        PipelineState id=40 vsg::InputAssemblyState
        {
          NumUserObjects 0
          topology 3
          primitiveRestartEnable 0
        }
        PipelineState id=41 vsg::RasterizationState
        {
          NumUserObjects 0
          depthClampEnable 0
          rasterizerDiscardEnable 0
          polygonMode 0
          cullMode 2
          frontFace 0
          depthBiasEnable 0
          depthBiasConstantFactor 1
          depthBiasClamp 0
          depthBiasSlopeFactor 1
          lineWidth 1
        }
        PipelineState id=42 vsg::MultisampleState
        {
          NumUserObjects 0
          rasterizationSamples 1
          sampleShadingEnable 0
          minSampleShading 0
          NumSampleMask 0
          alphaToCoverageEnable 0
          alphaToOneEnable 0
        }
        PipelineState id=43 vsg::ColorBlendState
        {
          NumUserObjects 0
          logicOp 3
          logicOpEnable 0
          NumColorBlendAttachments 1
          blendEnable 0
          srcColorBlendFactor 6
          dstColorBlendFactor 7
          colorBlendOp 0
          srcAlphaBlendFactor 6
          dstAlphaBlendFactor 7
          alphaBlendOp 1
          colorWriteMask 15
          blendConstants 0 0 0 0
        }
        PipelineState id=44 vsg::DepthStencilState
        {
          NumUserObjects 0
          depthTestEnable 1
          depthWriteEnable 1
          depthCompareOp 1
          depthBoundsTestEnable 0
          stencilTestEnable 0
          front.failOp 0
          front.passOp 0
          front.depthFailOp 0
          front.compareOp 0
          front.compareMask 0
          front.writeMask 0
          front.reference 0
          back.failOp 0
          back.passOp 0
          back.depthFailOp 0
          back.compareOp 0
          back.compareMask 0
          back.writeMask 0
          back.reference 0
          minDepthBounds 0
          maxDepthBounds 1
        }
        subpass 0
      }
    }
    StateCommand id=45 vsg::BindDescriptorSet
    {
      NumUserObjects 0
      Slot 1
      PipelineLayout id=33
      firstSet 0
      DescriptorSet id=46 vsg::DescriptorSet
      {
        NumUserObjects 0
        DescriptorSetLayout id=34
        NumDescriptors 1
        Descriptor id=47 vsg::DescriptorBuffer
        {
          NumUserObjects 0
          DstBinding 10
          DstArrayElement 0
          NumData 1
          Data id=48 vsg::ubyteArray
          {
            NumUserObjects 0
            Layout 0 1 0 1 1 1 0 -1
            Size 76
            Storage id=0
            Data 0 0 0 0 0 0 0 0 0 0 0 0
             0 0 128 63 0 0 128 63 0 0 128 63
             0 0 128 63 0 0 128 63 0 0 0 0
             0 0 0 0 0 0 0 0 0 0 128 63
             0 0 0 0 0 0 0 0 0 0 0 0
             0 0 128 63 0 0 0 0 0 0 128 63
             0 0 0 63
          }
        }
      }
    }
  }
  Matrix 1 0 0 0 0 6.12323e-17 1 0 0 -1 6.12323e-17 0
   0 0 0 1
  SubgraphRequiresLocalFrustum 1
}
